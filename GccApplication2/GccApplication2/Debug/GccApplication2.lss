
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ac  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  000814ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  000818e0  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081964  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00081d64  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00004c10  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d30  00000000  00000000  000250c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000db8  00000000  00000000  00025df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000180  00000000  00000000  00026bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00026d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012215  00000000  00000000  00026e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000390e  00000000  00000000  00039073  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00055350  00000000  00000000  0003c981  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000006ac  00000000  00000000  00091cd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 69 03 08 00 65 03 08 00 65 03 08 00     ... i...e...e...
   80010:	65 03 08 00 65 03 08 00 65 03 08 00 00 00 00 00     e...e...e.......
	...
   8002c:	65 03 08 00 65 03 08 00 00 00 00 00 65 03 08 00     e...e.......e...
   8003c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   8004c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   8005c:	65 03 08 00 5d 09 08 00 65 03 08 00 00 00 00 00     e...]...e.......
   8006c:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
	...
   80084:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   80094:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800a4:	00 00 00 00 65 03 08 00 65 03 08 00 65 03 08 00     ....e...e...e...
   800b4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800c4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800d4:	65 03 08 00 65 03 08 00 65 03 08 00 65 03 08 00     e...e...e...e...
   800e4:	65 03 08 00 65 03 08 00 d9 02 08 00 65 03 08 00     e...e.......e...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	000814ac 	.word	0x000814ac

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000814ac 	.word	0x000814ac
   80154:	20000438 	.word	0x20000438
   80158:	000814ac 	.word	0x000814ac
   8015c:	00000000 	.word	0x00000000

00080160 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   80162:	1857      	adds	r7, r2, r1
   80164:	2f08      	cmp	r7, #8
   80166:	bfd4      	ite	le
   80168:	2300      	movle	r3, #0
   8016a:	2301      	movgt	r3, #1
   8016c:	2908      	cmp	r1, #8
   8016e:	bf98      	it	ls
   80170:	2a08      	cmpls	r2, #8
   80172:	d85c      	bhi.n	8022e <can_init+0xce>
   80174:	460d      	mov	r5, r1
   80176:	2b00      	cmp	r3, #0
   80178:	d159      	bne.n	8022e <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   8017a:	4a2e      	ldr	r2, [pc, #184]	; (80234 <can_init+0xd4>)
   8017c:	6813      	ldr	r3, [r2, #0]
   8017e:	f023 0301 	bic.w	r3, r3, #1
   80182:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   80184:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80186:	4b2c      	ldr	r3, [pc, #176]	; (80238 <can_init+0xd8>)
   80188:	f44f 7440 	mov.w	r4, #768	; 0x300
   8018c:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   8018e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   80190:	f024 0403 	bic.w	r4, r4, #3
   80194:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   80196:	2403      	movs	r4, #3
   80198:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   8019a:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   8019c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   801a0:	4c26      	ldr	r4, [pc, #152]	; (8023c <can_init+0xdc>)
   801a2:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   801a6:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   801aa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   801ae:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   801b2:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   801b4:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801b6:	e019      	b.n	801ec <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   801b8:	481e      	ldr	r0, [pc, #120]	; (80234 <can_init+0xd4>)
   801ba:	f101 0310 	add.w	r3, r1, #16
   801be:	015b      	lsls	r3, r3, #5
   801c0:	18c2      	adds	r2, r0, r3
   801c2:	2600      	movs	r6, #0
   801c4:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801c6:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   801ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   801ce:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   801d2:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   801d6:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   801d8:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   801dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   801e0:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   801e4:	2301      	movs	r3, #1
   801e6:	408b      	lsls	r3, r1
   801e8:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   801ea:	3101      	adds	r1, #1
   801ec:	42b9      	cmp	r1, r7
   801ee:	dde3      	ble.n	801b8 <can_init+0x58>
   801f0:	2300      	movs	r3, #0
   801f2:	e00d      	b.n	80210 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   801f4:	490f      	ldr	r1, [pc, #60]	; (80234 <can_init+0xd4>)
   801f6:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   801fa:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   801fe:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   80202:	f103 0210 	add.w	r2, r3, #16
   80206:	0152      	lsls	r2, r2, #5
   80208:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   8020c:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   8020e:	3301      	adds	r3, #1
   80210:	42ab      	cmp	r3, r5
   80212:	dbef      	blt.n	801f4 <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   80214:	4b07      	ldr	r3, [pc, #28]	; (80234 <can_init+0xd4>)
   80216:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80218:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8021c:	4a08      	ldr	r2, [pc, #32]	; (80240 <can_init+0xe0>)
   8021e:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80220:	681a      	ldr	r2, [r3, #0]
   80222:	f042 0201 	orr.w	r2, r2, #1
   80226:	601a      	str	r2, [r3, #0]

	return 0;
   80228:	2000      	movs	r0, #0
}
   8022a:	bcf0      	pop	{r4, r5, r6, r7}
   8022c:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   8022e:	2001      	movs	r0, #1
   80230:	e7fb      	b.n	8022a <can_init+0xca>
   80232:	bf00      	nop
   80234:	400b4000 	.word	0x400b4000
   80238:	400e0e00 	.word	0x400e0e00
   8023c:	1000102b 	.word	0x1000102b
   80240:	e000e100 	.word	0xe000e100

00080244 <can_init_def_tx_rx_mb>:
{
   80244:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   80246:	2202      	movs	r2, #2
   80248:	2101      	movs	r1, #1
   8024a:	4b01      	ldr	r3, [pc, #4]	; (80250 <can_init_def_tx_rx_mb+0xc>)
   8024c:	4798      	blx	r3
}
   8024e:	bd08      	pop	{r3, pc}
   80250:	00080161 	.word	0x00080161

00080254 <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   80254:	014b      	lsls	r3, r1, #5
   80256:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   8025a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8025e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   80262:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80266:	d033      	beq.n	802d0 <can_receive+0x7c>
{
   80268:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   8026a:	014b      	lsls	r3, r1, #5
   8026c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80270:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80274:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80278:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   8027c:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80280:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80284:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   80286:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   8028a:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8028e:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   80290:	2300      	movs	r3, #0
   80292:	e003      	b.n	8029c <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   80294:	18c6      	adds	r6, r0, r3
   80296:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   80298:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   8029a:	3301      	adds	r3, #1
   8029c:	42ab      	cmp	r3, r5
   8029e:	da05      	bge.n	802ac <can_receive+0x58>
			if(i < 4)
   802a0:	2b03      	cmp	r3, #3
   802a2:	dcf7      	bgt.n	80294 <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   802a4:	18c6      	adds	r6, r0, r3
   802a6:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   802a8:	0a24      	lsrs	r4, r4, #8
   802aa:	e7f6      	b.n	8029a <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   802ac:	4b09      	ldr	r3, [pc, #36]	; (802d4 <can_receive+0x80>)
   802ae:	f101 0210 	add.w	r2, r1, #16
   802b2:	0152      	lsls	r2, r2, #5
   802b4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   802b8:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   802ba:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   802be:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   802c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802c6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   802ca:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
}
   802cc:	bc70      	pop	{r4, r5, r6}
   802ce:	4770      	bx	lr
		return 1;
   802d0:	2001      	movs	r0, #1
   802d2:	4770      	bx	lr
   802d4:	400b4000 	.word	0x400b4000

000802d8 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   802d8:	b530      	push	{r4, r5, lr}
   802da:	b085      	sub	sp, #20
	//if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   802dc:	4b1a      	ldr	r3, [pc, #104]	; (80348 <CAN0_Handler+0x70>)
   802de:	691d      	ldr	r5, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   802e0:	f015 0f06 	tst.w	r5, #6
   802e4:	d023      	beq.n	8032e <CAN0_Handler+0x56>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   802e6:	f015 0f02 	tst.w	r5, #2
   802ea:	d108      	bne.n	802fe <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);

		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   802ec:	f015 0f04 	tst.w	r5, #4
   802f0:	d00a      	beq.n	80308 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   802f2:	2102      	movs	r1, #2
   802f4:	a801      	add	r0, sp, #4
   802f6:	4b15      	ldr	r3, [pc, #84]	; (8034c <CAN0_Handler+0x74>)
   802f8:	4798      	blx	r3
{
   802fa:	2400      	movs	r4, #0
   802fc:	e010      	b.n	80320 <CAN0_Handler+0x48>
			can_receive(&message, 1);
   802fe:	2101      	movs	r1, #1
   80300:	a801      	add	r0, sp, #4
   80302:	4b12      	ldr	r3, [pc, #72]	; (8034c <CAN0_Handler+0x74>)
   80304:	4798      	blx	r3
   80306:	e7f8      	b.n	802fa <CAN0_Handler+0x22>
		}
		else
		{
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80308:	4811      	ldr	r0, [pc, #68]	; (80350 <CAN0_Handler+0x78>)
   8030a:	4b12      	ldr	r3, [pc, #72]	; (80354 <CAN0_Handler+0x7c>)
   8030c:	4798      	blx	r3
   8030e:	e7f4      	b.n	802fa <CAN0_Handler+0x22>

		//if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		//if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
		{
			if(DEBUG_INTERRUPT)printf("%u ", message.data[i]);
   80310:	ab04      	add	r3, sp, #16
   80312:	4423      	add	r3, r4
   80314:	f813 1c09 	ldrb.w	r1, [r3, #-9]
   80318:	480f      	ldr	r0, [pc, #60]	; (80358 <CAN0_Handler+0x80>)
   8031a:	4b0e      	ldr	r3, [pc, #56]	; (80354 <CAN0_Handler+0x7c>)
   8031c:	4798      	blx	r3
		for (int i = 0; i < message.data_length; i++)
   8031e:	3401      	adds	r4, #1
   80320:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80324:	429c      	cmp	r4, r3
   80326:	dbf3      	blt.n	80310 <CAN0_Handler+0x38>
		}
		if(DEBUG_INTERRUPT)printf("\r\r");
   80328:	480c      	ldr	r0, [pc, #48]	; (8035c <CAN0_Handler+0x84>)
   8032a:	4b0a      	ldr	r3, [pc, #40]	; (80354 <CAN0_Handler+0x7c>)
   8032c:	4798      	blx	r3
	}
	
	if(can_sr & CAN_SR_MB0)
   8032e:	f015 0f01 	tst.w	r5, #1
   80332:	d002      	beq.n	8033a <CAN0_Handler+0x62>
	{
		//if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80334:	2201      	movs	r2, #1
   80336:	4b04      	ldr	r3, [pc, #16]	; (80348 <CAN0_Handler+0x70>)
   80338:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8033a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8033e:	4b08      	ldr	r3, [pc, #32]	; (80360 <CAN0_Handler+0x88>)
   80340:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
}
   80344:	b005      	add	sp, #20
   80346:	bd30      	pop	{r4, r5, pc}
   80348:	400b4000 	.word	0x400b4000
   8034c:	00080255 	.word	0x00080255
   80350:	00081418 	.word	0x00081418
   80354:	00080795 	.word	0x00080795
   80358:	00081444 	.word	0x00081444
   8035c:	00081448 	.word	0x00081448
   80360:	e000e100 	.word	0xe000e100

00080364 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80364:	e7fe      	b.n	80364 <Dummy_Handler>
	...

00080368 <Reset_Handler>:
{
   80368:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   8036a:	4b11      	ldr	r3, [pc, #68]	; (803b0 <Reset_Handler+0x48>)
   8036c:	4a11      	ldr	r2, [pc, #68]	; (803b4 <Reset_Handler+0x4c>)
   8036e:	429a      	cmp	r2, r3
   80370:	d009      	beq.n	80386 <Reset_Handler+0x1e>
   80372:	4b0f      	ldr	r3, [pc, #60]	; (803b0 <Reset_Handler+0x48>)
   80374:	4a0f      	ldr	r2, [pc, #60]	; (803b4 <Reset_Handler+0x4c>)
   80376:	e003      	b.n	80380 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80378:	6811      	ldr	r1, [r2, #0]
   8037a:	6019      	str	r1, [r3, #0]
   8037c:	3304      	adds	r3, #4
   8037e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   80380:	490d      	ldr	r1, [pc, #52]	; (803b8 <Reset_Handler+0x50>)
   80382:	428b      	cmp	r3, r1
   80384:	d3f8      	bcc.n	80378 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80386:	4b0d      	ldr	r3, [pc, #52]	; (803bc <Reset_Handler+0x54>)
   80388:	e002      	b.n	80390 <Reset_Handler+0x28>
                *pDest++ = 0;
   8038a:	2200      	movs	r2, #0
   8038c:	601a      	str	r2, [r3, #0]
   8038e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   80390:	4a0b      	ldr	r2, [pc, #44]	; (803c0 <Reset_Handler+0x58>)
   80392:	4293      	cmp	r3, r2
   80394:	d3f9      	bcc.n	8038a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80396:	4b0b      	ldr	r3, [pc, #44]	; (803c4 <Reset_Handler+0x5c>)
   80398:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8039c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   803a0:	4a09      	ldr	r2, [pc, #36]	; (803c8 <Reset_Handler+0x60>)
   803a2:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   803a4:	4b09      	ldr	r3, [pc, #36]	; (803cc <Reset_Handler+0x64>)
   803a6:	4798      	blx	r3
        main();
   803a8:	4b09      	ldr	r3, [pc, #36]	; (803d0 <Reset_Handler+0x68>)
   803aa:	4798      	blx	r3
   803ac:	e7fe      	b.n	803ac <Reset_Handler+0x44>
   803ae:	bf00      	nop
   803b0:	20000000 	.word	0x20000000
   803b4:	000814ac 	.word	0x000814ac
   803b8:	20000434 	.word	0x20000434
   803bc:	20000434 	.word	0x20000434
   803c0:	200004b8 	.word	0x200004b8
   803c4:	00080000 	.word	0x00080000
   803c8:	e000ed00 	.word	0xe000ed00
   803cc:	000812a9 	.word	0x000812a9
   803d0:	00080479 	.word	0x00080479

000803d4 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   803d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   803d8:	4a20      	ldr	r2, [pc, #128]	; (8045c <SystemInit+0x88>)
   803da:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   803dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
   803e0:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   803e2:	4b1f      	ldr	r3, [pc, #124]	; (80460 <SystemInit+0x8c>)
   803e4:	6a1b      	ldr	r3, [r3, #32]
   803e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   803ea:	d107      	bne.n	803fc <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   803ec:	4a1d      	ldr	r2, [pc, #116]	; (80464 <SystemInit+0x90>)
   803ee:	4b1c      	ldr	r3, [pc, #112]	; (80460 <SystemInit+0x8c>)
   803f0:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   803f2:	4b1b      	ldr	r3, [pc, #108]	; (80460 <SystemInit+0x8c>)
   803f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803f6:	f013 0f01 	tst.w	r3, #1
   803fa:	d0fa      	beq.n	803f2 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   803fc:	4a1a      	ldr	r2, [pc, #104]	; (80468 <SystemInit+0x94>)
   803fe:	4b18      	ldr	r3, [pc, #96]	; (80460 <SystemInit+0x8c>)
   80400:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80402:	4b17      	ldr	r3, [pc, #92]	; (80460 <SystemInit+0x8c>)
   80404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80406:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8040a:	d0fa      	beq.n	80402 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8040c:	4a14      	ldr	r2, [pc, #80]	; (80460 <SystemInit+0x8c>)
   8040e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80410:	f023 0303 	bic.w	r3, r3, #3
   80414:	f043 0301 	orr.w	r3, r3, #1
   80418:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8041a:	4b11      	ldr	r3, [pc, #68]	; (80460 <SystemInit+0x8c>)
   8041c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8041e:	f013 0f08 	tst.w	r3, #8
   80422:	d0fa      	beq.n	8041a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80424:	4a11      	ldr	r2, [pc, #68]	; (8046c <SystemInit+0x98>)
   80426:	4b0e      	ldr	r3, [pc, #56]	; (80460 <SystemInit+0x8c>)
   80428:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8042a:	4b0d      	ldr	r3, [pc, #52]	; (80460 <SystemInit+0x8c>)
   8042c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8042e:	f013 0f02 	tst.w	r3, #2
   80432:	d0fa      	beq.n	8042a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80434:	2211      	movs	r2, #17
   80436:	4b0a      	ldr	r3, [pc, #40]	; (80460 <SystemInit+0x8c>)
   80438:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8043a:	4b09      	ldr	r3, [pc, #36]	; (80460 <SystemInit+0x8c>)
   8043c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8043e:	f013 0f08 	tst.w	r3, #8
   80442:	d0fa      	beq.n	8043a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80444:	2212      	movs	r2, #18
   80446:	4b06      	ldr	r3, [pc, #24]	; (80460 <SystemInit+0x8c>)
   80448:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8044a:	4b05      	ldr	r3, [pc, #20]	; (80460 <SystemInit+0x8c>)
   8044c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8044e:	f013 0f08 	tst.w	r3, #8
   80452:	d0fa      	beq.n	8044a <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80454:	4a06      	ldr	r2, [pc, #24]	; (80470 <SystemInit+0x9c>)
   80456:	4b07      	ldr	r3, [pc, #28]	; (80474 <SystemInit+0xa0>)
   80458:	601a      	str	r2, [r3, #0]
   8045a:	4770      	bx	lr
   8045c:	400e0a00 	.word	0x400e0a00
   80460:	400e0600 	.word	0x400e0600
   80464:	00370809 	.word	0x00370809
   80468:	01370809 	.word	0x01370809
   8046c:	200d3f01 	.word	0x200d3f01
   80470:	0501bd00 	.word	0x0501bd00
   80474:	20000000 	.word	0x20000000

00080478 <main>:
#include "can_controller.h"
#include "can_interrupt.h"
#include "PWM.h"


int main(void){
   80478:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
	SystemInit();
   8047a:	4b18      	ldr	r3, [pc, #96]	; (804dc <main+0x64>)
   8047c:	4798      	blx	r3
	configure_uart();
   8047e:	4b18      	ldr	r3, [pc, #96]	; (804e0 <main+0x68>)
   80480:	4798      	blx	r3
	
	uint32_t can_br = (SMP << 24) | (BRP << 16) | (SJW << 12) | ((PROSEG - 1) << 8) | ((PS1 - 1) << 4) | (PS2 - 1);
	
	can_init_def_tx_rx_mb(can_br);
   80482:	4818      	ldr	r0, [pc, #96]	; (804e4 <main+0x6c>)
   80484:	4b18      	ldr	r3, [pc, #96]	; (804e8 <main+0x70>)
   80486:	4798      	blx	r3
	
    WDT->WDT_MR = WDT_MR_WDDIS;
   80488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8048c:	4b17      	ldr	r3, [pc, #92]	; (804ec <main+0x74>)
   8048e:	605a      	str	r2, [r3, #4]
	set_bit(PIOA->PIO_PER, 19);
   80490:	f5a3 6345 	sub.w	r3, r3, #3152	; 0xc50
   80494:	681a      	ldr	r2, [r3, #0]
   80496:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8049a:	601a      	str	r2, [r3, #0]
	set_bit(PIOA->PIO_PER, 20);
   8049c:	681a      	ldr	r2, [r3, #0]
   8049e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804a2:	601a      	str	r2, [r3, #0]
	set_bit(PIOA->PIO_OER, 19);
   804a4:	691a      	ldr	r2, [r3, #16]
   804a6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804aa:	611a      	str	r2, [r3, #16]
	set_bit(PIOA->PIO_OER, 20);
   804ac:	691a      	ldr	r2, [r3, #16]
   804ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804b2:	611a      	str	r2, [r3, #16]
	
	set_bit(PIOA->PIO_SODR, 19);
   804b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804b6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804ba:	631a      	str	r2, [r3, #48]	; 0x30
	set_bit(PIOA->PIO_SODR, 20); 
   804bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   804c2:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	pwm_init();
   804c4:	4b0a      	ldr	r3, [pc, #40]	; (804f0 <main+0x78>)
   804c6:	4798      	blx	r3
	pwm_set_dutycycle(1.5/20);
   804c8:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
   804cc:	4909      	ldr	r1, [pc, #36]	; (804f4 <main+0x7c>)
   804ce:	4b0a      	ldr	r3, [pc, #40]	; (804f8 <main+0x80>)
   804d0:	4798      	blx	r3
	
	printf("Entering loop");
   804d2:	480a      	ldr	r0, [pc, #40]	; (804fc <main+0x84>)
   804d4:	4b0a      	ldr	r3, [pc, #40]	; (80500 <main+0x88>)
   804d6:	4798      	blx	r3
   804d8:	e7fe      	b.n	804d8 <main+0x60>
   804da:	bf00      	nop
   804dc:	000803d5 	.word	0x000803d5
   804e0:	000808d1 	.word	0x000808d1
   804e4:	00143165 	.word	0x00143165
   804e8:	00080245 	.word	0x00080245
   804ec:	400e1a50 	.word	0x400e1a50
   804f0:	000807b9 	.word	0x000807b9
   804f4:	3fb33333 	.word	0x3fb33333
   804f8:	00080821 	.word	0x00080821
   804fc:	0008144c 	.word	0x0008144c
   80500:	00080795 	.word	0x00080795

00080504 <printchar>:
#include "printf-stdarg.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80504:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   80506:	b2c8      	uxtb	r0, r1
   80508:	4b01      	ldr	r3, [pc, #4]	; (80510 <printchar+0xc>)
   8050a:	4798      	blx	r3
   8050c:	bd08      	pop	{r3, pc}
   8050e:	bf00      	nop
   80510:	00080939 	.word	0x00080939

00080514 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80518:	4607      	mov	r7, r0
   8051a:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   8051c:	1e15      	subs	r5, r2, #0
   8051e:	dd02      	ble.n	80526 <prints+0x12>
   80520:	460a      	mov	r2, r1
   80522:	2100      	movs	r1, #0
   80524:	e004      	b.n	80530 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80526:	f04f 0820 	mov.w	r8, #32
   8052a:	e00e      	b.n	8054a <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8052c:	3101      	adds	r1, #1
   8052e:	3201      	adds	r2, #1
   80530:	7810      	ldrb	r0, [r2, #0]
   80532:	2800      	cmp	r0, #0
   80534:	d1fa      	bne.n	8052c <prints+0x18>
		if (len >= width) width = 0;
   80536:	42a9      	cmp	r1, r5
   80538:	da01      	bge.n	8053e <prints+0x2a>
		else width -= len;
   8053a:	1a6d      	subs	r5, r5, r1
   8053c:	e000      	b.n	80540 <prints+0x2c>
		if (len >= width) width = 0;
   8053e:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80540:	f013 0f02 	tst.w	r3, #2
   80544:	d106      	bne.n	80554 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80546:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8054a:	f013 0401 	ands.w	r4, r3, #1
   8054e:	d00a      	beq.n	80566 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80550:	2400      	movs	r4, #0
   80552:	e010      	b.n	80576 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80554:	f04f 0830 	mov.w	r8, #48	; 0x30
   80558:	e7f7      	b.n	8054a <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8055a:	4641      	mov	r1, r8
   8055c:	4638      	mov	r0, r7
   8055e:	4b0d      	ldr	r3, [pc, #52]	; (80594 <prints+0x80>)
   80560:	4798      	blx	r3
			++pc;
   80562:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80564:	3d01      	subs	r5, #1
   80566:	2d00      	cmp	r5, #0
   80568:	dcf7      	bgt.n	8055a <prints+0x46>
   8056a:	e004      	b.n	80576 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8056c:	4638      	mov	r0, r7
   8056e:	4b09      	ldr	r3, [pc, #36]	; (80594 <prints+0x80>)
   80570:	4798      	blx	r3
		++pc;
   80572:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80574:	3601      	adds	r6, #1
   80576:	7831      	ldrb	r1, [r6, #0]
   80578:	2900      	cmp	r1, #0
   8057a:	d1f7      	bne.n	8056c <prints+0x58>
   8057c:	e005      	b.n	8058a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8057e:	4641      	mov	r1, r8
   80580:	4638      	mov	r0, r7
   80582:	4b04      	ldr	r3, [pc, #16]	; (80594 <prints+0x80>)
   80584:	4798      	blx	r3
		++pc;
   80586:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80588:	3d01      	subs	r5, #1
   8058a:	2d00      	cmp	r5, #0
   8058c:	dcf7      	bgt.n	8057e <prints+0x6a>
	}

	return pc;
}
   8058e:	4620      	mov	r0, r4
   80590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80594:	00080505 	.word	0x00080505

00080598 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80598:	b5f0      	push	{r4, r5, r6, r7, lr}
   8059a:	b085      	sub	sp, #20
   8059c:	4607      	mov	r7, r0
   8059e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   805a0:	b151      	cbz	r1, 805b8 <printi+0x20>
   805a2:	461e      	mov	r6, r3
   805a4:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   805a6:	b113      	cbz	r3, 805ae <printi+0x16>
   805a8:	2a0a      	cmp	r2, #10
   805aa:	d012      	beq.n	805d2 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   805ac:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   805ae:	ad04      	add	r5, sp, #16
   805b0:	2300      	movs	r3, #0
   805b2:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   805b6:	e018      	b.n	805ea <printi+0x52>
		print_buf[0] = '0';
   805b8:	2330      	movs	r3, #48	; 0x30
   805ba:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   805be:	2300      	movs	r3, #0
   805c0:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   805c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   805c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   805c8:	a901      	add	r1, sp, #4
   805ca:	4638      	mov	r0, r7
   805cc:	4c1b      	ldr	r4, [pc, #108]	; (8063c <printi+0xa4>)
   805ce:	47a0      	blx	r4
   805d0:	e029      	b.n	80626 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   805d2:	2900      	cmp	r1, #0
   805d4:	db01      	blt.n	805da <printi+0x42>
	register int t, neg = 0, pc = 0;
   805d6:	2600      	movs	r6, #0
   805d8:	e7e9      	b.n	805ae <printi+0x16>
		u = -i;
   805da:	424c      	negs	r4, r1
		neg = 1;
   805dc:	2601      	movs	r6, #1
   805de:	e7e6      	b.n	805ae <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   805e0:	3330      	adds	r3, #48	; 0x30
   805e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   805e6:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   805ea:	b14c      	cbz	r4, 80600 <printi+0x68>
		t = u % b;
   805ec:	fbb4 f3f2 	udiv	r3, r4, r2
   805f0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   805f4:	2b09      	cmp	r3, #9
   805f6:	ddf3      	ble.n	805e0 <printi+0x48>
			t += letbase - '0' - 10;
   805f8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   805fc:	440b      	add	r3, r1
   805fe:	e7ef      	b.n	805e0 <printi+0x48>
	}

	if (neg) {
   80600:	b156      	cbz	r6, 80618 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80604:	b11b      	cbz	r3, 8060e <printi+0x76>
   80606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80608:	f013 0f02 	tst.w	r3, #2
   8060c:	d10d      	bne.n	8062a <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   8060e:	232d      	movs	r3, #45	; 0x2d
   80610:	f805 3c01 	strb.w	r3, [r5, #-1]
   80614:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80616:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8061a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8061c:	4629      	mov	r1, r5
   8061e:	4638      	mov	r0, r7
   80620:	4c06      	ldr	r4, [pc, #24]	; (8063c <printi+0xa4>)
   80622:	47a0      	blx	r4
   80624:	4430      	add	r0, r6
}
   80626:	b005      	add	sp, #20
   80628:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   8062a:	212d      	movs	r1, #45	; 0x2d
   8062c:	4638      	mov	r0, r7
   8062e:	4b04      	ldr	r3, [pc, #16]	; (80640 <printi+0xa8>)
   80630:	4798      	blx	r3
			--width;
   80632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80634:	3b01      	subs	r3, #1
   80636:	930a      	str	r3, [sp, #40]	; 0x28
   80638:	e7ee      	b.n	80618 <printi+0x80>
   8063a:	bf00      	nop
   8063c:	00080515 	.word	0x00080515
   80640:	00080505 	.word	0x00080505

00080644 <print>:

static int print( char **out, const char *format, va_list args )
{
   80644:	b5f0      	push	{r4, r5, r6, r7, lr}
   80646:	b089      	sub	sp, #36	; 0x24
   80648:	4606      	mov	r6, r0
   8064a:	460c      	mov	r4, r1
   8064c:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   8064e:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80650:	e081      	b.n	80756 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80652:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80654:	2301      	movs	r3, #1
   80656:	e08b      	b.n	80770 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80658:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   8065a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   8065e:	7822      	ldrb	r2, [r4, #0]
   80660:	2a30      	cmp	r2, #48	; 0x30
   80662:	d0f9      	beq.n	80658 <print+0x14>
   80664:	2200      	movs	r2, #0
   80666:	e006      	b.n	80676 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80668:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8066c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   8066e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80672:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80674:	3401      	adds	r4, #1
   80676:	7821      	ldrb	r1, [r4, #0]
   80678:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   8067c:	b2c0      	uxtb	r0, r0
   8067e:	2809      	cmp	r0, #9
   80680:	d9f2      	bls.n	80668 <print+0x24>
			}
			if( *format == 's' ) {
   80682:	2973      	cmp	r1, #115	; 0x73
   80684:	d018      	beq.n	806b8 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80686:	2964      	cmp	r1, #100	; 0x64
   80688:	d022      	beq.n	806d0 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   8068a:	2978      	cmp	r1, #120	; 0x78
   8068c:	d02f      	beq.n	806ee <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   8068e:	2958      	cmp	r1, #88	; 0x58
   80690:	d03c      	beq.n	8070c <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80692:	2975      	cmp	r1, #117	; 0x75
   80694:	d049      	beq.n	8072a <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80696:	2963      	cmp	r1, #99	; 0x63
   80698:	d15c      	bne.n	80754 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   8069a:	9905      	ldr	r1, [sp, #20]
   8069c:	1d08      	adds	r0, r1, #4
   8069e:	9005      	str	r0, [sp, #20]
   806a0:	7809      	ldrb	r1, [r1, #0]
   806a2:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   806a6:	2100      	movs	r1, #0
   806a8:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   806ac:	a907      	add	r1, sp, #28
   806ae:	4630      	mov	r0, r6
   806b0:	4f34      	ldr	r7, [pc, #208]	; (80784 <print+0x140>)
   806b2:	47b8      	blx	r7
   806b4:	4405      	add	r5, r0
				continue;
   806b6:	e04d      	b.n	80754 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   806b8:	9905      	ldr	r1, [sp, #20]
   806ba:	1d08      	adds	r0, r1, #4
   806bc:	9005      	str	r0, [sp, #20]
   806be:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   806c0:	b121      	cbz	r1, 806cc <print+0x88>
   806c2:	4630      	mov	r0, r6
   806c4:	4f2f      	ldr	r7, [pc, #188]	; (80784 <print+0x140>)
   806c6:	47b8      	blx	r7
   806c8:	4405      	add	r5, r0
				continue;
   806ca:	e043      	b.n	80754 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   806cc:	492e      	ldr	r1, [pc, #184]	; (80788 <print+0x144>)
   806ce:	e7f8      	b.n	806c2 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   806d0:	9905      	ldr	r1, [sp, #20]
   806d2:	1d08      	adds	r0, r1, #4
   806d4:	9005      	str	r0, [sp, #20]
   806d6:	6809      	ldr	r1, [r1, #0]
   806d8:	2061      	movs	r0, #97	; 0x61
   806da:	9002      	str	r0, [sp, #8]
   806dc:	9301      	str	r3, [sp, #4]
   806de:	9200      	str	r2, [sp, #0]
   806e0:	2301      	movs	r3, #1
   806e2:	220a      	movs	r2, #10
   806e4:	4630      	mov	r0, r6
   806e6:	4f29      	ldr	r7, [pc, #164]	; (8078c <print+0x148>)
   806e8:	47b8      	blx	r7
   806ea:	4405      	add	r5, r0
				continue;
   806ec:	e032      	b.n	80754 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   806ee:	9905      	ldr	r1, [sp, #20]
   806f0:	1d08      	adds	r0, r1, #4
   806f2:	9005      	str	r0, [sp, #20]
   806f4:	6809      	ldr	r1, [r1, #0]
   806f6:	2061      	movs	r0, #97	; 0x61
   806f8:	9002      	str	r0, [sp, #8]
   806fa:	9301      	str	r3, [sp, #4]
   806fc:	9200      	str	r2, [sp, #0]
   806fe:	2300      	movs	r3, #0
   80700:	2210      	movs	r2, #16
   80702:	4630      	mov	r0, r6
   80704:	4f21      	ldr	r7, [pc, #132]	; (8078c <print+0x148>)
   80706:	47b8      	blx	r7
   80708:	4405      	add	r5, r0
				continue;
   8070a:	e023      	b.n	80754 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   8070c:	9905      	ldr	r1, [sp, #20]
   8070e:	1d08      	adds	r0, r1, #4
   80710:	9005      	str	r0, [sp, #20]
   80712:	6809      	ldr	r1, [r1, #0]
   80714:	2041      	movs	r0, #65	; 0x41
   80716:	9002      	str	r0, [sp, #8]
   80718:	9301      	str	r3, [sp, #4]
   8071a:	9200      	str	r2, [sp, #0]
   8071c:	2300      	movs	r3, #0
   8071e:	2210      	movs	r2, #16
   80720:	4630      	mov	r0, r6
   80722:	4f1a      	ldr	r7, [pc, #104]	; (8078c <print+0x148>)
   80724:	47b8      	blx	r7
   80726:	4405      	add	r5, r0
				continue;
   80728:	e014      	b.n	80754 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8072a:	9905      	ldr	r1, [sp, #20]
   8072c:	1d08      	adds	r0, r1, #4
   8072e:	9005      	str	r0, [sp, #20]
   80730:	6809      	ldr	r1, [r1, #0]
   80732:	2061      	movs	r0, #97	; 0x61
   80734:	9002      	str	r0, [sp, #8]
   80736:	9301      	str	r3, [sp, #4]
   80738:	9200      	str	r2, [sp, #0]
   8073a:	2300      	movs	r3, #0
   8073c:	220a      	movs	r2, #10
   8073e:	4630      	mov	r0, r6
   80740:	4f12      	ldr	r7, [pc, #72]	; (8078c <print+0x148>)
   80742:	47b8      	blx	r7
   80744:	4405      	add	r5, r0
				continue;
   80746:	e005      	b.n	80754 <print+0x110>
			++format;
   80748:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   8074a:	7821      	ldrb	r1, [r4, #0]
   8074c:	4630      	mov	r0, r6
   8074e:	4b10      	ldr	r3, [pc, #64]	; (80790 <print+0x14c>)
   80750:	4798      	blx	r3
			++pc;
   80752:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80754:	3401      	adds	r4, #1
   80756:	7823      	ldrb	r3, [r4, #0]
   80758:	b163      	cbz	r3, 80774 <print+0x130>
		if (*format == '%') {
   8075a:	2b25      	cmp	r3, #37	; 0x25
   8075c:	d1f5      	bne.n	8074a <print+0x106>
			++format;
   8075e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80760:	7863      	ldrb	r3, [r4, #1]
   80762:	b13b      	cbz	r3, 80774 <print+0x130>
			if (*format == '%') goto out;
   80764:	2b25      	cmp	r3, #37	; 0x25
   80766:	d0ef      	beq.n	80748 <print+0x104>
			if (*format == '-') {
   80768:	2b2d      	cmp	r3, #45	; 0x2d
   8076a:	f43f af72 	beq.w	80652 <print+0xe>
			width = pad = 0;
   8076e:	2300      	movs	r3, #0
   80770:	4614      	mov	r4, r2
   80772:	e774      	b.n	8065e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80774:	b116      	cbz	r6, 8077c <print+0x138>
   80776:	6833      	ldr	r3, [r6, #0]
   80778:	2200      	movs	r2, #0
   8077a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   8077c:	4628      	mov	r0, r5
   8077e:	b009      	add	sp, #36	; 0x24
   80780:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80782:	bf00      	nop
   80784:	00080515 	.word	0x00080515
   80788:	0008145c 	.word	0x0008145c
   8078c:	00080599 	.word	0x00080599
   80790:	00080505 	.word	0x00080505

00080794 <printf>:

int printf(const char *format, ...)
{
   80794:	b40f      	push	{r0, r1, r2, r3}
   80796:	b500      	push	{lr}
   80798:	b083      	sub	sp, #12
   8079a:	aa04      	add	r2, sp, #16
   8079c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   807a0:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   807a2:	2000      	movs	r0, #0
   807a4:	4b03      	ldr	r3, [pc, #12]	; (807b4 <printf+0x20>)
   807a6:	4798      	blx	r3
}
   807a8:	b003      	add	sp, #12
   807aa:	f85d eb04 	ldr.w	lr, [sp], #4
   807ae:	b004      	add	sp, #16
   807b0:	4770      	bx	lr
   807b2:	bf00      	nop
   807b4:	00080645 	.word	0x00080645

000807b8 <pwm_init>:
static const uint32_t CPRD = PWM_PERIOD * PWM_CLK_FREQ;



void pwm_init(){
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;// Aktivere periferals
   807b8:	4a15      	ldr	r2, [pc, #84]	; (80810 <pwm_init+0x58>)
   807ba:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   807be:	f043 0310 	orr.w	r3, r3, #16
   807c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	while(!(PMC->PMC_PCSR1 & PMC_PCSR1_PID36)){
   807c6:	4b12      	ldr	r3, [pc, #72]	; (80810 <pwm_init+0x58>)
   807c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   807cc:	f013 0f10 	tst.w	r3, #16
   807d0:	d0f9      	beq.n	807c6 <pwm_init+0xe>
		
	}
	
	PIOC->PIO_PER |= PIO_PC19;
   807d2:	4b10      	ldr	r3, [pc, #64]	; (80814 <pwm_init+0x5c>)
   807d4:	681a      	ldr	r2, [r3, #0]
   807d6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   807da:	601a      	str	r2, [r3, #0]
	
	PIOC->PIO_OER |= PIO_PC19;
   807dc:	691a      	ldr	r2, [r3, #16]
   807de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   807e2:	611a      	str	r2, [r3, #16]
	
	PIOC->PIO_PDR |= PIO_PDR_P19; //Disable PIO pin 19 == PIN44
   807e4:	685a      	ldr	r2, [r3, #4]
   807e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   807ea:	605a      	str	r2, [r3, #4]
	
	PIOC->PIO_ABSR |= PIO_ABSR_P19; //AB Peripheral select B
   807ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   807ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   807f2:	671a      	str	r2, [r3, #112]	; 0x70
	
	//MCK = 84 000 000
	
	//PWM_CLK set clock, clock prescaler and divider 2mhz
	PWM->PWM_CLK = PWM_CLK_DIVA(42); //PWM CLK at 2MHz
   807f4:	4b08      	ldr	r3, [pc, #32]	; (80818 <pwm_init+0x60>)
   807f6:	222a      	movs	r2, #42	; 0x2a
   807f8:	601a      	str	r2, [r3, #0]
	//polarity PWM_CMRx Clock source for specific channel
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPRE_CLKA | PWM_CMR_CPOL; // starts at high level polarity and activates clock a
   807fa:	f240 220b 	movw	r2, #523	; 0x20b
   807fe:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	//PWM_CPRDx channel period register, periode = CPRD * FREQ / PRESCALAR
	PWM->PWM_CH_NUM[5].PWM_CPRD = PWM_CPRD_CPRD(CPRD);
   80802:	f649 4240 	movw	r2, #40000	; 0x9c40
   80806:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	PWM->PWM_ENA = PWM_ENA_CHID5; // Enable register Channel ID 5
   8080a:	2220      	movs	r2, #32
   8080c:	605a      	str	r2, [r3, #4]
   8080e:	4770      	bx	lr
   80810:	400e0600 	.word	0x400e0600
   80814:	400e1200 	.word	0x400e1200
   80818:	40094000 	.word	0x40094000
   8081c:	00000000 	.word	0x00000000

00080820 <pwm_set_dutycycle>:

}

void pwm_set_dutycycle(double dutycycle){
   80820:	b570      	push	{r4, r5, r6, lr}
   80822:	4604      	mov	r4, r0
   80824:	460d      	mov	r5, r1
	
	if (dutycycle < PWM_MIN_DUTY_CYCLE){
   80826:	a31a      	add	r3, pc, #104	; (adr r3, 80890 <pwm_set_dutycycle+0x70>)
   80828:	e9d3 2300 	ldrd	r2, r3, [r3]
   8082c:	4e20      	ldr	r6, [pc, #128]	; (808b0 <pwm_set_dutycycle+0x90>)
   8082e:	47b0      	blx	r6
   80830:	b958      	cbnz	r0, 8084a <pwm_set_dutycycle+0x2a>
		dutycycle = PWM_MIN_DUTY_CYCLE;
	}
	else if (dutycycle > PWM_MAX_DUTY_CYCLE){
   80832:	a319      	add	r3, pc, #100	; (adr r3, 80898 <pwm_set_dutycycle+0x78>)
   80834:	e9d3 2300 	ldrd	r2, r3, [r3]
   80838:	4620      	mov	r0, r4
   8083a:	4629      	mov	r1, r5
   8083c:	4e1d      	ldr	r6, [pc, #116]	; (808b4 <pwm_set_dutycycle+0x94>)
   8083e:	47b0      	blx	r6
   80840:	b130      	cbz	r0, 80850 <pwm_set_dutycycle+0x30>
		dutycycle = PWM_MAX_DUTY_CYCLE;
   80842:	a515      	add	r5, pc, #84	; (adr r5, 80898 <pwm_set_dutycycle+0x78>)
   80844:	e9d5 4500 	ldrd	r4, r5, [r5]
   80848:	e002      	b.n	80850 <pwm_set_dutycycle+0x30>
		dutycycle = PWM_MIN_DUTY_CYCLE;
   8084a:	a511      	add	r5, pc, #68	; (adr r5, 80890 <pwm_set_dutycycle+0x70>)
   8084c:	e9d5 4500 	ldrd	r4, r5, [r5]
	}
	//this drives the servo and will be the singular way we controll the system 
	 
	//uint32_t clk_dutycycle =  ;
	//PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CPOL;
	REG_PWM_CDTY5 = 1/((PWM_PERIOD-dutycycle*PWM_PERIOD)*PWM_CLK_FREQ);
   80850:	4e19      	ldr	r6, [pc, #100]	; (808b8 <pwm_set_dutycycle+0x98>)
   80852:	a313      	add	r3, pc, #76	; (adr r3, 808a0 <pwm_set_dutycycle+0x80>)
   80854:	e9d3 2300 	ldrd	r2, r3, [r3]
   80858:	4620      	mov	r0, r4
   8085a:	4629      	mov	r1, r5
   8085c:	47b0      	blx	r6
   8085e:	4602      	mov	r2, r0
   80860:	460b      	mov	r3, r1
   80862:	a10f      	add	r1, pc, #60	; (adr r1, 808a0 <pwm_set_dutycycle+0x80>)
   80864:	e9d1 0100 	ldrd	r0, r1, [r1]
   80868:	4c14      	ldr	r4, [pc, #80]	; (808bc <pwm_set_dutycycle+0x9c>)
   8086a:	47a0      	blx	r4
   8086c:	a30e      	add	r3, pc, #56	; (adr r3, 808a8 <pwm_set_dutycycle+0x88>)
   8086e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80872:	47b0      	blx	r6
   80874:	4602      	mov	r2, r0
   80876:	460b      	mov	r3, r1
   80878:	2000      	movs	r0, #0
   8087a:	4911      	ldr	r1, [pc, #68]	; (808c0 <pwm_set_dutycycle+0xa0>)
   8087c:	4c11      	ldr	r4, [pc, #68]	; (808c4 <pwm_set_dutycycle+0xa4>)
   8087e:	47a0      	blx	r4
   80880:	4b11      	ldr	r3, [pc, #68]	; (808c8 <pwm_set_dutycycle+0xa8>)
   80882:	4798      	blx	r3
   80884:	4b11      	ldr	r3, [pc, #68]	; (808cc <pwm_set_dutycycle+0xac>)
   80886:	6018      	str	r0, [r3, #0]
   80888:	bd70      	pop	{r4, r5, r6, pc}
   8088a:	bf00      	nop
   8088c:	f3af 8000 	nop.w
   80890:	70a3d70a 	.word	0x70a3d70a
   80894:	3fa70a3d 	.word	0x3fa70a3d
   80898:	ae147ae2 	.word	0xae147ae2
   8089c:	3fbae147 	.word	0x3fbae147
   808a0:	47ae147b 	.word	0x47ae147b
   808a4:	3f947ae1 	.word	0x3f947ae1
   808a8:	00000000 	.word	0x00000000
   808ac:	413e8480 	.word	0x413e8480
   808b0:	00081219 	.word	0x00081219
   808b4:	00081255 	.word	0x00081255
   808b8:	00080d35 	.word	0x00080d35
   808bc:	000809cd 	.word	0x000809cd
   808c0:	3ff00000 	.word	0x3ff00000
   808c4:	00080f89 	.word	0x00080f89
   808c8:	00081269 	.word	0x00081269
   808cc:	400942a4 	.word	0x400942a4

000808d0 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   808d0:	4b16      	ldr	r3, [pc, #88]	; (8092c <configure_uart+0x5c>)
   808d2:	2200      	movs	r2, #0
   808d4:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   808d6:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808d8:	4b15      	ldr	r3, [pc, #84]	; (80930 <configure_uart+0x60>)
   808da:	f44f 7140 	mov.w	r1, #768	; 0x300
   808de:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808e0:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   808e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   808e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
   808e6:	4002      	ands	r2, r0
   808e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   808ec:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   808ee:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   808f0:	f44f 7280 	mov.w	r2, #256	; 0x100
   808f4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   808f8:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   808fa:	f503 7300 	add.w	r3, r3, #512	; 0x200
   808fe:	21ac      	movs	r1, #172	; 0xac
   80900:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80902:	f240 2123 	movw	r1, #547	; 0x223
   80906:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80908:	f44f 6100 	mov.w	r1, #2048	; 0x800
   8090c:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8090e:	f240 2102 	movw	r1, #514	; 0x202
   80912:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80916:	f04f 31ff 	mov.w	r1, #4294967295
   8091a:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   8091c:	21e1      	movs	r1, #225	; 0xe1
   8091e:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80920:	4904      	ldr	r1, [pc, #16]	; (80934 <configure_uart+0x64>)
   80922:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80924:	2250      	movs	r2, #80	; 0x50
   80926:	601a      	str	r2, [r3, #0]
   80928:	4770      	bx	lr
   8092a:	bf00      	nop
   8092c:	20000450 	.word	0x20000450
   80930:	400e0e00 	.word	0x400e0e00
   80934:	e000e100 	.word	0xe000e100

00080938 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80938:	4b07      	ldr	r3, [pc, #28]	; (80958 <uart_putchar+0x20>)
   8093a:	695b      	ldr	r3, [r3, #20]
   8093c:	f013 0f02 	tst.w	r3, #2
   80940:	d008      	beq.n	80954 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80942:	4b05      	ldr	r3, [pc, #20]	; (80958 <uart_putchar+0x20>)
   80944:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80946:	4b04      	ldr	r3, [pc, #16]	; (80958 <uart_putchar+0x20>)
   80948:	695b      	ldr	r3, [r3, #20]
   8094a:	f413 7f00 	tst.w	r3, #512	; 0x200
   8094e:	d0fa      	beq.n	80946 <uart_putchar+0xe>
	return 0;
   80950:	2000      	movs	r0, #0
   80952:	4770      	bx	lr
	return 1;
   80954:	2001      	movs	r0, #1
}
   80956:	4770      	bx	lr
   80958:	400e0800 	.word	0x400e0800

0008095c <UART_Handler>:

void UART_Handler(void)
{
   8095c:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   8095e:	4b15      	ldr	r3, [pc, #84]	; (809b4 <UART_Handler+0x58>)
   80960:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80962:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80966:	d003      	beq.n	80970 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80968:	f44f 71a8 	mov.w	r1, #336	; 0x150
   8096c:	4a11      	ldr	r2, [pc, #68]	; (809b4 <UART_Handler+0x58>)
   8096e:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80970:	f013 0f01 	tst.w	r3, #1
   80974:	d012      	beq.n	8099c <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80976:	4810      	ldr	r0, [pc, #64]	; (809b8 <UART_Handler+0x5c>)
   80978:	7842      	ldrb	r2, [r0, #1]
   8097a:	1c53      	adds	r3, r2, #1
   8097c:	4259      	negs	r1, r3
   8097e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80982:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80986:	bf58      	it	pl
   80988:	424b      	negpl	r3, r1
   8098a:	7801      	ldrb	r1, [r0, #0]
   8098c:	428b      	cmp	r3, r1
   8098e:	d006      	beq.n	8099e <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80990:	4908      	ldr	r1, [pc, #32]	; (809b4 <UART_Handler+0x58>)
   80992:	6988      	ldr	r0, [r1, #24]
   80994:	4908      	ldr	r1, [pc, #32]	; (809b8 <UART_Handler+0x5c>)
   80996:	440a      	add	r2, r1
   80998:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   8099a:	704b      	strb	r3, [r1, #1]
   8099c:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   8099e:	4807      	ldr	r0, [pc, #28]	; (809bc <UART_Handler+0x60>)
   809a0:	4b07      	ldr	r3, [pc, #28]	; (809c0 <UART_Handler+0x64>)
   809a2:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   809a4:	4b04      	ldr	r3, [pc, #16]	; (809b8 <UART_Handler+0x5c>)
   809a6:	7859      	ldrb	r1, [r3, #1]
   809a8:	4a02      	ldr	r2, [pc, #8]	; (809b4 <UART_Handler+0x58>)
   809aa:	6992      	ldr	r2, [r2, #24]
   809ac:	440b      	add	r3, r1
   809ae:	709a      	strb	r2, [r3, #2]
			return;
   809b0:	bd08      	pop	{r3, pc}
   809b2:	bf00      	nop
   809b4:	400e0800 	.word	0x400e0800
   809b8:	20000450 	.word	0x20000450
   809bc:	00081464 	.word	0x00081464
   809c0:	00080795 	.word	0x00080795

000809c4 <__aeabi_drsub>:
   809c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   809c8:	e002      	b.n	809d0 <__adddf3>
   809ca:	bf00      	nop

000809cc <__aeabi_dsub>:
   809cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000809d0 <__adddf3>:
   809d0:	b530      	push	{r4, r5, lr}
   809d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   809d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   809da:	ea94 0f05 	teq	r4, r5
   809de:	bf08      	it	eq
   809e0:	ea90 0f02 	teqeq	r0, r2
   809e4:	bf1f      	itttt	ne
   809e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   809ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   809ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   809f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   809f6:	f000 80e2 	beq.w	80bbe <__adddf3+0x1ee>
   809fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   809fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80a02:	bfb8      	it	lt
   80a04:	426d      	neglt	r5, r5
   80a06:	dd0c      	ble.n	80a22 <__adddf3+0x52>
   80a08:	442c      	add	r4, r5
   80a0a:	ea80 0202 	eor.w	r2, r0, r2
   80a0e:	ea81 0303 	eor.w	r3, r1, r3
   80a12:	ea82 0000 	eor.w	r0, r2, r0
   80a16:	ea83 0101 	eor.w	r1, r3, r1
   80a1a:	ea80 0202 	eor.w	r2, r0, r2
   80a1e:	ea81 0303 	eor.w	r3, r1, r3
   80a22:	2d36      	cmp	r5, #54	; 0x36
   80a24:	bf88      	it	hi
   80a26:	bd30      	pophi	{r4, r5, pc}
   80a28:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80a2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80a30:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80a34:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80a38:	d002      	beq.n	80a40 <__adddf3+0x70>
   80a3a:	4240      	negs	r0, r0
   80a3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80a40:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80a44:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80a48:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80a4c:	d002      	beq.n	80a54 <__adddf3+0x84>
   80a4e:	4252      	negs	r2, r2
   80a50:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80a54:	ea94 0f05 	teq	r4, r5
   80a58:	f000 80a7 	beq.w	80baa <__adddf3+0x1da>
   80a5c:	f1a4 0401 	sub.w	r4, r4, #1
   80a60:	f1d5 0e20 	rsbs	lr, r5, #32
   80a64:	db0d      	blt.n	80a82 <__adddf3+0xb2>
   80a66:	fa02 fc0e 	lsl.w	ip, r2, lr
   80a6a:	fa22 f205 	lsr.w	r2, r2, r5
   80a6e:	1880      	adds	r0, r0, r2
   80a70:	f141 0100 	adc.w	r1, r1, #0
   80a74:	fa03 f20e 	lsl.w	r2, r3, lr
   80a78:	1880      	adds	r0, r0, r2
   80a7a:	fa43 f305 	asr.w	r3, r3, r5
   80a7e:	4159      	adcs	r1, r3
   80a80:	e00e      	b.n	80aa0 <__adddf3+0xd0>
   80a82:	f1a5 0520 	sub.w	r5, r5, #32
   80a86:	f10e 0e20 	add.w	lr, lr, #32
   80a8a:	2a01      	cmp	r2, #1
   80a8c:	fa03 fc0e 	lsl.w	ip, r3, lr
   80a90:	bf28      	it	cs
   80a92:	f04c 0c02 	orrcs.w	ip, ip, #2
   80a96:	fa43 f305 	asr.w	r3, r3, r5
   80a9a:	18c0      	adds	r0, r0, r3
   80a9c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80aa0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80aa4:	d507      	bpl.n	80ab6 <__adddf3+0xe6>
   80aa6:	f04f 0e00 	mov.w	lr, #0
   80aaa:	f1dc 0c00 	rsbs	ip, ip, #0
   80aae:	eb7e 0000 	sbcs.w	r0, lr, r0
   80ab2:	eb6e 0101 	sbc.w	r1, lr, r1
   80ab6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80aba:	d31b      	bcc.n	80af4 <__adddf3+0x124>
   80abc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80ac0:	d30c      	bcc.n	80adc <__adddf3+0x10c>
   80ac2:	0849      	lsrs	r1, r1, #1
   80ac4:	ea5f 0030 	movs.w	r0, r0, rrx
   80ac8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80acc:	f104 0401 	add.w	r4, r4, #1
   80ad0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80ad4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80ad8:	f080 809a 	bcs.w	80c10 <__adddf3+0x240>
   80adc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80ae0:	bf08      	it	eq
   80ae2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80ae6:	f150 0000 	adcs.w	r0, r0, #0
   80aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80aee:	ea41 0105 	orr.w	r1, r1, r5
   80af2:	bd30      	pop	{r4, r5, pc}
   80af4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80af8:	4140      	adcs	r0, r0
   80afa:	eb41 0101 	adc.w	r1, r1, r1
   80afe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80b02:	f1a4 0401 	sub.w	r4, r4, #1
   80b06:	d1e9      	bne.n	80adc <__adddf3+0x10c>
   80b08:	f091 0f00 	teq	r1, #0
   80b0c:	bf04      	itt	eq
   80b0e:	4601      	moveq	r1, r0
   80b10:	2000      	moveq	r0, #0
   80b12:	fab1 f381 	clz	r3, r1
   80b16:	bf08      	it	eq
   80b18:	3320      	addeq	r3, #32
   80b1a:	f1a3 030b 	sub.w	r3, r3, #11
   80b1e:	f1b3 0220 	subs.w	r2, r3, #32
   80b22:	da0c      	bge.n	80b3e <__adddf3+0x16e>
   80b24:	320c      	adds	r2, #12
   80b26:	dd08      	ble.n	80b3a <__adddf3+0x16a>
   80b28:	f102 0c14 	add.w	ip, r2, #20
   80b2c:	f1c2 020c 	rsb	r2, r2, #12
   80b30:	fa01 f00c 	lsl.w	r0, r1, ip
   80b34:	fa21 f102 	lsr.w	r1, r1, r2
   80b38:	e00c      	b.n	80b54 <__adddf3+0x184>
   80b3a:	f102 0214 	add.w	r2, r2, #20
   80b3e:	bfd8      	it	le
   80b40:	f1c2 0c20 	rsble	ip, r2, #32
   80b44:	fa01 f102 	lsl.w	r1, r1, r2
   80b48:	fa20 fc0c 	lsr.w	ip, r0, ip
   80b4c:	bfdc      	itt	le
   80b4e:	ea41 010c 	orrle.w	r1, r1, ip
   80b52:	4090      	lslle	r0, r2
   80b54:	1ae4      	subs	r4, r4, r3
   80b56:	bfa2      	ittt	ge
   80b58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80b5c:	4329      	orrge	r1, r5
   80b5e:	bd30      	popge	{r4, r5, pc}
   80b60:	ea6f 0404 	mvn.w	r4, r4
   80b64:	3c1f      	subs	r4, #31
   80b66:	da1c      	bge.n	80ba2 <__adddf3+0x1d2>
   80b68:	340c      	adds	r4, #12
   80b6a:	dc0e      	bgt.n	80b8a <__adddf3+0x1ba>
   80b6c:	f104 0414 	add.w	r4, r4, #20
   80b70:	f1c4 0220 	rsb	r2, r4, #32
   80b74:	fa20 f004 	lsr.w	r0, r0, r4
   80b78:	fa01 f302 	lsl.w	r3, r1, r2
   80b7c:	ea40 0003 	orr.w	r0, r0, r3
   80b80:	fa21 f304 	lsr.w	r3, r1, r4
   80b84:	ea45 0103 	orr.w	r1, r5, r3
   80b88:	bd30      	pop	{r4, r5, pc}
   80b8a:	f1c4 040c 	rsb	r4, r4, #12
   80b8e:	f1c4 0220 	rsb	r2, r4, #32
   80b92:	fa20 f002 	lsr.w	r0, r0, r2
   80b96:	fa01 f304 	lsl.w	r3, r1, r4
   80b9a:	ea40 0003 	orr.w	r0, r0, r3
   80b9e:	4629      	mov	r1, r5
   80ba0:	bd30      	pop	{r4, r5, pc}
   80ba2:	fa21 f004 	lsr.w	r0, r1, r4
   80ba6:	4629      	mov	r1, r5
   80ba8:	bd30      	pop	{r4, r5, pc}
   80baa:	f094 0f00 	teq	r4, #0
   80bae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80bb2:	bf06      	itte	eq
   80bb4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80bb8:	3401      	addeq	r4, #1
   80bba:	3d01      	subne	r5, #1
   80bbc:	e74e      	b.n	80a5c <__adddf3+0x8c>
   80bbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80bc2:	bf18      	it	ne
   80bc4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80bc8:	d029      	beq.n	80c1e <__adddf3+0x24e>
   80bca:	ea94 0f05 	teq	r4, r5
   80bce:	bf08      	it	eq
   80bd0:	ea90 0f02 	teqeq	r0, r2
   80bd4:	d005      	beq.n	80be2 <__adddf3+0x212>
   80bd6:	ea54 0c00 	orrs.w	ip, r4, r0
   80bda:	bf04      	itt	eq
   80bdc:	4619      	moveq	r1, r3
   80bde:	4610      	moveq	r0, r2
   80be0:	bd30      	pop	{r4, r5, pc}
   80be2:	ea91 0f03 	teq	r1, r3
   80be6:	bf1e      	ittt	ne
   80be8:	2100      	movne	r1, #0
   80bea:	2000      	movne	r0, #0
   80bec:	bd30      	popne	{r4, r5, pc}
   80bee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80bf2:	d105      	bne.n	80c00 <__adddf3+0x230>
   80bf4:	0040      	lsls	r0, r0, #1
   80bf6:	4149      	adcs	r1, r1
   80bf8:	bf28      	it	cs
   80bfa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80bfe:	bd30      	pop	{r4, r5, pc}
   80c00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80c04:	bf3c      	itt	cc
   80c06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80c0a:	bd30      	popcc	{r4, r5, pc}
   80c0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80c10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80c14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80c18:	f04f 0000 	mov.w	r0, #0
   80c1c:	bd30      	pop	{r4, r5, pc}
   80c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80c22:	bf1a      	itte	ne
   80c24:	4619      	movne	r1, r3
   80c26:	4610      	movne	r0, r2
   80c28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80c2c:	bf1c      	itt	ne
   80c2e:	460b      	movne	r3, r1
   80c30:	4602      	movne	r2, r0
   80c32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80c36:	bf06      	itte	eq
   80c38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80c3c:	ea91 0f03 	teqeq	r1, r3
   80c40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80c44:	bd30      	pop	{r4, r5, pc}
   80c46:	bf00      	nop

00080c48 <__aeabi_ui2d>:
   80c48:	f090 0f00 	teq	r0, #0
   80c4c:	bf04      	itt	eq
   80c4e:	2100      	moveq	r1, #0
   80c50:	4770      	bxeq	lr
   80c52:	b530      	push	{r4, r5, lr}
   80c54:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80c58:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80c5c:	f04f 0500 	mov.w	r5, #0
   80c60:	f04f 0100 	mov.w	r1, #0
   80c64:	e750      	b.n	80b08 <__adddf3+0x138>
   80c66:	bf00      	nop

00080c68 <__aeabi_i2d>:
   80c68:	f090 0f00 	teq	r0, #0
   80c6c:	bf04      	itt	eq
   80c6e:	2100      	moveq	r1, #0
   80c70:	4770      	bxeq	lr
   80c72:	b530      	push	{r4, r5, lr}
   80c74:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80c78:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80c7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80c80:	bf48      	it	mi
   80c82:	4240      	negmi	r0, r0
   80c84:	f04f 0100 	mov.w	r1, #0
   80c88:	e73e      	b.n	80b08 <__adddf3+0x138>
   80c8a:	bf00      	nop

00080c8c <__aeabi_f2d>:
   80c8c:	0042      	lsls	r2, r0, #1
   80c8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80c92:	ea4f 0131 	mov.w	r1, r1, rrx
   80c96:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80c9a:	bf1f      	itttt	ne
   80c9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80ca0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80ca4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80ca8:	4770      	bxne	lr
   80caa:	f092 0f00 	teq	r2, #0
   80cae:	bf14      	ite	ne
   80cb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80cb4:	4770      	bxeq	lr
   80cb6:	b530      	push	{r4, r5, lr}
   80cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   80cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80cc4:	e720      	b.n	80b08 <__adddf3+0x138>
   80cc6:	bf00      	nop

00080cc8 <__aeabi_ul2d>:
   80cc8:	ea50 0201 	orrs.w	r2, r0, r1
   80ccc:	bf08      	it	eq
   80cce:	4770      	bxeq	lr
   80cd0:	b530      	push	{r4, r5, lr}
   80cd2:	f04f 0500 	mov.w	r5, #0
   80cd6:	e00a      	b.n	80cee <__aeabi_l2d+0x16>

00080cd8 <__aeabi_l2d>:
   80cd8:	ea50 0201 	orrs.w	r2, r0, r1
   80cdc:	bf08      	it	eq
   80cde:	4770      	bxeq	lr
   80ce0:	b530      	push	{r4, r5, lr}
   80ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80ce6:	d502      	bpl.n	80cee <__aeabi_l2d+0x16>
   80ce8:	4240      	negs	r0, r0
   80cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80cfa:	f43f aedc 	beq.w	80ab6 <__adddf3+0xe6>
   80cfe:	f04f 0203 	mov.w	r2, #3
   80d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80d06:	bf18      	it	ne
   80d08:	3203      	addne	r2, #3
   80d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80d0e:	bf18      	it	ne
   80d10:	3203      	addne	r2, #3
   80d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80d16:	f1c2 0320 	rsb	r3, r2, #32
   80d1a:	fa00 fc03 	lsl.w	ip, r0, r3
   80d1e:	fa20 f002 	lsr.w	r0, r0, r2
   80d22:	fa01 fe03 	lsl.w	lr, r1, r3
   80d26:	ea40 000e 	orr.w	r0, r0, lr
   80d2a:	fa21 f102 	lsr.w	r1, r1, r2
   80d2e:	4414      	add	r4, r2
   80d30:	e6c1      	b.n	80ab6 <__adddf3+0xe6>
   80d32:	bf00      	nop

00080d34 <__aeabi_dmul>:
   80d34:	b570      	push	{r4, r5, r6, lr}
   80d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80d42:	bf1d      	ittte	ne
   80d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80d48:	ea94 0f0c 	teqne	r4, ip
   80d4c:	ea95 0f0c 	teqne	r5, ip
   80d50:	f000 f8de 	bleq	80f10 <__aeabi_dmul+0x1dc>
   80d54:	442c      	add	r4, r5
   80d56:	ea81 0603 	eor.w	r6, r1, r3
   80d5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80d5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80d62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80d66:	bf18      	it	ne
   80d68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80d74:	d038      	beq.n	80de8 <__aeabi_dmul+0xb4>
   80d76:	fba0 ce02 	umull	ip, lr, r0, r2
   80d7a:	f04f 0500 	mov.w	r5, #0
   80d7e:	fbe1 e502 	umlal	lr, r5, r1, r2
   80d82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80d86:	fbe0 e503 	umlal	lr, r5, r0, r3
   80d8a:	f04f 0600 	mov.w	r6, #0
   80d8e:	fbe1 5603 	umlal	r5, r6, r1, r3
   80d92:	f09c 0f00 	teq	ip, #0
   80d96:	bf18      	it	ne
   80d98:	f04e 0e01 	orrne.w	lr, lr, #1
   80d9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80da0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80da4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80da8:	d204      	bcs.n	80db4 <__aeabi_dmul+0x80>
   80daa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80dae:	416d      	adcs	r5, r5
   80db0:	eb46 0606 	adc.w	r6, r6, r6
   80db4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80db8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80dbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80dc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80dc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80dc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80dcc:	bf88      	it	hi
   80dce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80dd2:	d81e      	bhi.n	80e12 <__aeabi_dmul+0xde>
   80dd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80dd8:	bf08      	it	eq
   80dda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80dde:	f150 0000 	adcs.w	r0, r0, #0
   80de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80de6:	bd70      	pop	{r4, r5, r6, pc}
   80de8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80dec:	ea46 0101 	orr.w	r1, r6, r1
   80df0:	ea40 0002 	orr.w	r0, r0, r2
   80df4:	ea81 0103 	eor.w	r1, r1, r3
   80df8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80dfc:	bfc2      	ittt	gt
   80dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
   80e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80e06:	bd70      	popgt	{r4, r5, r6, pc}
   80e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80e0c:	f04f 0e00 	mov.w	lr, #0
   80e10:	3c01      	subs	r4, #1
   80e12:	f300 80ab 	bgt.w	80f6c <__aeabi_dmul+0x238>
   80e16:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80e1a:	bfde      	ittt	le
   80e1c:	2000      	movle	r0, #0
   80e1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80e22:	bd70      	pople	{r4, r5, r6, pc}
   80e24:	f1c4 0400 	rsb	r4, r4, #0
   80e28:	3c20      	subs	r4, #32
   80e2a:	da35      	bge.n	80e98 <__aeabi_dmul+0x164>
   80e2c:	340c      	adds	r4, #12
   80e2e:	dc1b      	bgt.n	80e68 <__aeabi_dmul+0x134>
   80e30:	f104 0414 	add.w	r4, r4, #20
   80e34:	f1c4 0520 	rsb	r5, r4, #32
   80e38:	fa00 f305 	lsl.w	r3, r0, r5
   80e3c:	fa20 f004 	lsr.w	r0, r0, r4
   80e40:	fa01 f205 	lsl.w	r2, r1, r5
   80e44:	ea40 0002 	orr.w	r0, r0, r2
   80e48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80e54:	fa21 f604 	lsr.w	r6, r1, r4
   80e58:	eb42 0106 	adc.w	r1, r2, r6
   80e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80e60:	bf08      	it	eq
   80e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80e66:	bd70      	pop	{r4, r5, r6, pc}
   80e68:	f1c4 040c 	rsb	r4, r4, #12
   80e6c:	f1c4 0520 	rsb	r5, r4, #32
   80e70:	fa00 f304 	lsl.w	r3, r0, r4
   80e74:	fa20 f005 	lsr.w	r0, r0, r5
   80e78:	fa01 f204 	lsl.w	r2, r1, r4
   80e7c:	ea40 0002 	orr.w	r0, r0, r2
   80e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80e88:	f141 0100 	adc.w	r1, r1, #0
   80e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80e90:	bf08      	it	eq
   80e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80e96:	bd70      	pop	{r4, r5, r6, pc}
   80e98:	f1c4 0520 	rsb	r5, r4, #32
   80e9c:	fa00 f205 	lsl.w	r2, r0, r5
   80ea0:	ea4e 0e02 	orr.w	lr, lr, r2
   80ea4:	fa20 f304 	lsr.w	r3, r0, r4
   80ea8:	fa01 f205 	lsl.w	r2, r1, r5
   80eac:	ea43 0302 	orr.w	r3, r3, r2
   80eb0:	fa21 f004 	lsr.w	r0, r1, r4
   80eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80eb8:	fa21 f204 	lsr.w	r2, r1, r4
   80ebc:	ea20 0002 	bic.w	r0, r0, r2
   80ec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80ec8:	bf08      	it	eq
   80eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80ece:	bd70      	pop	{r4, r5, r6, pc}
   80ed0:	f094 0f00 	teq	r4, #0
   80ed4:	d10f      	bne.n	80ef6 <__aeabi_dmul+0x1c2>
   80ed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80eda:	0040      	lsls	r0, r0, #1
   80edc:	eb41 0101 	adc.w	r1, r1, r1
   80ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80ee4:	bf08      	it	eq
   80ee6:	3c01      	subeq	r4, #1
   80ee8:	d0f7      	beq.n	80eda <__aeabi_dmul+0x1a6>
   80eea:	ea41 0106 	orr.w	r1, r1, r6
   80eee:	f095 0f00 	teq	r5, #0
   80ef2:	bf18      	it	ne
   80ef4:	4770      	bxne	lr
   80ef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80efa:	0052      	lsls	r2, r2, #1
   80efc:	eb43 0303 	adc.w	r3, r3, r3
   80f00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80f04:	bf08      	it	eq
   80f06:	3d01      	subeq	r5, #1
   80f08:	d0f7      	beq.n	80efa <__aeabi_dmul+0x1c6>
   80f0a:	ea43 0306 	orr.w	r3, r3, r6
   80f0e:	4770      	bx	lr
   80f10:	ea94 0f0c 	teq	r4, ip
   80f14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   80f18:	bf18      	it	ne
   80f1a:	ea95 0f0c 	teqne	r5, ip
   80f1e:	d00c      	beq.n	80f3a <__aeabi_dmul+0x206>
   80f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80f24:	bf18      	it	ne
   80f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80f2a:	d1d1      	bne.n	80ed0 <__aeabi_dmul+0x19c>
   80f2c:	ea81 0103 	eor.w	r1, r1, r3
   80f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f34:	f04f 0000 	mov.w	r0, #0
   80f38:	bd70      	pop	{r4, r5, r6, pc}
   80f3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80f3e:	bf06      	itte	eq
   80f40:	4610      	moveq	r0, r2
   80f42:	4619      	moveq	r1, r3
   80f44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80f48:	d019      	beq.n	80f7e <__aeabi_dmul+0x24a>
   80f4a:	ea94 0f0c 	teq	r4, ip
   80f4e:	d102      	bne.n	80f56 <__aeabi_dmul+0x222>
   80f50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   80f54:	d113      	bne.n	80f7e <__aeabi_dmul+0x24a>
   80f56:	ea95 0f0c 	teq	r5, ip
   80f5a:	d105      	bne.n	80f68 <__aeabi_dmul+0x234>
   80f5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   80f60:	bf1c      	itt	ne
   80f62:	4610      	movne	r0, r2
   80f64:	4619      	movne	r1, r3
   80f66:	d10a      	bne.n	80f7e <__aeabi_dmul+0x24a>
   80f68:	ea81 0103 	eor.w	r1, r1, r3
   80f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   80f74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80f78:	f04f 0000 	mov.w	r0, #0
   80f7c:	bd70      	pop	{r4, r5, r6, pc}
   80f7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   80f82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   80f86:	bd70      	pop	{r4, r5, r6, pc}

00080f88 <__aeabi_ddiv>:
   80f88:	b570      	push	{r4, r5, r6, lr}
   80f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80f96:	bf1d      	ittte	ne
   80f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80f9c:	ea94 0f0c 	teqne	r4, ip
   80fa0:	ea95 0f0c 	teqne	r5, ip
   80fa4:	f000 f8a7 	bleq	810f6 <__aeabi_ddiv+0x16e>
   80fa8:	eba4 0405 	sub.w	r4, r4, r5
   80fac:	ea81 0e03 	eor.w	lr, r1, r3
   80fb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   80fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80fb8:	f000 8088 	beq.w	810cc <__aeabi_ddiv+0x144>
   80fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80fc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   80fc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   80fc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   80fcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   80fd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   80fd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   80fd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   80fdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   80fe0:	429d      	cmp	r5, r3
   80fe2:	bf08      	it	eq
   80fe4:	4296      	cmpeq	r6, r2
   80fe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   80fea:	f504 7440 	add.w	r4, r4, #768	; 0x300
   80fee:	d202      	bcs.n	80ff6 <__aeabi_ddiv+0x6e>
   80ff0:	085b      	lsrs	r3, r3, #1
   80ff2:	ea4f 0232 	mov.w	r2, r2, rrx
   80ff6:	1ab6      	subs	r6, r6, r2
   80ff8:	eb65 0503 	sbc.w	r5, r5, r3
   80ffc:	085b      	lsrs	r3, r3, #1
   80ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   81002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8100a:	ebb6 0e02 	subs.w	lr, r6, r2
   8100e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81012:	bf22      	ittt	cs
   81014:	1ab6      	subcs	r6, r6, r2
   81016:	4675      	movcs	r5, lr
   81018:	ea40 000c 	orrcs.w	r0, r0, ip
   8101c:	085b      	lsrs	r3, r3, #1
   8101e:	ea4f 0232 	mov.w	r2, r2, rrx
   81022:	ebb6 0e02 	subs.w	lr, r6, r2
   81026:	eb75 0e03 	sbcs.w	lr, r5, r3
   8102a:	bf22      	ittt	cs
   8102c:	1ab6      	subcs	r6, r6, r2
   8102e:	4675      	movcs	r5, lr
   81030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81034:	085b      	lsrs	r3, r3, #1
   81036:	ea4f 0232 	mov.w	r2, r2, rrx
   8103a:	ebb6 0e02 	subs.w	lr, r6, r2
   8103e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81042:	bf22      	ittt	cs
   81044:	1ab6      	subcs	r6, r6, r2
   81046:	4675      	movcs	r5, lr
   81048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8104c:	085b      	lsrs	r3, r3, #1
   8104e:	ea4f 0232 	mov.w	r2, r2, rrx
   81052:	ebb6 0e02 	subs.w	lr, r6, r2
   81056:	eb75 0e03 	sbcs.w	lr, r5, r3
   8105a:	bf22      	ittt	cs
   8105c:	1ab6      	subcs	r6, r6, r2
   8105e:	4675      	movcs	r5, lr
   81060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81064:	ea55 0e06 	orrs.w	lr, r5, r6
   81068:	d018      	beq.n	8109c <__aeabi_ddiv+0x114>
   8106a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8106e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81072:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8107a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8107e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81086:	d1c0      	bne.n	8100a <__aeabi_ddiv+0x82>
   81088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8108c:	d10b      	bne.n	810a6 <__aeabi_ddiv+0x11e>
   8108e:	ea41 0100 	orr.w	r1, r1, r0
   81092:	f04f 0000 	mov.w	r0, #0
   81096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8109a:	e7b6      	b.n	8100a <__aeabi_ddiv+0x82>
   8109c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   810a0:	bf04      	itt	eq
   810a2:	4301      	orreq	r1, r0
   810a4:	2000      	moveq	r0, #0
   810a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   810aa:	bf88      	it	hi
   810ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   810b0:	f63f aeaf 	bhi.w	80e12 <__aeabi_dmul+0xde>
   810b4:	ebb5 0c03 	subs.w	ip, r5, r3
   810b8:	bf04      	itt	eq
   810ba:	ebb6 0c02 	subseq.w	ip, r6, r2
   810be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   810c2:	f150 0000 	adcs.w	r0, r0, #0
   810c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   810ca:	bd70      	pop	{r4, r5, r6, pc}
   810cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   810d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   810d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   810d8:	bfc2      	ittt	gt
   810da:	ebd4 050c 	rsbsgt	r5, r4, ip
   810de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   810e2:	bd70      	popgt	{r4, r5, r6, pc}
   810e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   810e8:	f04f 0e00 	mov.w	lr, #0
   810ec:	3c01      	subs	r4, #1
   810ee:	e690      	b.n	80e12 <__aeabi_dmul+0xde>
   810f0:	ea45 0e06 	orr.w	lr, r5, r6
   810f4:	e68d      	b.n	80e12 <__aeabi_dmul+0xde>
   810f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   810fa:	ea94 0f0c 	teq	r4, ip
   810fe:	bf08      	it	eq
   81100:	ea95 0f0c 	teqeq	r5, ip
   81104:	f43f af3b 	beq.w	80f7e <__aeabi_dmul+0x24a>
   81108:	ea94 0f0c 	teq	r4, ip
   8110c:	d10a      	bne.n	81124 <__aeabi_ddiv+0x19c>
   8110e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81112:	f47f af34 	bne.w	80f7e <__aeabi_dmul+0x24a>
   81116:	ea95 0f0c 	teq	r5, ip
   8111a:	f47f af25 	bne.w	80f68 <__aeabi_dmul+0x234>
   8111e:	4610      	mov	r0, r2
   81120:	4619      	mov	r1, r3
   81122:	e72c      	b.n	80f7e <__aeabi_dmul+0x24a>
   81124:	ea95 0f0c 	teq	r5, ip
   81128:	d106      	bne.n	81138 <__aeabi_ddiv+0x1b0>
   8112a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8112e:	f43f aefd 	beq.w	80f2c <__aeabi_dmul+0x1f8>
   81132:	4610      	mov	r0, r2
   81134:	4619      	mov	r1, r3
   81136:	e722      	b.n	80f7e <__aeabi_dmul+0x24a>
   81138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8113c:	bf18      	it	ne
   8113e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81142:	f47f aec5 	bne.w	80ed0 <__aeabi_dmul+0x19c>
   81146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8114a:	f47f af0d 	bne.w	80f68 <__aeabi_dmul+0x234>
   8114e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81152:	f47f aeeb 	bne.w	80f2c <__aeabi_dmul+0x1f8>
   81156:	e712      	b.n	80f7e <__aeabi_dmul+0x24a>

00081158 <__gedf2>:
   81158:	f04f 3cff 	mov.w	ip, #4294967295
   8115c:	e006      	b.n	8116c <__cmpdf2+0x4>
   8115e:	bf00      	nop

00081160 <__ledf2>:
   81160:	f04f 0c01 	mov.w	ip, #1
   81164:	e002      	b.n	8116c <__cmpdf2+0x4>
   81166:	bf00      	nop

00081168 <__cmpdf2>:
   81168:	f04f 0c01 	mov.w	ip, #1
   8116c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81170:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81174:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81178:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8117c:	bf18      	it	ne
   8117e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81182:	d01b      	beq.n	811bc <__cmpdf2+0x54>
   81184:	b001      	add	sp, #4
   81186:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8118a:	bf0c      	ite	eq
   8118c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81190:	ea91 0f03 	teqne	r1, r3
   81194:	bf02      	ittt	eq
   81196:	ea90 0f02 	teqeq	r0, r2
   8119a:	2000      	moveq	r0, #0
   8119c:	4770      	bxeq	lr
   8119e:	f110 0f00 	cmn.w	r0, #0
   811a2:	ea91 0f03 	teq	r1, r3
   811a6:	bf58      	it	pl
   811a8:	4299      	cmppl	r1, r3
   811aa:	bf08      	it	eq
   811ac:	4290      	cmpeq	r0, r2
   811ae:	bf2c      	ite	cs
   811b0:	17d8      	asrcs	r0, r3, #31
   811b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   811b6:	f040 0001 	orr.w	r0, r0, #1
   811ba:	4770      	bx	lr
   811bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   811c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   811c4:	d102      	bne.n	811cc <__cmpdf2+0x64>
   811c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   811ca:	d107      	bne.n	811dc <__cmpdf2+0x74>
   811cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   811d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   811d4:	d1d6      	bne.n	81184 <__cmpdf2+0x1c>
   811d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   811da:	d0d3      	beq.n	81184 <__cmpdf2+0x1c>
   811dc:	f85d 0b04 	ldr.w	r0, [sp], #4
   811e0:	4770      	bx	lr
   811e2:	bf00      	nop

000811e4 <__aeabi_cdrcmple>:
   811e4:	4684      	mov	ip, r0
   811e6:	4610      	mov	r0, r2
   811e8:	4662      	mov	r2, ip
   811ea:	468c      	mov	ip, r1
   811ec:	4619      	mov	r1, r3
   811ee:	4663      	mov	r3, ip
   811f0:	e000      	b.n	811f4 <__aeabi_cdcmpeq>
   811f2:	bf00      	nop

000811f4 <__aeabi_cdcmpeq>:
   811f4:	b501      	push	{r0, lr}
   811f6:	f7ff ffb7 	bl	81168 <__cmpdf2>
   811fa:	2800      	cmp	r0, #0
   811fc:	bf48      	it	mi
   811fe:	f110 0f00 	cmnmi.w	r0, #0
   81202:	bd01      	pop	{r0, pc}

00081204 <__aeabi_dcmpeq>:
   81204:	f84d ed08 	str.w	lr, [sp, #-8]!
   81208:	f7ff fff4 	bl	811f4 <__aeabi_cdcmpeq>
   8120c:	bf0c      	ite	eq
   8120e:	2001      	moveq	r0, #1
   81210:	2000      	movne	r0, #0
   81212:	f85d fb08 	ldr.w	pc, [sp], #8
   81216:	bf00      	nop

00081218 <__aeabi_dcmplt>:
   81218:	f84d ed08 	str.w	lr, [sp, #-8]!
   8121c:	f7ff ffea 	bl	811f4 <__aeabi_cdcmpeq>
   81220:	bf34      	ite	cc
   81222:	2001      	movcc	r0, #1
   81224:	2000      	movcs	r0, #0
   81226:	f85d fb08 	ldr.w	pc, [sp], #8
   8122a:	bf00      	nop

0008122c <__aeabi_dcmple>:
   8122c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81230:	f7ff ffe0 	bl	811f4 <__aeabi_cdcmpeq>
   81234:	bf94      	ite	ls
   81236:	2001      	movls	r0, #1
   81238:	2000      	movhi	r0, #0
   8123a:	f85d fb08 	ldr.w	pc, [sp], #8
   8123e:	bf00      	nop

00081240 <__aeabi_dcmpge>:
   81240:	f84d ed08 	str.w	lr, [sp, #-8]!
   81244:	f7ff ffce 	bl	811e4 <__aeabi_cdrcmple>
   81248:	bf94      	ite	ls
   8124a:	2001      	movls	r0, #1
   8124c:	2000      	movhi	r0, #0
   8124e:	f85d fb08 	ldr.w	pc, [sp], #8
   81252:	bf00      	nop

00081254 <__aeabi_dcmpgt>:
   81254:	f84d ed08 	str.w	lr, [sp, #-8]!
   81258:	f7ff ffc4 	bl	811e4 <__aeabi_cdrcmple>
   8125c:	bf34      	ite	cc
   8125e:	2001      	movcc	r0, #1
   81260:	2000      	movcs	r0, #0
   81262:	f85d fb08 	ldr.w	pc, [sp], #8
   81266:	bf00      	nop

00081268 <__aeabi_d2uiz>:
   81268:	004a      	lsls	r2, r1, #1
   8126a:	d211      	bcs.n	81290 <__aeabi_d2uiz+0x28>
   8126c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81270:	d211      	bcs.n	81296 <__aeabi_d2uiz+0x2e>
   81272:	d50d      	bpl.n	81290 <__aeabi_d2uiz+0x28>
   81274:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81278:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8127c:	d40e      	bmi.n	8129c <__aeabi_d2uiz+0x34>
   8127e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81286:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8128a:	fa23 f002 	lsr.w	r0, r3, r2
   8128e:	4770      	bx	lr
   81290:	f04f 0000 	mov.w	r0, #0
   81294:	4770      	bx	lr
   81296:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8129a:	d102      	bne.n	812a2 <__aeabi_d2uiz+0x3a>
   8129c:	f04f 30ff 	mov.w	r0, #4294967295
   812a0:	4770      	bx	lr
   812a2:	f04f 0000 	mov.w	r0, #0
   812a6:	4770      	bx	lr

000812a8 <__libc_init_array>:
   812a8:	b570      	push	{r4, r5, r6, lr}
   812aa:	4e0f      	ldr	r6, [pc, #60]	; (812e8 <__libc_init_array+0x40>)
   812ac:	4d0f      	ldr	r5, [pc, #60]	; (812ec <__libc_init_array+0x44>)
   812ae:	1b76      	subs	r6, r6, r5
   812b0:	10b6      	asrs	r6, r6, #2
   812b2:	bf18      	it	ne
   812b4:	2400      	movne	r4, #0
   812b6:	d005      	beq.n	812c4 <__libc_init_array+0x1c>
   812b8:	3401      	adds	r4, #1
   812ba:	f855 3b04 	ldr.w	r3, [r5], #4
   812be:	4798      	blx	r3
   812c0:	42a6      	cmp	r6, r4
   812c2:	d1f9      	bne.n	812b8 <__libc_init_array+0x10>
   812c4:	4e0a      	ldr	r6, [pc, #40]	; (812f0 <__libc_init_array+0x48>)
   812c6:	4d0b      	ldr	r5, [pc, #44]	; (812f4 <__libc_init_array+0x4c>)
   812c8:	f000 f8de 	bl	81488 <_init>
   812cc:	1b76      	subs	r6, r6, r5
   812ce:	10b6      	asrs	r6, r6, #2
   812d0:	bf18      	it	ne
   812d2:	2400      	movne	r4, #0
   812d4:	d006      	beq.n	812e4 <__libc_init_array+0x3c>
   812d6:	3401      	adds	r4, #1
   812d8:	f855 3b04 	ldr.w	r3, [r5], #4
   812dc:	4798      	blx	r3
   812de:	42a6      	cmp	r6, r4
   812e0:	d1f9      	bne.n	812d6 <__libc_init_array+0x2e>
   812e2:	bd70      	pop	{r4, r5, r6, pc}
   812e4:	bd70      	pop	{r4, r5, r6, pc}
   812e6:	bf00      	nop
   812e8:	00081494 	.word	0x00081494
   812ec:	00081494 	.word	0x00081494
   812f0:	0008149c 	.word	0x0008149c
   812f4:	00081494 	.word	0x00081494

000812f8 <register_fini>:
   812f8:	4b02      	ldr	r3, [pc, #8]	; (81304 <register_fini+0xc>)
   812fa:	b113      	cbz	r3, 81302 <register_fini+0xa>
   812fc:	4802      	ldr	r0, [pc, #8]	; (81308 <register_fini+0x10>)
   812fe:	f000 b805 	b.w	8130c <atexit>
   81302:	4770      	bx	lr
   81304:	00000000 	.word	0x00000000
   81308:	00081319 	.word	0x00081319

0008130c <atexit>:
   8130c:	2300      	movs	r3, #0
   8130e:	4601      	mov	r1, r0
   81310:	461a      	mov	r2, r3
   81312:	4618      	mov	r0, r3
   81314:	f000 b81e 	b.w	81354 <__register_exitproc>

00081318 <__libc_fini_array>:
   81318:	b538      	push	{r3, r4, r5, lr}
   8131a:	4c0a      	ldr	r4, [pc, #40]	; (81344 <__libc_fini_array+0x2c>)
   8131c:	4d0a      	ldr	r5, [pc, #40]	; (81348 <__libc_fini_array+0x30>)
   8131e:	1b64      	subs	r4, r4, r5
   81320:	10a4      	asrs	r4, r4, #2
   81322:	d00a      	beq.n	8133a <__libc_fini_array+0x22>
   81324:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81328:	3b01      	subs	r3, #1
   8132a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8132e:	3c01      	subs	r4, #1
   81330:	f855 3904 	ldr.w	r3, [r5], #-4
   81334:	4798      	blx	r3
   81336:	2c00      	cmp	r4, #0
   81338:	d1f9      	bne.n	8132e <__libc_fini_array+0x16>
   8133a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8133e:	f000 b8ad 	b.w	8149c <_fini>
   81342:	bf00      	nop
   81344:	000814ac 	.word	0x000814ac
   81348:	000814a8 	.word	0x000814a8

0008134c <__retarget_lock_acquire_recursive>:
   8134c:	4770      	bx	lr
   8134e:	bf00      	nop

00081350 <__retarget_lock_release_recursive>:
   81350:	4770      	bx	lr
   81352:	bf00      	nop

00081354 <__register_exitproc>:
   81354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81358:	4d2c      	ldr	r5, [pc, #176]	; (8140c <__register_exitproc+0xb8>)
   8135a:	4606      	mov	r6, r0
   8135c:	6828      	ldr	r0, [r5, #0]
   8135e:	4698      	mov	r8, r3
   81360:	460f      	mov	r7, r1
   81362:	4691      	mov	r9, r2
   81364:	f7ff fff2 	bl	8134c <__retarget_lock_acquire_recursive>
   81368:	4b29      	ldr	r3, [pc, #164]	; (81410 <__register_exitproc+0xbc>)
   8136a:	681c      	ldr	r4, [r3, #0]
   8136c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81370:	2b00      	cmp	r3, #0
   81372:	d03e      	beq.n	813f2 <__register_exitproc+0x9e>
   81374:	685a      	ldr	r2, [r3, #4]
   81376:	2a1f      	cmp	r2, #31
   81378:	dc1c      	bgt.n	813b4 <__register_exitproc+0x60>
   8137a:	f102 0e01 	add.w	lr, r2, #1
   8137e:	b176      	cbz	r6, 8139e <__register_exitproc+0x4a>
   81380:	2101      	movs	r1, #1
   81382:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81386:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8138a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8138e:	4091      	lsls	r1, r2
   81390:	4308      	orrs	r0, r1
   81392:	2e02      	cmp	r6, #2
   81394:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81398:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8139c:	d023      	beq.n	813e6 <__register_exitproc+0x92>
   8139e:	3202      	adds	r2, #2
   813a0:	f8c3 e004 	str.w	lr, [r3, #4]
   813a4:	6828      	ldr	r0, [r5, #0]
   813a6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   813aa:	f7ff ffd1 	bl	81350 <__retarget_lock_release_recursive>
   813ae:	2000      	movs	r0, #0
   813b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813b4:	4b17      	ldr	r3, [pc, #92]	; (81414 <__register_exitproc+0xc0>)
   813b6:	b30b      	cbz	r3, 813fc <__register_exitproc+0xa8>
   813b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   813bc:	f3af 8000 	nop.w
   813c0:	4603      	mov	r3, r0
   813c2:	b1d8      	cbz	r0, 813fc <__register_exitproc+0xa8>
   813c4:	2000      	movs	r0, #0
   813c6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   813ca:	f04f 0e01 	mov.w	lr, #1
   813ce:	6058      	str	r0, [r3, #4]
   813d0:	6019      	str	r1, [r3, #0]
   813d2:	4602      	mov	r2, r0
   813d4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   813dc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   813e0:	2e00      	cmp	r6, #0
   813e2:	d0dc      	beq.n	8139e <__register_exitproc+0x4a>
   813e4:	e7cc      	b.n	81380 <__register_exitproc+0x2c>
   813e6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   813ea:	4301      	orrs	r1, r0
   813ec:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   813f0:	e7d5      	b.n	8139e <__register_exitproc+0x4a>
   813f2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   813f6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   813fa:	e7bb      	b.n	81374 <__register_exitproc+0x20>
   813fc:	6828      	ldr	r0, [r5, #0]
   813fe:	f7ff ffa7 	bl	81350 <__retarget_lock_release_recursive>
   81402:	f04f 30ff 	mov.w	r0, #4294967295
   81406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8140a:	bf00      	nop
   8140c:	20000430 	.word	0x20000430
   81410:	00081484 	.word	0x00081484
   81414:	00000000 	.word	0x00000000
   81418:	304e4143 	.word	0x304e4143
   8141c:	73656d20 	.word	0x73656d20
   81420:	65676173 	.word	0x65676173
   81424:	72726120 	.word	0x72726120
   81428:	64657669 	.word	0x64657669
   8142c:	206e6920 	.word	0x206e6920
   81430:	2d6e6f6e 	.word	0x2d6e6f6e
   81434:	64657375 	.word	0x64657375
   81438:	69616d20 	.word	0x69616d20
   8143c:	786f626c 	.word	0x786f626c
   81440:	00000d0a 	.word	0x00000d0a
   81444:	00207525 	.word	0x00207525
   81448:	00000d0d 	.word	0x00000d0d
   8144c:	65746e45 	.word	0x65746e45
   81450:	676e6972 	.word	0x676e6972
   81454:	6f6f6c20 	.word	0x6f6f6c20
   81458:	00000070 	.word	0x00000070
   8145c:	6c756e28 	.word	0x6c756e28
   81460:	0000296c 	.word	0x0000296c
   81464:	3a525245 	.word	0x3a525245
   81468:	52415520 	.word	0x52415520
   8146c:	58522054 	.word	0x58522054
   81470:	66756220 	.word	0x66756220
   81474:	20726566 	.word	0x20726566
   81478:	66207369 	.word	0x66207369
   8147c:	0a6c6c75 	.word	0x0a6c6c75
   81480:	0000000d 	.word	0x0000000d

00081484 <_global_impure_ptr>:
   81484:	20000008                                ... 

00081488 <_init>:
   81488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8148a:	bf00      	nop
   8148c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8148e:	bc08      	pop	{r3}
   81490:	469e      	mov	lr, r3
   81492:	4770      	bx	lr

00081494 <__init_array_start>:
   81494:	000812f9 	.word	0x000812f9

00081498 <__frame_dummy_init_array_entry>:
   81498:	00080119                                ....

0008149c <_fini>:
   8149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8149e:	bf00      	nop
   814a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   814a2:	bc08      	pop	{r3}
   814a4:	469e      	mov	lr, r3
   814a6:	4770      	bx	lr

000814a8 <__fini_array_start>:
   814a8:	000800f5 	.word	0x000800f5
