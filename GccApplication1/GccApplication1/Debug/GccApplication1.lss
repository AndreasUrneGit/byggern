
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800100  00001908  0000199c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001908  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  008001ea  008001ea  00001a86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024f5  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000116d  00000000  00000000  00004255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001368  00000000  00000000  000053c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000500  00000000  00000000  0000672c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086e  00000000  00000000  00006c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000102e  00000000  00000000  0000749a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_3>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e8 e0       	ldi	r30, 0x08	; 8
     6d4:	f9 e1       	ldi	r31, 0x19	; 25
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	aa 3e       	cpi	r26, 0xEA	; 234
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	aa ee       	ldi	r26, 0xEA	; 234
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	a9 3f       	cpi	r26, 0xF9	; 249
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <main>
     6f6:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(){

	set_bit(TCCR3A, COM3A0);
     6fe:	eb e8       	ldi	r30, 0x8B	; 139
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	80 64       	ori	r24, 0x40	; 64
     706:	80 83       	st	Z, r24
	set_bit(TCCR3B, CS00);
     708:	ea e8       	ldi	r30, 0x8A	; 138
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 83       	st	Z, r24
	set_bit(TCCR3B, WGM12);
     712:	80 81       	ld	r24, Z
     714:	88 60       	ori	r24, 0x08	; 8
     716:	80 83       	st	Z, r24
	set_bit(DDRD, PD4);
     718:	81 b3       	in	r24, 0x11	; 17
     71a:	80 61       	ori	r24, 0x10	; 16
     71c:	81 bb       	out	0x11, r24	; 17
     71e:	08 95       	ret

00000720 <USART_transmit>:
}

void USART_transmit(unsigned char data){
	// wait for empty transmit buffer

	loop_until_bit_is_set(UCSR0A, UDRE0);
     720:	5d 9b       	sbis	0x0b, 5	; 11
     722:	fe cf       	rjmp	.-4      	; 0x720 <USART_transmit>
	//put data into buffer, sends the data
	UDR0 = data;
     724:	8c b9       	out	0x0c, r24	; 12
     726:	08 95       	ret

00000728 <USART_receive>:
}
unsigned char USART_receive( void ){
	// Wait for data to be received

	loop_until_bit_is_set(UCSR0A, RXC0);
     728:	5f 9b       	sbis	0x0b, 7	; 11
     72a:	fe cf       	rjmp	.-4      	; 0x728 <USART_receive>
	// Get and return received data from buffer
	return UDR0;
     72c:	8c b1       	in	r24, 0x0c	; 12
     72e:	08 95       	ret

00000730 <USART_init>:
 */ 
#include "ATmega162_programdriver.h"

void USART_init(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     730:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     732:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     734:	88 e1       	ldi	r24, 0x18	; 24
     736:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)| (1 << USBS0) |(3<<UCSZ00);
     738:	8e e8       	ldi	r24, 0x8E	; 142
     73a:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit, USART_receive);
     73c:	64 e9       	ldi	r22, 0x94	; 148
     73e:	73 e0       	ldi	r23, 0x03	; 3
     740:	80 e9       	ldi	r24, 0x90	; 144
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	0e 94 b2 07 	call	0xf64	; 0xf64 <fdevopen>
     748:	08 95       	ret

0000074a <CAN_Read>:
	}
	else{
		printf("\n\rInvalid CAN request to send");
	}
	
	CAN_disable_SPI;
     74a:	cf 93       	push	r28
     74c:	c8 2f       	mov	r28, r24
     74e:	88 b3       	in	r24, 0x18	; 24
     750:	8f 7e       	andi	r24, 0xEF	; 239
     752:	88 bb       	out	0x18, r24	; 24
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
     75a:	8c 2f       	mov	r24, r28
     75c:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
     760:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_Read>
     764:	98 b3       	in	r25, 0x18	; 24
     766:	90 61       	ori	r25, 0x10	; 16
     768:	98 bb       	out	0x18, r25	; 24
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <CAN_Write>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	d8 2f       	mov	r29, r24
     774:	c6 2f       	mov	r28, r22
     776:	88 b3       	in	r24, 0x18	; 24
     778:	8f 7e       	andi	r24, 0xEF	; 239
     77a:	88 bb       	out	0x18, r24	; 24
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
     782:	8d 2f       	mov	r24, r29
     784:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
     78e:	88 b3       	in	r24, 0x18	; 24
     790:	80 61       	ori	r24, 0x10	; 16
     792:	88 bb       	out	0x18, r24	; 24
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	08 95       	ret

0000079a <CAN_ReadStatus>:
}

uint8_t CAN_ReadStatus(){
     79a:	cf 93       	push	r28
	CAN_enable_SPI;
     79c:	88 b3       	in	r24, 0x18	; 24
     79e:	8f 7e       	andi	r24, 0xEF	; 239
     7a0:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_READ_STATUS);
     7a2:	80 ea       	ldi	r24, 0xA0	; 160
     7a4:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	uint8_t r_status = SPI_Read();
     7a8:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_Read>
     7ac:	c8 2f       	mov	r28, r24
	printf("The status is %u\n\r", r_status);
     7ae:	1f 92       	push	r1
     7b0:	8f 93       	push	r24
     7b2:	8e e2       	ldi	r24, 0x2E	; 46
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	0e 94 fd 07 	call	0xffa	; 0xffa <printf>
	CAN_disable_SPI;
     7be:	88 b3       	in	r24, 0x18	; 24
     7c0:	80 61       	ori	r24, 0x10	; 16
     7c2:	88 bb       	out	0x18, r24	; 24
	return r_status;
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
}
     7cc:	8c 2f       	mov	r24, r28
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <CAN_BitModify>:

void CAN_BitModify(uint8_t address_byte, uint8_t mask_byte, uint8_t data_byte){
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	18 2f       	mov	r17, r24
     7da:	d6 2f       	mov	r29, r22
     7dc:	c4 2f       	mov	r28, r20
	CAN_enable_SPI;
     7de:	88 b3       	in	r24, 0x18	; 24
     7e0:	8f 7e       	andi	r24, 0xEF	; 239
     7e2:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
     7e4:	85 e0       	ldi	r24, 0x05	; 5
     7e6:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	SPI_MasterTransmit(address_byte);
     7ea:	81 2f       	mov	r24, r17
     7ec:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask_byte);
     7f0:	8d 2f       	mov	r24, r29
     7f2:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	SPI_MasterTransmit(data_byte);
     7f6:	8c 2f       	mov	r24, r28
     7f8:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	
	CAN_disable_SPI;
     7fc:	88 b3       	in	r24, 0x18	; 24
     7fe:	80 61       	ori	r24, 0x10	; 16
     800:	88 bb       	out	0x18, r24	; 24
}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	08 95       	ret

0000080a <CAN_Reset>:

void CAN_Reset(){
	CAN_enable_SPI;
     80a:	88 b3       	in	r24, 0x18	; 24
     80c:	8f 7e       	andi	r24, 0xEF	; 239
     80e:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_RESET);
     810:	80 ec       	ldi	r24, 0xC0	; 192
     812:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	
	CAN_disable_SPI;
     816:	88 b3       	in	r24, 0x18	; 24
     818:	80 61       	ori	r24, 0x10	; 16
     81a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     81c:	83 ec       	ldi	r24, 0xC3	; 195
     81e:	99 e0       	ldi	r25, 0x09	; 9
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	f1 f7       	brne	.-4      	; 0x820 <CAN_Reset+0x16>
     824:	00 c0       	rjmp	.+0      	; 0x826 <CAN_Reset+0x1c>
     826:	00 00       	nop
     828:	08 95       	ret

0000082a <CAN_Init>:


void CAN_Init(){
	uint8_t val = 2;
	
	SPI_init();
     82a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SPI_init>
	CAN_Reset();
     82e:	0e 94 05 04 	call	0x80a	; 0x80a <CAN_Reset>
	
	val = CAN_ReadStatus();
     832:	0e 94 cd 03 	call	0x79a	; 0x79a <CAN_ReadStatus>
	/*
	if(val != MODE_CONFIG){
		printf("MCP2515 is not in Config mode! Its config bits are %2d\n", val);
	}*/
	//loopback mode
	CAN_BitModify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
     836:	40 e4       	ldi	r20, 0x40	; 64
     838:	60 ee       	ldi	r22, 0xE0	; 224
     83a:	8f e0       	ldi	r24, 0x0F	; 15
     83c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <CAN_BitModify>
     840:	08 95       	ret

00000842 <CAN_Transmit>:
	CAN_disable_SPI;
	
	_delay_ms(10);
}

void CAN_Transmit(CAN_msg msg){
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	2b 97       	sbiw	r28, 0x0b	; 11
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
     85e:	e9 82       	std	Y+1, r14	; 0x01
     860:	fa 82       	std	Y+2, r15	; 0x02
     862:	0b 83       	std	Y+3, r16	; 0x03
     864:	1c 83       	std	Y+4, r17	; 0x04
     866:	2d 83       	std	Y+5, r18	; 0x05
     868:	3e 83       	std	Y+6, r19	; 0x06
     86a:	4f 83       	std	Y+7, r20	; 0x07
     86c:	58 87       	std	Y+8, r21	; 0x08
     86e:	69 87       	std	Y+9, r22	; 0x09
     870:	7a 87       	std	Y+10, r23	; 0x0a
     872:	8b 87       	std	Y+11, r24	; 0x0b
	CAN_enable_SPI;
     874:	88 b3       	in	r24, 0x18	; 24
     876:	8f 7e       	andi	r24, 0xEF	; 239
     878:	88 bb       	out	0x18, r24	; 24
	
	unsigned int id = msg.id;
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	9a 81       	ldd	r25, Y+2	; 0x02
	uint8_t id_high = id >> 3;
     87e:	bc 01       	movw	r22, r24
     880:	76 95       	lsr	r23
     882:	67 95       	ror	r22
     884:	76 95       	lsr	r23
     886:	67 95       	ror	r22
     888:	76 95       	lsr	r23
     88a:	67 95       	ror	r22
	uint8_t id_low = id << 5;
     88c:	18 2f       	mov	r17, r24
     88e:	12 95       	swap	r17
     890:	11 0f       	add	r17, r17
     892:	10 7e       	andi	r17, 0xE0	; 224
	
	CAN_Write(MCP_TXB0SIDH, id_high);
     894:	81 e3       	ldi	r24, 0x31	; 49
     896:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_Write>
	CAN_Write(MCP_TXB0SIDL, id_low);
     89a:	61 2f       	mov	r22, r17
     89c:	82 e3       	ldi	r24, 0x32	; 50
     89e:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_Write>
	CAN_Write(MCP_TXB0DLC, msg.length);
     8a2:	fb 80       	ldd	r15, Y+3	; 0x03
     8a4:	6f 2d       	mov	r22, r15
     8a6:	85 e3       	ldi	r24, 0x35	; 53
     8a8:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_Write>
	
	for(int x = 0; x < msg.length; x++){
     8ac:	00 e0       	ldi	r16, 0x00	; 0
     8ae:	10 e0       	ldi	r17, 0x00	; 0
     8b0:	0d c0       	rjmp	.+26     	; 0x8cc <CAN_Transmit+0x8a>
		CAN_Write(MCP_TXB0Dm + x, msg.data[x]);
     8b2:	e4 e0       	ldi	r30, 0x04	; 4
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	ec 0f       	add	r30, r28
     8b8:	fd 1f       	adc	r31, r29
     8ba:	e0 0f       	add	r30, r16
     8bc:	f1 1f       	adc	r31, r17
     8be:	60 81       	ld	r22, Z
     8c0:	86 e3       	ldi	r24, 0x36	; 54
     8c2:	80 0f       	add	r24, r16
     8c4:	0e 94 b7 03 	call	0x76e	; 0x76e <CAN_Write>
	
	CAN_Write(MCP_TXB0SIDH, id_high);
	CAN_Write(MCP_TXB0SIDL, id_low);
	CAN_Write(MCP_TXB0DLC, msg.length);
	
	for(int x = 0; x < msg.length; x++){
     8c8:	0f 5f       	subi	r16, 0xFF	; 255
     8ca:	1f 4f       	sbci	r17, 0xFF	; 255
     8cc:	8f 2d       	mov	r24, r15
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	08 17       	cp	r16, r24
     8d2:	19 07       	cpc	r17, r25
     8d4:	74 f3       	brlt	.-36     	; 0x8b2 <CAN_Transmit+0x70>
		CAN_Write(MCP_TXB0Dm + x, msg.data[x]);
	}
	
	SPI_MasterTransmit(MCP_RTS_TX0);
     8d6:	81 e8       	ldi	r24, 0x81	; 129
     8d8:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	
	CAN_BitModify(30, 0b1000, 0b1000);
     8dc:	48 e0       	ldi	r20, 0x08	; 8
     8de:	68 e0       	ldi	r22, 0x08	; 8
     8e0:	8e e1       	ldi	r24, 0x1E	; 30
     8e2:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <CAN_BitModify>
	
	CAN_disable_SPI;
     8e6:	88 b3       	in	r24, 0x18	; 24
     8e8:	80 61       	ori	r24, 0x10	; 16
     8ea:	88 bb       	out	0x18, r24	; 24
}
     8ec:	2b 96       	adiw	r28, 0x0b	; 11
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <CAN_Receive>:

CAN_msg CAN_Receive(){
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	8c 01       	movw	r16, r24
	CAN_enable_SPI;
     912:	88 b3       	in	r24, 0x18	; 24
     914:	8f 7e       	andi	r24, 0xEF	; 239
     916:	88 bb       	out	0x18, r24	; 24
	
	CAN_msg received_message;
	
	uint8_t id_high = CAN_Read(MCP_RXB0SIDH);
     918:	81 e6       	ldi	r24, 0x61	; 97
     91a:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_Read>
     91e:	c8 2f       	mov	r28, r24
	uint8_t id_low = CAN_Read(MCP_RXB0SIDL);
     920:	82 e6       	ldi	r24, 0x62	; 98
     922:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_Read>
	
	received_message.id = (id_high << 8) | id_low;
     926:	2c 2f       	mov	r18, r28
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	32 2f       	mov	r19, r18
     92c:	22 27       	eor	r18, r18
     92e:	28 2b       	or	r18, r24
     930:	f8 01       	movw	r30, r16
     932:	31 83       	std	Z+1, r19	; 0x01
     934:	20 83       	st	Z, r18
	
	uint8_t length = CAN_Read(MCP_RXB0DLC);
     936:	85 e6       	ldi	r24, 0x65	; 101
     938:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_Read>
     93c:	f8 2e       	mov	r15, r24
	
	received_message.length = (length & 0b1111);
     93e:	8f 70       	andi	r24, 0x0F	; 15
     940:	f8 01       	movw	r30, r16
     942:	82 83       	std	Z+2, r24	; 0x02
	
	for(int x = 0; x < length; x++){
     944:	c0 e0       	ldi	r28, 0x00	; 0
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	09 c0       	rjmp	.+18     	; 0x95c <CAN_Receive+0x56>
		received_message.data[x] = CAN_Read(MCP_RXB0Dm + x);
     94a:	8c 2f       	mov	r24, r28
     94c:	8a 59       	subi	r24, 0x9A	; 154
     94e:	0e 94 a5 03 	call	0x74a	; 0x74a <CAN_Read>
     952:	f8 01       	movw	r30, r16
     954:	ec 0f       	add	r30, r28
     956:	fd 1f       	adc	r31, r29
     958:	83 83       	std	Z+3, r24	; 0x03
	
	uint8_t length = CAN_Read(MCP_RXB0DLC);
	
	received_message.length = (length & 0b1111);
	
	for(int x = 0; x < length; x++){
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	8f 2d       	mov	r24, r15
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	c8 17       	cp	r28, r24
     962:	d9 07       	cpc	r29, r25
     964:	94 f3       	brlt	.-28     	; 0x94a <CAN_Receive+0x44>
		received_message.data[x] = CAN_Read(MCP_RXB0Dm + x);
	}
	
	CAN_BitModify(MCP_CANINTF, 1, 0);
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	8c e2       	ldi	r24, 0x2C	; 44
     96c:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <CAN_BitModify>
	
	CAN_disable_SPI;
     970:	88 b3       	in	r24, 0x18	; 24
     972:	80 61       	ori	r24, 0x10	; 16
     974:	88 bb       	out	0x18, r24	; 24
	return received_message;
}
     976:	c8 01       	movw	r24, r16
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	ff 90       	pop	r15
     982:	08 95       	ret

00000984 <__vector_3>:
	//enable INT2 in the General Interrupt Control Register (GICR)
	set_bit(GICR, INT2);
	
}

ISR(INT2_vect){
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1

     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <menu_print>:
		case Neutral:
			break;
		
	}
	
}
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	0e 94 94 05 	call	0xb28	; 0xb28 <oled_reset>
     9a0:	64 e0       	ldi	r22, 0x04	; 4
     9a2:	81 e4       	ldi	r24, 0x41	; 65
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     9aa:	68 e0       	ldi	r22, 0x08	; 8
     9ac:	83 e4       	ldi	r24, 0x43	; 67
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	1d c0       	rjmp	.+58     	; 0x9f2 <menu_print+0x5a>
     9b8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
     9bc:	c8 17       	cp	r28, r24
     9be:	11 f0       	breq	.+4      	; 0x9c4 <menu_print+0x2c>
     9c0:	d5 e0       	ldi	r29, 0x05	; 5
     9c2:	01 c0       	rjmp	.+2      	; 0x9c6 <menu_print+0x2e>
     9c4:	d8 e0       	ldi	r29, 0x08	; 8
     9c6:	64 e0       	ldi	r22, 0x04	; 4
     9c8:	81 e4       	ldi	r24, 0x41	; 65
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     9d0:	ec 2f       	mov	r30, r28
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e6 5f       	subi	r30, 0xF6	; 246
     9da:	fe 4f       	sbci	r31, 0xFE	; 254
     9dc:	6d 2f       	mov	r22, r29
     9de:	80 81       	ld	r24, Z
     9e0:	91 81       	ldd	r25, Z+1	; 0x01
     9e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     9e6:	6d 2f       	mov	r22, r29
     9e8:	82 ee       	ldi	r24, 0xE2	; 226
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     9f0:	cf 5f       	subi	r28, 0xFF	; 255
     9f2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <glob_menu_length>
     9f6:	8c 17       	cp	r24, r28
     9f8:	f8 f6       	brcc	.-66     	; 0x9b8 <menu_print+0x20>
     9fa:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <__data_end>
     9fe:	8e 5f       	subi	r24, 0xFE	; 254
     a00:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_goto_line>
     a04:	68 e0       	ldi	r22, 0x08	; 8
     a06:	80 e5       	ldi	r24, 0x50	; 80
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 27 06 	call	0xc4e	; 0xc4e <oled_print>
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <menu_init>:
	}
}


void menu_init(){
	glob_menu_length.main_menu = 2;
     a14:	82 e0       	ldi	r24, 0x02	; 2
     a16:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <glob_menu_length>
	glob_current_menu_item = 0;
     a1a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <__data_end>
	glob_current_menu = main_menu;
     a1e:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <glob_current_menu>
     a22:	08 95       	ret

00000a24 <oled_write_command>:
}

void oled_pos(uint8_t line, uint8_t column){
	oled_goto_line(line);
	oled_goto_column(column);
}
     a24:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe07>
     a28:	08 95       	ret

00000a2a <oled_write_data>:
     a2a:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1007>
     a2e:	08 95       	ret

00000a30 <oled_init_program>:
     a30:	8e ea       	ldi	r24, 0xAE	; 174
     a32:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a36:	81 ea       	ldi	r24, 0xA1	; 161
     a38:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a3c:	8a ed       	ldi	r24, 0xDA	; 218
     a3e:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a42:	82 e1       	ldi	r24, 0x12	; 18
     a44:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a48:	88 ec       	ldi	r24, 0xC8	; 200
     a4a:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a4e:	88 ea       	ldi	r24, 0xA8	; 168
     a50:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a54:	8f e3       	ldi	r24, 0x3F	; 63
     a56:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a5a:	85 ed       	ldi	r24, 0xD5	; 213
     a5c:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a66:	81 e8       	ldi	r24, 0x81	; 129
     a68:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a6c:	80 e5       	ldi	r24, 0x50	; 80
     a6e:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a72:	89 ed       	ldi	r24, 0xD9	; 217
     a74:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a78:	81 e2       	ldi	r24, 0x21	; 33
     a7a:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a8a:	8b ed       	ldi	r24, 0xDB	; 219
     a8c:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a90:	80 e3       	ldi	r24, 0x30	; 48
     a92:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a96:	8d ea       	ldi	r24, 0xAD	; 173
     a98:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     aa2:	84 ea       	ldi	r24, 0xA4	; 164
     aa4:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     aa8:	86 ea       	ldi	r24, 0xA6	; 166
     aaa:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     aae:	8f ea       	ldi	r24, 0xAF	; 175
     ab0:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     ab4:	08 95       	ret

00000ab6 <oled_goto_line>:
     ab6:	cf 93       	push	r28
     ab8:	c8 2f       	mov	r28, r24
     aba:	80 eb       	ldi	r24, 0xB0	; 176
     abc:	8c 0f       	add	r24, r28
     abe:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     ac2:	c0 93 ee 01 	sts	0x01EE, r28	; 0x8001ee <glob_current_line>
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <oled_goto_column>:
     aca:	cf 93       	push	r28
     acc:	c8 2f       	mov	r28, r24
     ace:	8f 70       	andi	r24, 0x0F	; 15
     ad0:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     ad4:	8c 2f       	mov	r24, r28
     ad6:	82 95       	swap	r24
     ad8:	8f 70       	andi	r24, 0x0F	; 15
     ada:	80 5f       	subi	r24, 0xF0	; 240
     adc:	0e 94 12 05 	call	0xa24	; 0xa24 <oled_write_command>
     ae0:	c0 93 eb 01 	sts	0x01EB, r28	; 0x8001eb <glob_current_column>
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <oled_clear_line>:

void oled_clear_line(uint8_t line){
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
	oled_goto_line(line);
     aec:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_goto_line>
	for(int col = 0; col < 128; col++){
     af0:	c0 e0       	ldi	r28, 0x00	; 0
     af2:	d0 e0       	ldi	r29, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <oled_clear_line+0x16>
		oled_write_data(0);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_write_data>
	oled_goto_column(column);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(int col = 0; col < 128; col++){
     afc:	21 96       	adiw	r28, 0x01	; 1
     afe:	c0 38       	cpi	r28, 0x80	; 128
     b00:	d1 05       	cpc	r29, r1
     b02:	cc f3       	brlt	.-14     	; 0xaf6 <oled_clear_line+0xe>
		oled_write_data(0);
	}
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <oled_clear_screen>:
	oled_write_command(column & (0b1111));
	oled_write_command(0x10 + (column >> 4));
	
	glob_current_column = column;
}
void oled_clear_screen(){
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
	for(int line = 0; line < 8; line++){
     b0e:	c0 e0       	ldi	r28, 0x00	; 0
     b10:	d0 e0       	ldi	r29, 0x00	; 0
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <oled_clear_screen+0x12>
		oled_clear_line(line);
     b14:	8c 2f       	mov	r24, r28
     b16:	0e 94 74 05 	call	0xae8	; 0xae8 <oled_clear_line>
	oled_write_command(0x10 + (column >> 4));
	
	glob_current_column = column;
}
void oled_clear_screen(){
	for(int line = 0; line < 8; line++){
     b1a:	21 96       	adiw	r28, 0x01	; 1
     b1c:	c8 30       	cpi	r28, 0x08	; 8
     b1e:	d1 05       	cpc	r29, r1
     b20:	cc f3       	brlt	.-14     	; 0xb14 <oled_clear_screen+0xa>
		oled_clear_line(line);
	}
}
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <oled_reset>:

void oled_reset(){
	oled_clear_screen();
     b28:	0e 94 85 05 	call	0xb0a	; 0xb0a <oled_clear_screen>
	oled_goto_line(0);
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_goto_line>
	oled_goto_column(0);
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 65 05 	call	0xaca	; 0xaca <oled_goto_column>
     b38:	08 95       	ret

00000b3a <oled_increment_page_index>:
		oled_putchar(message[index], font_size);
	}
}

void oled_increment_page_index(){
	if(glob_current_line == MAX_LINE){
     b3a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <glob_current_line>
     b3e:	87 30       	cpi	r24, 0x07	; 7
     b40:	21 f4       	brne	.+8      	; 0xb4a <oled_increment_page_index+0x10>
		oled_goto_line(0);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_goto_line>
		return;
     b48:	08 95       	ret
	}
	oled_goto_line(glob_current_line + 1);
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	0e 94 5b 05 	call	0xab6	; 0xab6 <oled_goto_line>
     b50:	08 95       	ret

00000b52 <oled_putchar>:
	for(int col = 0; col < 128; col++){
		oled_write_data(0);
	}
}

void oled_putchar(const char ch, uint8_t font_size){
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	cf 93       	push	r28
     b58:	df 93       	push	r29
     b5a:	d8 2f       	mov	r29, r24
     b5c:	c6 2f       	mov	r28, r22
	switch (ch){
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	29 f0       	breq	.+10     	; 0xb6c <oled_putchar+0x1a>
     b62:	8d 30       	cpi	r24, 0x0D	; 13
     b64:	31 f0       	breq	.+12     	; 0xb72 <oled_putchar+0x20>
     b66:	89 30       	cpi	r24, 0x09	; 9
     b68:	a9 f4       	brne	.+42     	; 0xb94 <oled_putchar+0x42>
     b6a:	0e c0       	rjmp	.+28     	; 0xb88 <oled_putchar+0x36>
		case '\n':
			oled_increment_page_index();
     b6c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <oled_increment_page_index>
			break;
     b70:	69 c0       	rjmp	.+210    	; 0xc44 <oled_putchar+0xf2>
		case '\r':
			oled_goto_column(0);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 65 05 	call	0xaca	; 0xaca <oled_goto_column>
			break;
     b78:	65 c0       	rjmp	.+202    	; 0xc44 <oled_putchar+0xf2>
		case '\t':
			for (int i = 0; i < 4; i++){
				oled_putchar(' ', font_size);
     b7a:	6c 2f       	mov	r22, r28
     b7c:	80 e2       	ldi	r24, 0x20	; 32
     b7e:	0e 94 a9 05 	call	0xb52	; 0xb52 <oled_putchar>
			break;
		case '\r':
			oled_goto_column(0);
			break;
		case '\t':
			for (int i = 0; i < 4; i++){
     b82:	0f 5f       	subi	r16, 0xFF	; 255
     b84:	1f 4f       	sbci	r17, 0xFF	; 255
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <oled_putchar+0x3a>
		oled_write_data(0);
	}
}

void oled_putchar(const char ch, uint8_t font_size){
	switch (ch){
     b88:	00 e0       	ldi	r16, 0x00	; 0
     b8a:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case '\r':
			oled_goto_column(0);
			break;
		case '\t':
			for (int i = 0; i < 4; i++){
     b8c:	04 30       	cpi	r16, 0x04	; 4
     b8e:	11 05       	cpc	r17, r1
     b90:	a4 f3       	brlt	.-24     	; 0xb7a <oled_putchar+0x28>
     b92:	58 c0       	rjmp	.+176    	; 0xc44 <oled_putchar+0xf2>
				oled_putchar(' ', font_size);
			}
			break;
	
	default:
		if(glob_current_column + font_size > 127){
     b94:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <glob_current_column>
     b98:	86 2f       	mov	r24, r22
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	82 0f       	add	r24, r18
     b9e:	91 1d       	adc	r25, r1
     ba0:	80 38       	cpi	r24, 0x80	; 128
     ba2:	91 05       	cpc	r25, r1
     ba4:	2c f0       	brlt	.+10     	; 0xbb0 <oled_putchar+0x5e>
			oled_increment_page_index();
     ba6:	0e 94 9d 05 	call	0xb3a	; 0xb3a <oled_increment_page_index>
			oled_goto_column(0);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 65 05 	call	0xaca	; 0xaca <oled_goto_column>
		}
		if(font_size == 4){
     bb0:	c4 30       	cpi	r28, 0x04	; 4
     bb2:	a9 f4       	brne	.+42     	; 0xbde <oled_putchar+0x8c>
     bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <oled_putchar+0x84>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
     bb6:	ed 2f       	mov	r30, r29
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	b0 97       	sbiw	r30, 0x20	; 32
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	e1 0f       	add	r30, r17
     bc6:	f1 1d       	adc	r31, r1
     bc8:	e0 59       	subi	r30, 0x90	; 144
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	84 91       	lpm	r24, Z
     bce:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_write_data>
		if(glob_current_column + font_size > 127){
			oled_increment_page_index();
			oled_goto_column(0);
		}
		if(font_size == 4){
			for(uint8_t column = 0; column < font_size; column++){
     bd2:	1f 5f       	subi	r17, 0xFF	; 255
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <oled_putchar+0x86>
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	1c 17       	cp	r17, r28
     bda:	68 f3       	brcs	.-38     	; 0xbb6 <oled_putchar+0x64>
     bdc:	2e c0       	rjmp	.+92     	; 0xc3a <oled_putchar+0xe8>
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
			}
		}
		else if(font_size == 5){
     bde:	c5 30       	cpi	r28, 0x05	; 5
     be0:	a9 f0       	breq	.+42     	; 0xc0c <oled_putchar+0xba>
     be2:	10 e0       	ldi	r17, 0x00	; 0
     be4:	28 c0       	rjmp	.+80     	; 0xc36 <oled_putchar+0xe4>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
     be6:	8d 2f       	mov	r24, r29
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 97       	sbiw	r24, 0x20	; 32
     bec:	fc 01       	movw	r30, r24
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
     bfa:	e1 0f       	add	r30, r17
     bfc:	f1 1d       	adc	r31, r1
     bfe:	e4 51       	subi	r30, 0x14	; 20
     c00:	fe 4f       	sbci	r31, 0xFE	; 254
     c02:	84 91       	lpm	r24, Z
     c04:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_write_data>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
			}
		}
		else if(font_size == 5){
			for(uint8_t column = 0; column < font_size; column++){
     c08:	1f 5f       	subi	r17, 0xFF	; 255
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <oled_putchar+0xbc>
     c0c:	10 e0       	ldi	r17, 0x00	; 0
     c0e:	1c 17       	cp	r17, r28
     c10:	50 f3       	brcs	.-44     	; 0xbe6 <oled_putchar+0x94>
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <oled_putchar+0xe8>
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
			}
		}
		else{
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font8[ch - 32][column])));
     c14:	ed 2f       	mov	r30, r29
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	b0 97       	sbiw	r30, 0x20	; 32
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	ee 0f       	add	r30, r30
     c24:	ff 1f       	adc	r31, r31
     c26:	e1 0f       	add	r30, r17
     c28:	f1 1d       	adc	r31, r1
     c2a:	e9 53       	subi	r30, 0x39	; 57
     c2c:	fc 4f       	sbci	r31, 0xFC	; 252
     c2e:	84 91       	lpm	r24, Z
     c30:	0e 94 15 05 	call	0xa2a	; 0xa2a <oled_write_data>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
			}
		}
		else{
			for(uint8_t column = 0; column < font_size; column++){
     c34:	1f 5f       	subi	r17, 0xFF	; 255
     c36:	1c 17       	cp	r17, r28
     c38:	68 f3       	brcs	.-38     	; 0xc14 <oled_putchar+0xc2>
				oled_write_data(pgm_read_byte(&(font8[ch - 32][column])));
			}
		}
		glob_current_column += font_size;
     c3a:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <glob_current_column>
     c3e:	c8 0f       	add	r28, r24
     c40:	c0 93 eb 01 	sts	0x01EB, r28	; 0x8001eb <glob_current_column>
	}
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	08 95       	ret

00000c4e <oled_print>:

void oled_print(const char* message, uint8_t font_size){
     c4e:	ef 92       	push	r14
     c50:	ff 92       	push	r15
     c52:	0f 93       	push	r16
     c54:	1f 93       	push	r17
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	7c 01       	movw	r14, r24
     c5c:	d6 2f       	mov	r29, r22

	size_t size = strlen(message);
     c5e:	fc 01       	movw	r30, r24
     c60:	01 90       	ld	r0, Z+
     c62:	00 20       	and	r0, r0
     c64:	e9 f7       	brne	.-6      	; 0xc60 <oled_print+0x12>
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	8f 01       	movw	r16, r30
     c6a:	08 1b       	sub	r16, r24
     c6c:	19 0b       	sbc	r17, r25
	
	printf("\n\r%s", message);
     c6e:	ff 92       	push	r15
     c70:	8f 93       	push	r24
     c72:	8c e6       	ldi	r24, 0x6C	; 108
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	0e 94 fd 07 	call	0xffa	; 0xffa <printf>
	
	for(uint8_t index = 0; index < size; index++){
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	c0 e0       	ldi	r28, 0x00	; 0
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <oled_print+0x4c>
		oled_putchar(message[index], font_size);
     c8a:	f7 01       	movw	r30, r14
     c8c:	e8 0f       	add	r30, r24
     c8e:	f9 1f       	adc	r31, r25
     c90:	6d 2f       	mov	r22, r29
     c92:	80 81       	ld	r24, Z
     c94:	0e 94 a9 05 	call	0xb52	; 0xb52 <oled_putchar>

	size_t size = strlen(message);
	
	printf("\n\r%s", message);
	
	for(uint8_t index = 0; index < size; index++){
     c98:	cf 5f       	subi	r28, 0xFF	; 255
     c9a:	8c 2f       	mov	r24, r28
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	80 17       	cp	r24, r16
     ca0:	91 07       	cpc	r25, r17
     ca2:	98 f3       	brcs	.-26     	; 0xc8a <oled_print+0x3c>
		oled_putchar(message[index], font_size);
	}
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	08 95       	ret

00000cb2 <SPI_init>:

#include "SPI.h"

void SPI_init(void){
	/* Set SCL, MOSI & PB4 to output, MISO and the rest to input */
	set_bit(DDRB, PB5);
     cb2:	87 b3       	in	r24, 0x17	; 23
     cb4:	80 62       	ori	r24, 0x20	; 32
     cb6:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB7);
     cb8:	87 b3       	in	r24, 0x17	; 23
     cba:	80 68       	ori	r24, 0x80	; 128
     cbc:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB4);
     cbe:	87 b3       	in	r24, 0x17	; 23
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	87 bb       	out	0x17, r24	; 23
	clear_bit(DDRB, PB6);
     cc4:	87 b3       	in	r24, 0x17	; 23
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	87 bb       	out	0x17, r24	; 23
	
	set_bit(PORTB, PB4);
     cca:	88 b3       	in	r24, 0x18	; 24
     ccc:	80 61       	ori	r24, 0x10	; 16
     cce:	88 bb       	out	0x18, r24	; 24
	
	/* Enable SPI, set it in Master and set clock*/
	set_bit(SPCR, SPE);
     cd0:	8d b1       	in	r24, 0x0d	; 13
     cd2:	80 64       	ori	r24, 0x40	; 64
     cd4:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, MSTR);
     cd6:	8d b1       	in	r24, 0x0d	; 13
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, SPR0);
     cdc:	8d b1       	in	r24, 0x0d	; 13
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	8d b9       	out	0x0d, r24	; 13
     ce2:	08 95       	ret

00000ce4 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(uint8_t data){
	/* Start transmission */

	SPDR = data;
     ce4:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
     ce6:	77 9b       	sbis	0x0e, 7	; 14
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <SPI_MasterTransmit+0x2>

}
     cea:	08 95       	ret

00000cec <SPI_Read>:

uint8_t SPI_Read(){
	SPI_MasterTransmit(0x00);
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 72 06 	call	0xce4	; 0xce4 <SPI_MasterTransmit>
	return SPDR;
     cf2:	8f b1       	in	r24, 0x0f	; 15
     cf4:	08 95       	ret

00000cf6 <SRAM_test>:
 *  Author: andreurn
 */ 

#include "sram.h"

void SRAM_test(void){
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	00 d0       	rcall	.+0      	; 0xd08 <SRAM_test+0x12>
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     d0c:	81 e7       	ldi	r24, 0x71	; 113
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	0e 94 fd 07 	call	0xffa	; 0xffa <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     d18:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     d1c:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     d1e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	00 e0       	ldi	r16, 0x00	; 0
     d28:	10 e0       	ldi	r17, 0x00	; 0
#include "sram.h"

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     d2a:	e1 2c       	mov	r14, r1
     d2c:	f1 2c       	mov	r15, r1
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d2e:	12 c0       	rjmp	.+36     	; 0xd54 <SRAM_test+0x5e>
		volatile uint8_t some_value = rand();
     d30:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
     d34:	8a 83       	std	Y+2, r24	; 0x02
		ext_ram[i] = some_value;
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	f8 01       	movw	r30, r16
     d3a:	f8 5e       	subi	r31, 0xE8	; 232
     d3c:	80 83       	st	Z, r24
		volatile uint8_t retreived_value = ext_ram[i];
     d3e:	80 81       	ld	r24, Z
     d40:	89 83       	std	Y+1, r24	; 0x01
		if (retreived_value != some_value) {
     d42:	99 81       	ldd	r25, Y+1	; 0x01
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	98 17       	cp	r25, r24
     d48:	19 f0       	breq	.+6      	; 0xd50 <SRAM_test+0x5a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	e8 1a       	sub	r14, r24
     d4e:	f8 0a       	sbc	r15, r24
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
     d54:	01 15       	cp	r16, r1
     d56:	88 e0       	ldi	r24, 0x08	; 8
     d58:	18 07       	cpc	r17, r24
     d5a:	50 f3       	brcs	.-44     	; 0xd30 <SRAM_test+0x3a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     d5c:	c6 01       	movw	r24, r12
     d5e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     d66:	c1 2c       	mov	r12, r1
     d68:	d1 2c       	mov	r13, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d6a:	0c c0       	rjmp	.+24     	; 0xd84 <SRAM_test+0x8e>
		uint8_t some_value = rand();
     d6c:	0e 94 a2 07 	call	0xf44	; 0xf44 <rand>
		uint8_t retreived_value = ext_ram[i];
     d70:	f8 01       	movw	r30, r16
     d72:	f8 5e       	subi	r31, 0xE8	; 232
     d74:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     d76:	89 17       	cp	r24, r25
     d78:	19 f0       	breq	.+6      	; 0xd80 <SRAM_test+0x8a>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	c8 1a       	sub	r12, r24
     d7e:	d8 0a       	sbc	r13, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	01 15       	cp	r16, r1
     d86:	88 e0       	ldi	r24, 0x08	; 8
     d88:	18 07       	cpc	r17, r24
     d8a:	80 f3       	brcs	.-32     	; 0xd6c <SRAM_test+0x76>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
     d8c:	df 92       	push	r13
     d8e:	cf 92       	push	r12
     d90:	ff 92       	push	r15
     d92:	ef 92       	push	r14
     d94:	89 e8       	ldi	r24, 0x89	; 137
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 fd 07 	call	0xffa	; 0xffa <printf>
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	ef 90       	pop	r14
     dbc:	df 90       	pop	r13
     dbe:	cf 90       	pop	r12
     dc0:	08 95       	ret

00000dc2 <SRAM_init>:

void SRAM_init(){
	set_bit(MCUCR, SRE);
     dc2:	85 b7       	in	r24, 0x35	; 53
     dc4:	80 68       	ori	r24, 0x80	; 128
     dc6:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
     dc8:	80 b7       	in	r24, 0x30	; 48
     dca:	80 62       	ori	r24, 0x20	; 32
     dcc:	80 bf       	out	0x30, r24	; 48
     dce:	08 95       	ret

00000dd0 <main>:
#include "joystick.h"
#include "menu.h"
#include "CAN.h"


int main(void){
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	a1 97       	sbiw	r28, 0x21	; 33
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
    // enable global interrupt flags
	//interrupt_init();
	USART_init(MYUBRR);
     de4:	8f e1       	ldi	r24, 0x1F	; 31
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 98 03 	call	0x730	; 0x730 <USART_init>
	SRAM_init();
     dec:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <SRAM_init>
	ADC_init();
     df0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <ADC_init>
	oled_init_program();
     df4:	0e 94 18 05 	call	0xa30	; 0xa30 <oled_init_program>
	menu_init();
     df8:	0e 94 0a 05 	call	0xa14	; 0xa14 <menu_init>
	CAN_Init();
     dfc:	0e 94 15 04 	call	0x82a	; 0x82a <CAN_Init>
	
	
	SRAM_test();
     e00:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <SRAM_test>
	
	oled_reset();
     e04:	0e 94 94 05 	call	0xb28	; 0xb28 <oled_reset>
	
	menu_print();
     e08:	0e 94 cc 04 	call	0x998	; 0x998 <menu_print>
	CAN_msg msg1;
	
	CAN_msg msg2;
	
	while(1){
		msg1.id = 0;
     e0c:	1a 82       	std	Y+2, r1	; 0x02
     e0e:	19 82       	std	Y+1, r1	; 0x01
		msg1.length = 3;
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8b 83       	std	Y+3, r24	; 0x03
		msg1.data[0] = 1;
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	9c 83       	std	Y+4, r25	; 0x04
		msg1.data[1] = 2;
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	9d 83       	std	Y+5, r25	; 0x05
		msg1.data[2] = 3;
     e1c:	8e 83       	std	Y+6, r24	; 0x06
		
		CAN_Transmit(msg1);
     e1e:	e1 2c       	mov	r14, r1
     e20:	fa 80       	ldd	r15, Y+2	; 0x02
     e22:	03 e0       	ldi	r16, 0x03	; 3
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	22 e0       	ldi	r18, 0x02	; 2
     e28:	33 e0       	ldi	r19, 0x03	; 3
     e2a:	4f 81       	ldd	r20, Y+7	; 0x07
     e2c:	58 85       	ldd	r21, Y+8	; 0x08
     e2e:	69 85       	ldd	r22, Y+9	; 0x09
     e30:	7a 85       	ldd	r23, Y+10	; 0x0a
     e32:	8b 85       	ldd	r24, Y+11	; 0x0b
     e34:	0e 94 21 04 	call	0x842	; 0x842 <CAN_Transmit>
     e38:	8c ec       	ldi	r24, 0xCC	; 204
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <main+0x6c>
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <main+0x72>
     e42:	00 00       	nop
		
		_delay_ms(1);
		
		msg2 = CAN_Receive();
     e44:	ce 01       	movw	r24, r28
     e46:	47 96       	adiw	r24, 0x17	; 23
     e48:	0e 94 83 04 	call	0x906	; 0x906 <CAN_Receive>
     e4c:	8b e0       	ldi	r24, 0x0B	; 11
     e4e:	fe 01       	movw	r30, r28
     e50:	77 96       	adiw	r30, 0x17	; 23
     e52:	de 01       	movw	r26, r28
     e54:	1c 96       	adiw	r26, 0x0c	; 12
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	8a 95       	dec	r24
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <main+0x86>
		
		for(int x = 0; x < msg2.length; x++){
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	10 e0       	ldi	r17, 0x00	; 0
     e62:	15 c0       	rjmp	.+42     	; 0xe8e <main+0xbe>
			printf("%2d", msg2.data[x]);
     e64:	ef e0       	ldi	r30, 0x0F	; 15
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	ec 0f       	add	r30, r28
     e6a:	fd 1f       	adc	r31, r29
     e6c:	e0 0f       	add	r30, r16
     e6e:	f1 1f       	adc	r31, r17
     e70:	80 81       	ld	r24, Z
     e72:	1f 92       	push	r1
     e74:	8f 93       	push	r24
     e76:	85 ee       	ldi	r24, 0xE5	; 229
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9f 93       	push	r25
     e7c:	8f 93       	push	r24
     e7e:	0e 94 fd 07 	call	0xffa	; 0xffa <printf>
		
		_delay_ms(1);
		
		msg2 = CAN_Receive();
		
		for(int x = 0; x < msg2.length; x++){
     e82:	0f 5f       	subi	r16, 0xFF	; 255
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	8e 85       	ldd	r24, Y+14	; 0x0e
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	08 17       	cp	r16, r24
     e94:	19 07       	cpc	r17, r25
     e96:	34 f3       	brlt	.-52     	; 0xe64 <main+0x94>
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	2f e7       	ldi	r18, 0x7F	; 127
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	20 40       	sbci	r18, 0x00	; 0
     ea2:	80 40       	sbci	r24, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <main+0xce>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <main+0xd8>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <main+0xda>
     eaa:	b0 cf       	rjmp	.-160    	; 0xe0c <main+0x3c>

00000eac <do_rand>:
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
     ec2:	68 81       	ld	r22, Y
     ec4:	79 81       	ldd	r23, Y+1	; 0x01
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	61 15       	cp	r22, r1
     ecc:	71 05       	cpc	r23, r1
     ece:	81 05       	cpc	r24, r1
     ed0:	91 05       	cpc	r25, r1
     ed2:	21 f4       	brne	.+8      	; 0xedc <do_rand+0x30>
     ed4:	64 e2       	ldi	r22, 0x24	; 36
     ed6:	79 ed       	ldi	r23, 0xD9	; 217
     ed8:	8b e5       	ldi	r24, 0x5B	; 91
     eda:	97 e0       	ldi	r25, 0x07	; 7
     edc:	2d e1       	ldi	r18, 0x1D	; 29
     ede:	33 ef       	ldi	r19, 0xF3	; 243
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <__divmodsi4>
     ee8:	49 01       	movw	r8, r18
     eea:	5a 01       	movw	r10, r20
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	a7 ea       	ldi	r26, 0xA7	; 167
     ef2:	b1 e4       	ldi	r27, 0x41	; 65
     ef4:	0e 94 07 0c 	call	0x180e	; 0x180e <__muluhisi3>
     ef8:	6b 01       	movw	r12, r22
     efa:	7c 01       	movw	r14, r24
     efc:	ac ee       	ldi	r26, 0xEC	; 236
     efe:	b4 ef       	ldi	r27, 0xF4	; 244
     f00:	a5 01       	movw	r20, r10
     f02:	94 01       	movw	r18, r8
     f04:	0e 94 15 0c 	call	0x182a	; 0x182a <__mulohisi3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8c 0d       	add	r24, r12
     f0e:	9d 1d       	adc	r25, r13
     f10:	ae 1d       	adc	r26, r14
     f12:	bf 1d       	adc	r27, r15
     f14:	b7 ff       	sbrs	r27, 7
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <do_rand+0x72>
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	a1 09       	sbc	r26, r1
     f1c:	b0 48       	sbci	r27, 0x80	; 128
     f1e:	88 83       	st	Y, r24
     f20:	99 83       	std	Y+1, r25	; 0x01
     f22:	aa 83       	std	Y+2, r26	; 0x02
     f24:	bb 83       	std	Y+3, r27	; 0x03
     f26:	9f 77       	andi	r25, 0x7F	; 127
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	9f 90       	pop	r9
     f3a:	8f 90       	pop	r8
     f3c:	08 95       	ret

00000f3e <rand_r>:
     f3e:	0e 94 56 07 	call	0xeac	; 0xeac <do_rand>
     f42:	08 95       	ret

00000f44 <rand>:
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 56 07 	call	0xeac	; 0xeac <do_rand>
     f4c:	08 95       	ret

00000f4e <srand>:
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     f56:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f5a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     f5e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     f62:	08 95       	ret

00000f64 <fdevopen>:
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	31 f4       	brne	.+12     	; 0xf7c <fdevopen+0x18>
     f70:	61 15       	cp	r22, r1
     f72:	71 05       	cpc	r23, r1
     f74:	19 f4       	brne	.+6      	; 0xf7c <fdevopen+0x18>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	3a c0       	rjmp	.+116    	; 0xff0 <fdevopen+0x8c>
     f7c:	8b 01       	movw	r16, r22
     f7e:	ec 01       	movw	r28, r24
     f80:	6e e0       	ldi	r22, 0x0E	; 14
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <calloc>
     f8c:	fc 01       	movw	r30, r24
     f8e:	89 2b       	or	r24, r25
     f90:	91 f3       	breq	.-28     	; 0xf76 <fdevopen+0x12>
     f92:	80 e8       	ldi	r24, 0x80	; 128
     f94:	83 83       	std	Z+3, r24	; 0x03
     f96:	01 15       	cp	r16, r1
     f98:	11 05       	cpc	r17, r1
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <fdevopen+0x54>
     f9c:	13 87       	std	Z+11, r17	; 0x0b
     f9e:	02 87       	std	Z+10, r16	; 0x0a
     fa0:	81 e8       	ldi	r24, 0x81	; 129
     fa2:	83 83       	std	Z+3, r24	; 0x03
     fa4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <__iob>
     fa8:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <__iob+0x1>
     fac:	89 2b       	or	r24, r25
     fae:	21 f4       	brne	.+8      	; 0xfb8 <fdevopen+0x54>
     fb0:	f0 93 f0 01 	sts	0x01F0, r31	; 0x8001f0 <__iob+0x1>
     fb4:	e0 93 ef 01 	sts	0x01EF, r30	; 0x8001ef <__iob>
     fb8:	20 97       	sbiw	r28, 0x00	; 0
     fba:	c9 f0       	breq	.+50     	; 0xfee <fdevopen+0x8a>
     fbc:	d1 87       	std	Z+9, r29	; 0x09
     fbe:	c0 87       	std	Z+8, r28	; 0x08
     fc0:	83 81       	ldd	r24, Z+3	; 0x03
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	83 83       	std	Z+3, r24	; 0x03
     fc6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <__iob+0x2>
     fca:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <__iob+0x3>
     fce:	89 2b       	or	r24, r25
     fd0:	71 f4       	brne	.+28     	; 0xfee <fdevopen+0x8a>
     fd2:	f0 93 f2 01 	sts	0x01F2, r31	; 0x8001f2 <__iob+0x3>
     fd6:	e0 93 f1 01 	sts	0x01F1, r30	; 0x8001f1 <__iob+0x2>
     fda:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <__iob+0x4>
     fde:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <__iob+0x5>
     fe2:	89 2b       	or	r24, r25
     fe4:	21 f4       	brne	.+8      	; 0xfee <fdevopen+0x8a>
     fe6:	f0 93 f4 01 	sts	0x01F4, r31	; 0x8001f4 <__iob+0x5>
     fea:	e0 93 f3 01 	sts	0x01F3, r30	; 0x8001f3 <__iob+0x4>
     fee:	cf 01       	movw	r24, r30
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	08 95       	ret

00000ffa <printf>:
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e3 e0       	ldi	r30, 0x03	; 3
    1000:	f8 e0       	ldi	r31, 0x08	; 8
    1002:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__prologue_saves__+0x20>
    1006:	ae 01       	movw	r20, r28
    1008:	4b 5f       	subi	r20, 0xFB	; 251
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	fa 01       	movw	r30, r20
    100e:	61 91       	ld	r22, Z+
    1010:	71 91       	ld	r23, Z+
    1012:	af 01       	movw	r20, r30
    1014:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <__iob+0x2>
    1018:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <__iob+0x3>
    101c:	0e 94 13 08 	call	0x1026	; 0x1026 <vfprintf>
    1020:	e2 e0       	ldi	r30, 0x02	; 2
    1022:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__epilogue_restores__+0x20>

00001026 <vfprintf>:
    1026:	ab e0       	ldi	r26, 0x0B	; 11
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e9 e1       	ldi	r30, 0x19	; 25
    102c:	f8 e0       	ldi	r31, 0x08	; 8
    102e:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__prologue_saves__>
    1032:	6c 01       	movw	r12, r24
    1034:	7b 01       	movw	r14, r22
    1036:	8a 01       	movw	r16, r20
    1038:	fc 01       	movw	r30, r24
    103a:	17 82       	std	Z+7, r1	; 0x07
    103c:	16 82       	std	Z+6, r1	; 0x06
    103e:	83 81       	ldd	r24, Z+3	; 0x03
    1040:	81 ff       	sbrs	r24, 1
    1042:	cc c1       	rjmp	.+920    	; 0x13dc <vfprintf+0x3b6>
    1044:	ce 01       	movw	r24, r28
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	3c 01       	movw	r6, r24
    104a:	f6 01       	movw	r30, r12
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	f7 01       	movw	r30, r14
    1050:	93 fd       	sbrc	r25, 3
    1052:	85 91       	lpm	r24, Z+
    1054:	93 ff       	sbrs	r25, 3
    1056:	81 91       	ld	r24, Z+
    1058:	7f 01       	movw	r14, r30
    105a:	88 23       	and	r24, r24
    105c:	09 f4       	brne	.+2      	; 0x1060 <vfprintf+0x3a>
    105e:	ba c1       	rjmp	.+884    	; 0x13d4 <vfprintf+0x3ae>
    1060:	85 32       	cpi	r24, 0x25	; 37
    1062:	39 f4       	brne	.+14     	; 0x1072 <vfprintf+0x4c>
    1064:	93 fd       	sbrc	r25, 3
    1066:	85 91       	lpm	r24, Z+
    1068:	93 ff       	sbrs	r25, 3
    106a:	81 91       	ld	r24, Z+
    106c:	7f 01       	movw	r14, r30
    106e:	85 32       	cpi	r24, 0x25	; 37
    1070:	29 f4       	brne	.+10     	; 0x107c <vfprintf+0x56>
    1072:	b6 01       	movw	r22, r12
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    107a:	e7 cf       	rjmp	.-50     	; 0x104a <vfprintf+0x24>
    107c:	91 2c       	mov	r9, r1
    107e:	21 2c       	mov	r2, r1
    1080:	31 2c       	mov	r3, r1
    1082:	ff e1       	ldi	r31, 0x1F	; 31
    1084:	f3 15       	cp	r31, r3
    1086:	d8 f0       	brcs	.+54     	; 0x10be <vfprintf+0x98>
    1088:	8b 32       	cpi	r24, 0x2B	; 43
    108a:	79 f0       	breq	.+30     	; 0x10aa <vfprintf+0x84>
    108c:	38 f4       	brcc	.+14     	; 0x109c <vfprintf+0x76>
    108e:	80 32       	cpi	r24, 0x20	; 32
    1090:	79 f0       	breq	.+30     	; 0x10b0 <vfprintf+0x8a>
    1092:	83 32       	cpi	r24, 0x23	; 35
    1094:	a1 f4       	brne	.+40     	; 0x10be <vfprintf+0x98>
    1096:	23 2d       	mov	r18, r3
    1098:	20 61       	ori	r18, 0x10	; 16
    109a:	1d c0       	rjmp	.+58     	; 0x10d6 <vfprintf+0xb0>
    109c:	8d 32       	cpi	r24, 0x2D	; 45
    109e:	61 f0       	breq	.+24     	; 0x10b8 <vfprintf+0x92>
    10a0:	80 33       	cpi	r24, 0x30	; 48
    10a2:	69 f4       	brne	.+26     	; 0x10be <vfprintf+0x98>
    10a4:	23 2d       	mov	r18, r3
    10a6:	21 60       	ori	r18, 0x01	; 1
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <vfprintf+0xb0>
    10aa:	83 2d       	mov	r24, r3
    10ac:	82 60       	ori	r24, 0x02	; 2
    10ae:	38 2e       	mov	r3, r24
    10b0:	e3 2d       	mov	r30, r3
    10b2:	e4 60       	ori	r30, 0x04	; 4
    10b4:	3e 2e       	mov	r3, r30
    10b6:	2a c0       	rjmp	.+84     	; 0x110c <vfprintf+0xe6>
    10b8:	f3 2d       	mov	r31, r3
    10ba:	f8 60       	ori	r31, 0x08	; 8
    10bc:	1d c0       	rjmp	.+58     	; 0x10f8 <vfprintf+0xd2>
    10be:	37 fc       	sbrc	r3, 7
    10c0:	2d c0       	rjmp	.+90     	; 0x111c <vfprintf+0xf6>
    10c2:	20 ed       	ldi	r18, 0xD0	; 208
    10c4:	28 0f       	add	r18, r24
    10c6:	2a 30       	cpi	r18, 0x0A	; 10
    10c8:	40 f0       	brcs	.+16     	; 0x10da <vfprintf+0xb4>
    10ca:	8e 32       	cpi	r24, 0x2E	; 46
    10cc:	b9 f4       	brne	.+46     	; 0x10fc <vfprintf+0xd6>
    10ce:	36 fc       	sbrc	r3, 6
    10d0:	81 c1       	rjmp	.+770    	; 0x13d4 <vfprintf+0x3ae>
    10d2:	23 2d       	mov	r18, r3
    10d4:	20 64       	ori	r18, 0x40	; 64
    10d6:	32 2e       	mov	r3, r18
    10d8:	19 c0       	rjmp	.+50     	; 0x110c <vfprintf+0xe6>
    10da:	36 fe       	sbrs	r3, 6
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0xc4>
    10de:	8a e0       	ldi	r24, 0x0A	; 10
    10e0:	98 9e       	mul	r9, r24
    10e2:	20 0d       	add	r18, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	92 2e       	mov	r9, r18
    10e8:	11 c0       	rjmp	.+34     	; 0x110c <vfprintf+0xe6>
    10ea:	ea e0       	ldi	r30, 0x0A	; 10
    10ec:	2e 9e       	mul	r2, r30
    10ee:	20 0d       	add	r18, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	22 2e       	mov	r2, r18
    10f4:	f3 2d       	mov	r31, r3
    10f6:	f0 62       	ori	r31, 0x20	; 32
    10f8:	3f 2e       	mov	r3, r31
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <vfprintf+0xe6>
    10fc:	8c 36       	cpi	r24, 0x6C	; 108
    10fe:	21 f4       	brne	.+8      	; 0x1108 <vfprintf+0xe2>
    1100:	83 2d       	mov	r24, r3
    1102:	80 68       	ori	r24, 0x80	; 128
    1104:	38 2e       	mov	r3, r24
    1106:	02 c0       	rjmp	.+4      	; 0x110c <vfprintf+0xe6>
    1108:	88 36       	cpi	r24, 0x68	; 104
    110a:	41 f4       	brne	.+16     	; 0x111c <vfprintf+0xf6>
    110c:	f7 01       	movw	r30, r14
    110e:	93 fd       	sbrc	r25, 3
    1110:	85 91       	lpm	r24, Z+
    1112:	93 ff       	sbrs	r25, 3
    1114:	81 91       	ld	r24, Z+
    1116:	7f 01       	movw	r14, r30
    1118:	81 11       	cpse	r24, r1
    111a:	b3 cf       	rjmp	.-154    	; 0x1082 <vfprintf+0x5c>
    111c:	98 2f       	mov	r25, r24
    111e:	9f 7d       	andi	r25, 0xDF	; 223
    1120:	95 54       	subi	r25, 0x45	; 69
    1122:	93 30       	cpi	r25, 0x03	; 3
    1124:	28 f4       	brcc	.+10     	; 0x1130 <vfprintf+0x10a>
    1126:	0c 5f       	subi	r16, 0xFC	; 252
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	9f e3       	ldi	r25, 0x3F	; 63
    112c:	99 83       	std	Y+1, r25	; 0x01
    112e:	0d c0       	rjmp	.+26     	; 0x114a <vfprintf+0x124>
    1130:	83 36       	cpi	r24, 0x63	; 99
    1132:	31 f0       	breq	.+12     	; 0x1140 <vfprintf+0x11a>
    1134:	83 37       	cpi	r24, 0x73	; 115
    1136:	71 f0       	breq	.+28     	; 0x1154 <vfprintf+0x12e>
    1138:	83 35       	cpi	r24, 0x53	; 83
    113a:	09 f0       	breq	.+2      	; 0x113e <vfprintf+0x118>
    113c:	59 c0       	rjmp	.+178    	; 0x11f0 <vfprintf+0x1ca>
    113e:	21 c0       	rjmp	.+66     	; 0x1182 <vfprintf+0x15c>
    1140:	f8 01       	movw	r30, r16
    1142:	80 81       	ld	r24, Z
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	0e 5f       	subi	r16, 0xFE	; 254
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	88 24       	eor	r8, r8
    114c:	83 94       	inc	r8
    114e:	91 2c       	mov	r9, r1
    1150:	53 01       	movw	r10, r6
    1152:	13 c0       	rjmp	.+38     	; 0x117a <vfprintf+0x154>
    1154:	28 01       	movw	r4, r16
    1156:	f2 e0       	ldi	r31, 0x02	; 2
    1158:	4f 0e       	add	r4, r31
    115a:	51 1c       	adc	r5, r1
    115c:	f8 01       	movw	r30, r16
    115e:	a0 80       	ld	r10, Z
    1160:	b1 80       	ldd	r11, Z+1	; 0x01
    1162:	36 fe       	sbrs	r3, 6
    1164:	03 c0       	rjmp	.+6      	; 0x116c <vfprintf+0x146>
    1166:	69 2d       	mov	r22, r9
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <vfprintf+0x14a>
    116c:	6f ef       	ldi	r22, 0xFF	; 255
    116e:	7f ef       	ldi	r23, 0xFF	; 255
    1170:	c5 01       	movw	r24, r10
    1172:	0e 94 43 0b 	call	0x1686	; 0x1686 <strnlen>
    1176:	4c 01       	movw	r8, r24
    1178:	82 01       	movw	r16, r4
    117a:	f3 2d       	mov	r31, r3
    117c:	ff 77       	andi	r31, 0x7F	; 127
    117e:	3f 2e       	mov	r3, r31
    1180:	16 c0       	rjmp	.+44     	; 0x11ae <vfprintf+0x188>
    1182:	28 01       	movw	r4, r16
    1184:	22 e0       	ldi	r18, 0x02	; 2
    1186:	42 0e       	add	r4, r18
    1188:	51 1c       	adc	r5, r1
    118a:	f8 01       	movw	r30, r16
    118c:	a0 80       	ld	r10, Z
    118e:	b1 80       	ldd	r11, Z+1	; 0x01
    1190:	36 fe       	sbrs	r3, 6
    1192:	03 c0       	rjmp	.+6      	; 0x119a <vfprintf+0x174>
    1194:	69 2d       	mov	r22, r9
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0x178>
    119a:	6f ef       	ldi	r22, 0xFF	; 255
    119c:	7f ef       	ldi	r23, 0xFF	; 255
    119e:	c5 01       	movw	r24, r10
    11a0:	0e 94 31 0b 	call	0x1662	; 0x1662 <strnlen_P>
    11a4:	4c 01       	movw	r8, r24
    11a6:	f3 2d       	mov	r31, r3
    11a8:	f0 68       	ori	r31, 0x80	; 128
    11aa:	3f 2e       	mov	r3, r31
    11ac:	82 01       	movw	r16, r4
    11ae:	33 fc       	sbrc	r3, 3
    11b0:	1b c0       	rjmp	.+54     	; 0x11e8 <vfprintf+0x1c2>
    11b2:	82 2d       	mov	r24, r2
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	88 16       	cp	r8, r24
    11b8:	99 06       	cpc	r9, r25
    11ba:	b0 f4       	brcc	.+44     	; 0x11e8 <vfprintf+0x1c2>
    11bc:	b6 01       	movw	r22, r12
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    11c6:	2a 94       	dec	r2
    11c8:	f4 cf       	rjmp	.-24     	; 0x11b2 <vfprintf+0x18c>
    11ca:	f5 01       	movw	r30, r10
    11cc:	37 fc       	sbrc	r3, 7
    11ce:	85 91       	lpm	r24, Z+
    11d0:	37 fe       	sbrs	r3, 7
    11d2:	81 91       	ld	r24, Z+
    11d4:	5f 01       	movw	r10, r30
    11d6:	b6 01       	movw	r22, r12
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    11de:	21 10       	cpse	r2, r1
    11e0:	2a 94       	dec	r2
    11e2:	21 e0       	ldi	r18, 0x01	; 1
    11e4:	82 1a       	sub	r8, r18
    11e6:	91 08       	sbc	r9, r1
    11e8:	81 14       	cp	r8, r1
    11ea:	91 04       	cpc	r9, r1
    11ec:	71 f7       	brne	.-36     	; 0x11ca <vfprintf+0x1a4>
    11ee:	e8 c0       	rjmp	.+464    	; 0x13c0 <vfprintf+0x39a>
    11f0:	84 36       	cpi	r24, 0x64	; 100
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <vfprintf+0x1d2>
    11f4:	89 36       	cpi	r24, 0x69	; 105
    11f6:	41 f5       	brne	.+80     	; 0x1248 <vfprintf+0x222>
    11f8:	f8 01       	movw	r30, r16
    11fa:	37 fe       	sbrs	r3, 7
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <vfprintf+0x1e6>
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	0c 5f       	subi	r16, 0xFC	; 252
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	08 c0       	rjmp	.+16     	; 0x121c <vfprintf+0x1f6>
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	07 2e       	mov	r0, r23
    1212:	00 0c       	add	r0, r0
    1214:	88 0b       	sbc	r24, r24
    1216:	99 0b       	sbc	r25, r25
    1218:	0e 5f       	subi	r16, 0xFE	; 254
    121a:	1f 4f       	sbci	r17, 0xFF	; 255
    121c:	f3 2d       	mov	r31, r3
    121e:	ff 76       	andi	r31, 0x6F	; 111
    1220:	3f 2e       	mov	r3, r31
    1222:	97 ff       	sbrs	r25, 7
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <vfprintf+0x212>
    1226:	90 95       	com	r25
    1228:	80 95       	com	r24
    122a:	70 95       	com	r23
    122c:	61 95       	neg	r22
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	f0 68       	ori	r31, 0x80	; 128
    1236:	3f 2e       	mov	r3, r31
    1238:	2a e0       	ldi	r18, 0x0A	; 10
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	a3 01       	movw	r20, r6
    123e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__ultoa_invert>
    1242:	88 2e       	mov	r8, r24
    1244:	86 18       	sub	r8, r6
    1246:	45 c0       	rjmp	.+138    	; 0x12d2 <vfprintf+0x2ac>
    1248:	85 37       	cpi	r24, 0x75	; 117
    124a:	31 f4       	brne	.+12     	; 0x1258 <vfprintf+0x232>
    124c:	23 2d       	mov	r18, r3
    124e:	2f 7e       	andi	r18, 0xEF	; 239
    1250:	b2 2e       	mov	r11, r18
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	25 c0       	rjmp	.+74     	; 0x12a2 <vfprintf+0x27c>
    1258:	93 2d       	mov	r25, r3
    125a:	99 7f       	andi	r25, 0xF9	; 249
    125c:	b9 2e       	mov	r11, r25
    125e:	8f 36       	cpi	r24, 0x6F	; 111
    1260:	c1 f0       	breq	.+48     	; 0x1292 <vfprintf+0x26c>
    1262:	18 f4       	brcc	.+6      	; 0x126a <vfprintf+0x244>
    1264:	88 35       	cpi	r24, 0x58	; 88
    1266:	79 f0       	breq	.+30     	; 0x1286 <vfprintf+0x260>
    1268:	b5 c0       	rjmp	.+362    	; 0x13d4 <vfprintf+0x3ae>
    126a:	80 37       	cpi	r24, 0x70	; 112
    126c:	19 f0       	breq	.+6      	; 0x1274 <vfprintf+0x24e>
    126e:	88 37       	cpi	r24, 0x78	; 120
    1270:	21 f0       	breq	.+8      	; 0x127a <vfprintf+0x254>
    1272:	b0 c0       	rjmp	.+352    	; 0x13d4 <vfprintf+0x3ae>
    1274:	e9 2f       	mov	r30, r25
    1276:	e0 61       	ori	r30, 0x10	; 16
    1278:	be 2e       	mov	r11, r30
    127a:	b4 fe       	sbrs	r11, 4
    127c:	0d c0       	rjmp	.+26     	; 0x1298 <vfprintf+0x272>
    127e:	fb 2d       	mov	r31, r11
    1280:	f4 60       	ori	r31, 0x04	; 4
    1282:	bf 2e       	mov	r11, r31
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <vfprintf+0x272>
    1286:	34 fe       	sbrs	r3, 4
    1288:	0a c0       	rjmp	.+20     	; 0x129e <vfprintf+0x278>
    128a:	29 2f       	mov	r18, r25
    128c:	26 60       	ori	r18, 0x06	; 6
    128e:	b2 2e       	mov	r11, r18
    1290:	06 c0       	rjmp	.+12     	; 0x129e <vfprintf+0x278>
    1292:	28 e0       	ldi	r18, 0x08	; 8
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	05 c0       	rjmp	.+10     	; 0x12a2 <vfprintf+0x27c>
    1298:	20 e1       	ldi	r18, 0x10	; 16
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0x27c>
    129e:	20 e1       	ldi	r18, 0x10	; 16
    12a0:	32 e0       	ldi	r19, 0x02	; 2
    12a2:	f8 01       	movw	r30, r16
    12a4:	b7 fe       	sbrs	r11, 7
    12a6:	07 c0       	rjmp	.+14     	; 0x12b6 <vfprintf+0x290>
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	0c 5f       	subi	r16, 0xFC	; 252
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <vfprintf+0x29c>
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 5f       	subi	r16, 0xFE	; 254
    12c0:	1f 4f       	sbci	r17, 0xFF	; 255
    12c2:	a3 01       	movw	r20, r6
    12c4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__ultoa_invert>
    12c8:	88 2e       	mov	r8, r24
    12ca:	86 18       	sub	r8, r6
    12cc:	fb 2d       	mov	r31, r11
    12ce:	ff 77       	andi	r31, 0x7F	; 127
    12d0:	3f 2e       	mov	r3, r31
    12d2:	36 fe       	sbrs	r3, 6
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <vfprintf+0x2ca>
    12d6:	23 2d       	mov	r18, r3
    12d8:	2e 7f       	andi	r18, 0xFE	; 254
    12da:	a2 2e       	mov	r10, r18
    12dc:	89 14       	cp	r8, r9
    12de:	58 f4       	brcc	.+22     	; 0x12f6 <vfprintf+0x2d0>
    12e0:	34 fe       	sbrs	r3, 4
    12e2:	0b c0       	rjmp	.+22     	; 0x12fa <vfprintf+0x2d4>
    12e4:	32 fc       	sbrc	r3, 2
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <vfprintf+0x2d4>
    12e8:	83 2d       	mov	r24, r3
    12ea:	8e 7e       	andi	r24, 0xEE	; 238
    12ec:	a8 2e       	mov	r10, r24
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <vfprintf+0x2d4>
    12f0:	b8 2c       	mov	r11, r8
    12f2:	a3 2c       	mov	r10, r3
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <vfprintf+0x2d6>
    12f6:	b8 2c       	mov	r11, r8
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <vfprintf+0x2d6>
    12fa:	b9 2c       	mov	r11, r9
    12fc:	a4 fe       	sbrs	r10, 4
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <vfprintf+0x2f8>
    1300:	fe 01       	movw	r30, r28
    1302:	e8 0d       	add	r30, r8
    1304:	f1 1d       	adc	r31, r1
    1306:	80 81       	ld	r24, Z
    1308:	80 33       	cpi	r24, 0x30	; 48
    130a:	21 f4       	brne	.+8      	; 0x1314 <vfprintf+0x2ee>
    130c:	9a 2d       	mov	r25, r10
    130e:	99 7e       	andi	r25, 0xE9	; 233
    1310:	a9 2e       	mov	r10, r25
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <vfprintf+0x300>
    1314:	a2 fe       	sbrs	r10, 2
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <vfprintf+0x2fe>
    1318:	b3 94       	inc	r11
    131a:	b3 94       	inc	r11
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <vfprintf+0x300>
    131e:	8a 2d       	mov	r24, r10
    1320:	86 78       	andi	r24, 0x86	; 134
    1322:	09 f0       	breq	.+2      	; 0x1326 <vfprintf+0x300>
    1324:	b3 94       	inc	r11
    1326:	a3 fc       	sbrc	r10, 3
    1328:	11 c0       	rjmp	.+34     	; 0x134c <vfprintf+0x326>
    132a:	a0 fe       	sbrs	r10, 0
    132c:	06 c0       	rjmp	.+12     	; 0x133a <vfprintf+0x314>
    132e:	b2 14       	cp	r11, r2
    1330:	88 f4       	brcc	.+34     	; 0x1354 <vfprintf+0x32e>
    1332:	28 0c       	add	r2, r8
    1334:	92 2c       	mov	r9, r2
    1336:	9b 18       	sub	r9, r11
    1338:	0e c0       	rjmp	.+28     	; 0x1356 <vfprintf+0x330>
    133a:	b2 14       	cp	r11, r2
    133c:	60 f4       	brcc	.+24     	; 0x1356 <vfprintf+0x330>
    133e:	b6 01       	movw	r22, r12
    1340:	80 e2       	ldi	r24, 0x20	; 32
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    1348:	b3 94       	inc	r11
    134a:	f7 cf       	rjmp	.-18     	; 0x133a <vfprintf+0x314>
    134c:	b2 14       	cp	r11, r2
    134e:	18 f4       	brcc	.+6      	; 0x1356 <vfprintf+0x330>
    1350:	2b 18       	sub	r2, r11
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <vfprintf+0x332>
    1354:	98 2c       	mov	r9, r8
    1356:	21 2c       	mov	r2, r1
    1358:	a4 fe       	sbrs	r10, 4
    135a:	10 c0       	rjmp	.+32     	; 0x137c <vfprintf+0x356>
    135c:	b6 01       	movw	r22, r12
    135e:	80 e3       	ldi	r24, 0x30	; 48
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    1366:	a2 fe       	sbrs	r10, 2
    1368:	17 c0       	rjmp	.+46     	; 0x1398 <vfprintf+0x372>
    136a:	a1 fc       	sbrc	r10, 1
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <vfprintf+0x34e>
    136e:	88 e7       	ldi	r24, 0x78	; 120
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <vfprintf+0x352>
    1374:	88 e5       	ldi	r24, 0x58	; 88
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	b6 01       	movw	r22, r12
    137a:	0c c0       	rjmp	.+24     	; 0x1394 <vfprintf+0x36e>
    137c:	8a 2d       	mov	r24, r10
    137e:	86 78       	andi	r24, 0x86	; 134
    1380:	59 f0       	breq	.+22     	; 0x1398 <vfprintf+0x372>
    1382:	a1 fe       	sbrs	r10, 1
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0x364>
    1386:	8b e2       	ldi	r24, 0x2B	; 43
    1388:	01 c0       	rjmp	.+2      	; 0x138c <vfprintf+0x366>
    138a:	80 e2       	ldi	r24, 0x20	; 32
    138c:	a7 fc       	sbrc	r10, 7
    138e:	8d e2       	ldi	r24, 0x2D	; 45
    1390:	b6 01       	movw	r22, r12
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    1398:	89 14       	cp	r8, r9
    139a:	38 f4       	brcc	.+14     	; 0x13aa <vfprintf+0x384>
    139c:	b6 01       	movw	r22, r12
    139e:	80 e3       	ldi	r24, 0x30	; 48
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    13a6:	9a 94       	dec	r9
    13a8:	f7 cf       	rjmp	.-18     	; 0x1398 <vfprintf+0x372>
    13aa:	8a 94       	dec	r8
    13ac:	f3 01       	movw	r30, r6
    13ae:	e8 0d       	add	r30, r8
    13b0:	f1 1d       	adc	r31, r1
    13b2:	80 81       	ld	r24, Z
    13b4:	b6 01       	movw	r22, r12
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    13bc:	81 10       	cpse	r8, r1
    13be:	f5 cf       	rjmp	.-22     	; 0x13aa <vfprintf+0x384>
    13c0:	22 20       	and	r2, r2
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <vfprintf+0x3a0>
    13c4:	42 ce       	rjmp	.-892    	; 0x104a <vfprintf+0x24>
    13c6:	b6 01       	movw	r22, r12
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 4e 0b 	call	0x169c	; 0x169c <fputc>
    13d0:	2a 94       	dec	r2
    13d2:	f6 cf       	rjmp	.-20     	; 0x13c0 <vfprintf+0x39a>
    13d4:	f6 01       	movw	r30, r12
    13d6:	86 81       	ldd	r24, Z+6	; 0x06
    13d8:	97 81       	ldd	r25, Z+7	; 0x07
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0x3ba>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	9f ef       	ldi	r25, 0xFF	; 255
    13e0:	2b 96       	adiw	r28, 0x0b	; 11
    13e2:	e2 e1       	ldi	r30, 0x12	; 18
    13e4:	0c 94 36 0c 	jmp	0x186c	; 0x186c <__epilogue_restores__>

000013e8 <calloc>:
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	86 9f       	mul	r24, r22
    13f2:	80 01       	movw	r16, r0
    13f4:	87 9f       	mul	r24, r23
    13f6:	10 0d       	add	r17, r0
    13f8:	96 9f       	mul	r25, r22
    13fa:	10 0d       	add	r17, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	c8 01       	movw	r24, r16
    1400:	0e 94 10 0a 	call	0x1420	; 0x1420 <malloc>
    1404:	ec 01       	movw	r28, r24
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	29 f0       	breq	.+10     	; 0x1414 <calloc+0x2c>
    140a:	a8 01       	movw	r20, r16
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	0e 94 3c 0b 	call	0x1678	; 0x1678 <memset>
    1414:	ce 01       	movw	r24, r28
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <malloc>:
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	91 05       	cpc	r25, r1
    142c:	10 f4       	brcc	.+4      	; 0x1432 <malloc+0x12>
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <__flp>
    1436:	f0 91 f8 01 	lds	r31, 0x01F8	; 0x8001f8 <__flp+0x1>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	a0 e0       	ldi	r26, 0x00	; 0
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	30 97       	sbiw	r30, 0x00	; 0
    1444:	19 f1       	breq	.+70     	; 0x148c <malloc+0x6c>
    1446:	40 81       	ld	r20, Z
    1448:	51 81       	ldd	r21, Z+1	; 0x01
    144a:	02 81       	ldd	r16, Z+2	; 0x02
    144c:	13 81       	ldd	r17, Z+3	; 0x03
    144e:	48 17       	cp	r20, r24
    1450:	59 07       	cpc	r21, r25
    1452:	c8 f0       	brcs	.+50     	; 0x1486 <malloc+0x66>
    1454:	84 17       	cp	r24, r20
    1456:	95 07       	cpc	r25, r21
    1458:	69 f4       	brne	.+26     	; 0x1474 <malloc+0x54>
    145a:	10 97       	sbiw	r26, 0x00	; 0
    145c:	31 f0       	breq	.+12     	; 0x146a <malloc+0x4a>
    145e:	12 96       	adiw	r26, 0x02	; 2
    1460:	0c 93       	st	X, r16
    1462:	12 97       	sbiw	r26, 0x02	; 2
    1464:	13 96       	adiw	r26, 0x03	; 3
    1466:	1c 93       	st	X, r17
    1468:	27 c0       	rjmp	.+78     	; 0x14b8 <malloc+0x98>
    146a:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <__flp>
    146e:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <__flp+0x1>
    1472:	22 c0       	rjmp	.+68     	; 0x14b8 <malloc+0x98>
    1474:	21 15       	cp	r18, r1
    1476:	31 05       	cpc	r19, r1
    1478:	19 f0       	breq	.+6      	; 0x1480 <malloc+0x60>
    147a:	42 17       	cp	r20, r18
    147c:	53 07       	cpc	r21, r19
    147e:	18 f4       	brcc	.+6      	; 0x1486 <malloc+0x66>
    1480:	9a 01       	movw	r18, r20
    1482:	bd 01       	movw	r22, r26
    1484:	ef 01       	movw	r28, r30
    1486:	df 01       	movw	r26, r30
    1488:	f8 01       	movw	r30, r16
    148a:	db cf       	rjmp	.-74     	; 0x1442 <malloc+0x22>
    148c:	21 15       	cp	r18, r1
    148e:	31 05       	cpc	r19, r1
    1490:	f9 f0       	breq	.+62     	; 0x14d0 <malloc+0xb0>
    1492:	28 1b       	sub	r18, r24
    1494:	39 0b       	sbc	r19, r25
    1496:	24 30       	cpi	r18, 0x04	; 4
    1498:	31 05       	cpc	r19, r1
    149a:	80 f4       	brcc	.+32     	; 0x14bc <malloc+0x9c>
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	61 15       	cp	r22, r1
    14a2:	71 05       	cpc	r23, r1
    14a4:	21 f0       	breq	.+8      	; 0x14ae <malloc+0x8e>
    14a6:	fb 01       	movw	r30, r22
    14a8:	93 83       	std	Z+3, r25	; 0x03
    14aa:	82 83       	std	Z+2, r24	; 0x02
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <malloc+0x96>
    14ae:	90 93 f8 01 	sts	0x01F8, r25	; 0x8001f8 <__flp+0x1>
    14b2:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <__flp>
    14b6:	fe 01       	movw	r30, r28
    14b8:	32 96       	adiw	r30, 0x02	; 2
    14ba:	44 c0       	rjmp	.+136    	; 0x1544 <malloc+0x124>
    14bc:	fe 01       	movw	r30, r28
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	81 93       	st	Z+, r24
    14c4:	91 93       	st	Z+, r25
    14c6:	22 50       	subi	r18, 0x02	; 2
    14c8:	31 09       	sbc	r19, r1
    14ca:	39 83       	std	Y+1, r19	; 0x01
    14cc:	28 83       	st	Y, r18
    14ce:	3a c0       	rjmp	.+116    	; 0x1544 <malloc+0x124>
    14d0:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    14d4:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    14d8:	23 2b       	or	r18, r19
    14da:	41 f4       	brne	.+16     	; 0x14ec <malloc+0xcc>
    14dc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
    14e0:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
    14e4:	30 93 f6 01 	sts	0x01F6, r19	; 0x8001f6 <__brkval+0x1>
    14e8:	20 93 f5 01 	sts	0x01F5, r18	; 0x8001f5 <__brkval>
    14ec:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
    14f0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
    14f4:	21 15       	cp	r18, r1
    14f6:	31 05       	cpc	r19, r1
    14f8:	41 f4       	brne	.+16     	; 0x150a <malloc+0xea>
    14fa:	2d b7       	in	r18, 0x3d	; 61
    14fc:	3e b7       	in	r19, 0x3e	; 62
    14fe:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
    1502:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
    1506:	24 1b       	sub	r18, r20
    1508:	35 0b       	sbc	r19, r21
    150a:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <__brkval>
    150e:	f0 91 f6 01 	lds	r31, 0x01F6	; 0x8001f6 <__brkval+0x1>
    1512:	e2 17       	cp	r30, r18
    1514:	f3 07       	cpc	r31, r19
    1516:	a0 f4       	brcc	.+40     	; 0x1540 <malloc+0x120>
    1518:	2e 1b       	sub	r18, r30
    151a:	3f 0b       	sbc	r19, r31
    151c:	28 17       	cp	r18, r24
    151e:	39 07       	cpc	r19, r25
    1520:	78 f0       	brcs	.+30     	; 0x1540 <malloc+0x120>
    1522:	ac 01       	movw	r20, r24
    1524:	4e 5f       	subi	r20, 0xFE	; 254
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	24 17       	cp	r18, r20
    152a:	35 07       	cpc	r19, r21
    152c:	48 f0       	brcs	.+18     	; 0x1540 <malloc+0x120>
    152e:	4e 0f       	add	r20, r30
    1530:	5f 1f       	adc	r21, r31
    1532:	50 93 f6 01 	sts	0x01F6, r21	; 0x8001f6 <__brkval+0x1>
    1536:	40 93 f5 01 	sts	0x01F5, r20	; 0x8001f5 <__brkval>
    153a:	81 93       	st	Z+, r24
    153c:	91 93       	st	Z+, r25
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <malloc+0x124>
    1540:	e0 e0       	ldi	r30, 0x00	; 0
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	cf 01       	movw	r24, r30
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <free>:
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	09 f4       	brne	.+2      	; 0x155a <free+0xa>
    1558:	81 c0       	rjmp	.+258    	; 0x165c <free+0x10c>
    155a:	fc 01       	movw	r30, r24
    155c:	32 97       	sbiw	r30, 0x02	; 2
    155e:	13 82       	std	Z+3, r1	; 0x03
    1560:	12 82       	std	Z+2, r1	; 0x02
    1562:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <__flp>
    1566:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <__flp+0x1>
    156a:	10 97       	sbiw	r26, 0x00	; 0
    156c:	81 f4       	brne	.+32     	; 0x158e <free+0x3e>
    156e:	20 81       	ld	r18, Z
    1570:	31 81       	ldd	r19, Z+1	; 0x01
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    157a:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    157e:	28 17       	cp	r18, r24
    1580:	39 07       	cpc	r19, r25
    1582:	51 f5       	brne	.+84     	; 0x15d8 <free+0x88>
    1584:	f0 93 f6 01 	sts	0x01F6, r31	; 0x8001f6 <__brkval+0x1>
    1588:	e0 93 f5 01 	sts	0x01F5, r30	; 0x8001f5 <__brkval>
    158c:	67 c0       	rjmp	.+206    	; 0x165c <free+0x10c>
    158e:	ed 01       	movw	r28, r26
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	ce 17       	cp	r28, r30
    1596:	df 07       	cpc	r29, r31
    1598:	40 f4       	brcc	.+16     	; 0x15aa <free+0x5a>
    159a:	4a 81       	ldd	r20, Y+2	; 0x02
    159c:	5b 81       	ldd	r21, Y+3	; 0x03
    159e:	9e 01       	movw	r18, r28
    15a0:	41 15       	cp	r20, r1
    15a2:	51 05       	cpc	r21, r1
    15a4:	f1 f0       	breq	.+60     	; 0x15e2 <free+0x92>
    15a6:	ea 01       	movw	r28, r20
    15a8:	f5 cf       	rjmp	.-22     	; 0x1594 <free+0x44>
    15aa:	d3 83       	std	Z+3, r29	; 0x03
    15ac:	c2 83       	std	Z+2, r28	; 0x02
    15ae:	40 81       	ld	r20, Z
    15b0:	51 81       	ldd	r21, Z+1	; 0x01
    15b2:	84 0f       	add	r24, r20
    15b4:	95 1f       	adc	r25, r21
    15b6:	c8 17       	cp	r28, r24
    15b8:	d9 07       	cpc	r29, r25
    15ba:	59 f4       	brne	.+22     	; 0x15d2 <free+0x82>
    15bc:	88 81       	ld	r24, Y
    15be:	99 81       	ldd	r25, Y+1	; 0x01
    15c0:	84 0f       	add	r24, r20
    15c2:	95 1f       	adc	r25, r21
    15c4:	02 96       	adiw	r24, 0x02	; 2
    15c6:	91 83       	std	Z+1, r25	; 0x01
    15c8:	80 83       	st	Z, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	9b 81       	ldd	r25, Y+3	; 0x03
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02
    15d2:	21 15       	cp	r18, r1
    15d4:	31 05       	cpc	r19, r1
    15d6:	29 f4       	brne	.+10     	; 0x15e2 <free+0x92>
    15d8:	f0 93 f8 01 	sts	0x01F8, r31	; 0x8001f8 <__flp+0x1>
    15dc:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <__flp>
    15e0:	3d c0       	rjmp	.+122    	; 0x165c <free+0x10c>
    15e2:	e9 01       	movw	r28, r18
    15e4:	fb 83       	std	Y+3, r31	; 0x03
    15e6:	ea 83       	std	Y+2, r30	; 0x02
    15e8:	49 91       	ld	r20, Y+
    15ea:	59 91       	ld	r21, Y+
    15ec:	c4 0f       	add	r28, r20
    15ee:	d5 1f       	adc	r29, r21
    15f0:	ec 17       	cp	r30, r28
    15f2:	fd 07       	cpc	r31, r29
    15f4:	61 f4       	brne	.+24     	; 0x160e <free+0xbe>
    15f6:	80 81       	ld	r24, Z
    15f8:	91 81       	ldd	r25, Z+1	; 0x01
    15fa:	84 0f       	add	r24, r20
    15fc:	95 1f       	adc	r25, r21
    15fe:	02 96       	adiw	r24, 0x02	; 2
    1600:	e9 01       	movw	r28, r18
    1602:	99 83       	std	Y+1, r25	; 0x01
    1604:	88 83       	st	Y, r24
    1606:	82 81       	ldd	r24, Z+2	; 0x02
    1608:	93 81       	ldd	r25, Z+3	; 0x03
    160a:	9b 83       	std	Y+3, r25	; 0x03
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	e0 e0       	ldi	r30, 0x00	; 0
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	12 96       	adiw	r26, 0x02	; 2
    1614:	8d 91       	ld	r24, X+
    1616:	9c 91       	ld	r25, X
    1618:	13 97       	sbiw	r26, 0x03	; 3
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	19 f0       	breq	.+6      	; 0x1624 <free+0xd4>
    161e:	fd 01       	movw	r30, r26
    1620:	dc 01       	movw	r26, r24
    1622:	f7 cf       	rjmp	.-18     	; 0x1612 <free+0xc2>
    1624:	8d 91       	ld	r24, X+
    1626:	9c 91       	ld	r25, X
    1628:	11 97       	sbiw	r26, 0x01	; 1
    162a:	9d 01       	movw	r18, r26
    162c:	2e 5f       	subi	r18, 0xFE	; 254
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	82 0f       	add	r24, r18
    1632:	93 1f       	adc	r25, r19
    1634:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <__brkval>
    1638:	30 91 f6 01 	lds	r19, 0x01F6	; 0x8001f6 <__brkval+0x1>
    163c:	28 17       	cp	r18, r24
    163e:	39 07       	cpc	r19, r25
    1640:	69 f4       	brne	.+26     	; 0x165c <free+0x10c>
    1642:	30 97       	sbiw	r30, 0x00	; 0
    1644:	29 f4       	brne	.+10     	; 0x1650 <free+0x100>
    1646:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <__flp+0x1>
    164a:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <__flp>
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <free+0x104>
    1650:	13 82       	std	Z+3, r1	; 0x03
    1652:	12 82       	std	Z+2, r1	; 0x02
    1654:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <__brkval+0x1>
    1658:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <__brkval>
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	08 95       	ret

00001662 <strnlen_P>:
    1662:	fc 01       	movw	r30, r24
    1664:	05 90       	lpm	r0, Z+
    1666:	61 50       	subi	r22, 0x01	; 1
    1668:	70 40       	sbci	r23, 0x00	; 0
    166a:	01 10       	cpse	r0, r1
    166c:	d8 f7       	brcc	.-10     	; 0x1664 <strnlen_P+0x2>
    166e:	80 95       	com	r24
    1670:	90 95       	com	r25
    1672:	8e 0f       	add	r24, r30
    1674:	9f 1f       	adc	r25, r31
    1676:	08 95       	ret

00001678 <memset>:
    1678:	dc 01       	movw	r26, r24
    167a:	01 c0       	rjmp	.+2      	; 0x167e <memset+0x6>
    167c:	6d 93       	st	X+, r22
    167e:	41 50       	subi	r20, 0x01	; 1
    1680:	50 40       	sbci	r21, 0x00	; 0
    1682:	e0 f7       	brcc	.-8      	; 0x167c <memset+0x4>
    1684:	08 95       	ret

00001686 <strnlen>:
    1686:	fc 01       	movw	r30, r24
    1688:	61 50       	subi	r22, 0x01	; 1
    168a:	70 40       	sbci	r23, 0x00	; 0
    168c:	01 90       	ld	r0, Z+
    168e:	01 10       	cpse	r0, r1
    1690:	d8 f7       	brcc	.-10     	; 0x1688 <strnlen+0x2>
    1692:	80 95       	com	r24
    1694:	90 95       	com	r25
    1696:	8e 0f       	add	r24, r30
    1698:	9f 1f       	adc	r25, r31
    169a:	08 95       	ret

0000169c <fputc>:
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	fb 01       	movw	r30, r22
    16a6:	23 81       	ldd	r18, Z+3	; 0x03
    16a8:	21 fd       	sbrc	r18, 1
    16aa:	03 c0       	rjmp	.+6      	; 0x16b2 <fputc+0x16>
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	9f ef       	ldi	r25, 0xFF	; 255
    16b0:	2c c0       	rjmp	.+88     	; 0x170a <fputc+0x6e>
    16b2:	22 ff       	sbrs	r18, 2
    16b4:	16 c0       	rjmp	.+44     	; 0x16e2 <fputc+0x46>
    16b6:	46 81       	ldd	r20, Z+6	; 0x06
    16b8:	57 81       	ldd	r21, Z+7	; 0x07
    16ba:	24 81       	ldd	r18, Z+4	; 0x04
    16bc:	35 81       	ldd	r19, Z+5	; 0x05
    16be:	42 17       	cp	r20, r18
    16c0:	53 07       	cpc	r21, r19
    16c2:	44 f4       	brge	.+16     	; 0x16d4 <fputc+0x38>
    16c4:	a0 81       	ld	r26, Z
    16c6:	b1 81       	ldd	r27, Z+1	; 0x01
    16c8:	9d 01       	movw	r18, r26
    16ca:	2f 5f       	subi	r18, 0xFF	; 255
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	31 83       	std	Z+1, r19	; 0x01
    16d0:	20 83       	st	Z, r18
    16d2:	8c 93       	st	X, r24
    16d4:	26 81       	ldd	r18, Z+6	; 0x06
    16d6:	37 81       	ldd	r19, Z+7	; 0x07
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	37 83       	std	Z+7, r19	; 0x07
    16de:	26 83       	std	Z+6, r18	; 0x06
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <fputc+0x6e>
    16e2:	8b 01       	movw	r16, r22
    16e4:	ec 01       	movw	r28, r24
    16e6:	fb 01       	movw	r30, r22
    16e8:	00 84       	ldd	r0, Z+8	; 0x08
    16ea:	f1 85       	ldd	r31, Z+9	; 0x09
    16ec:	e0 2d       	mov	r30, r0
    16ee:	09 95       	icall
    16f0:	89 2b       	or	r24, r25
    16f2:	e1 f6       	brne	.-72     	; 0x16ac <fputc+0x10>
    16f4:	d8 01       	movw	r26, r16
    16f6:	16 96       	adiw	r26, 0x06	; 6
    16f8:	8d 91       	ld	r24, X+
    16fa:	9c 91       	ld	r25, X
    16fc:	17 97       	sbiw	r26, 0x07	; 7
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	17 96       	adiw	r26, 0x07	; 7
    1702:	9c 93       	st	X, r25
    1704:	8e 93       	st	-X, r24
    1706:	16 97       	sbiw	r26, 0x06	; 6
    1708:	ce 01       	movw	r24, r28
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	0f 91       	pop	r16
    1712:	08 95       	ret

00001714 <__ultoa_invert>:
    1714:	fa 01       	movw	r30, r20
    1716:	aa 27       	eor	r26, r26
    1718:	28 30       	cpi	r18, 0x08	; 8
    171a:	51 f1       	breq	.+84     	; 0x1770 <__ultoa_invert+0x5c>
    171c:	20 31       	cpi	r18, 0x10	; 16
    171e:	81 f1       	breq	.+96     	; 0x1780 <__ultoa_invert+0x6c>
    1720:	e8 94       	clt
    1722:	6f 93       	push	r22
    1724:	6e 7f       	andi	r22, 0xFE	; 254
    1726:	6e 5f       	subi	r22, 0xFE	; 254
    1728:	7f 4f       	sbci	r23, 0xFF	; 255
    172a:	8f 4f       	sbci	r24, 0xFF	; 255
    172c:	9f 4f       	sbci	r25, 0xFF	; 255
    172e:	af 4f       	sbci	r26, 0xFF	; 255
    1730:	b1 e0       	ldi	r27, 0x01	; 1
    1732:	3e d0       	rcall	.+124    	; 0x17b0 <__ultoa_invert+0x9c>
    1734:	b4 e0       	ldi	r27, 0x04	; 4
    1736:	3c d0       	rcall	.+120    	; 0x17b0 <__ultoa_invert+0x9c>
    1738:	67 0f       	add	r22, r23
    173a:	78 1f       	adc	r23, r24
    173c:	89 1f       	adc	r24, r25
    173e:	9a 1f       	adc	r25, r26
    1740:	a1 1d       	adc	r26, r1
    1742:	68 0f       	add	r22, r24
    1744:	79 1f       	adc	r23, r25
    1746:	8a 1f       	adc	r24, r26
    1748:	91 1d       	adc	r25, r1
    174a:	a1 1d       	adc	r26, r1
    174c:	6a 0f       	add	r22, r26
    174e:	71 1d       	adc	r23, r1
    1750:	81 1d       	adc	r24, r1
    1752:	91 1d       	adc	r25, r1
    1754:	a1 1d       	adc	r26, r1
    1756:	20 d0       	rcall	.+64     	; 0x1798 <__ultoa_invert+0x84>
    1758:	09 f4       	brne	.+2      	; 0x175c <__ultoa_invert+0x48>
    175a:	68 94       	set
    175c:	3f 91       	pop	r19
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	26 9f       	mul	r18, r22
    1762:	11 24       	eor	r1, r1
    1764:	30 19       	sub	r19, r0
    1766:	30 5d       	subi	r19, 0xD0	; 208
    1768:	31 93       	st	Z+, r19
    176a:	de f6       	brtc	.-74     	; 0x1722 <__ultoa_invert+0xe>
    176c:	cf 01       	movw	r24, r30
    176e:	08 95       	ret
    1770:	46 2f       	mov	r20, r22
    1772:	47 70       	andi	r20, 0x07	; 7
    1774:	40 5d       	subi	r20, 0xD0	; 208
    1776:	41 93       	st	Z+, r20
    1778:	b3 e0       	ldi	r27, 0x03	; 3
    177a:	0f d0       	rcall	.+30     	; 0x179a <__ultoa_invert+0x86>
    177c:	c9 f7       	brne	.-14     	; 0x1770 <__ultoa_invert+0x5c>
    177e:	f6 cf       	rjmp	.-20     	; 0x176c <__ultoa_invert+0x58>
    1780:	46 2f       	mov	r20, r22
    1782:	4f 70       	andi	r20, 0x0F	; 15
    1784:	40 5d       	subi	r20, 0xD0	; 208
    1786:	4a 33       	cpi	r20, 0x3A	; 58
    1788:	18 f0       	brcs	.+6      	; 0x1790 <__ultoa_invert+0x7c>
    178a:	49 5d       	subi	r20, 0xD9	; 217
    178c:	31 fd       	sbrc	r19, 1
    178e:	40 52       	subi	r20, 0x20	; 32
    1790:	41 93       	st	Z+, r20
    1792:	02 d0       	rcall	.+4      	; 0x1798 <__ultoa_invert+0x84>
    1794:	a9 f7       	brne	.-22     	; 0x1780 <__ultoa_invert+0x6c>
    1796:	ea cf       	rjmp	.-44     	; 0x176c <__ultoa_invert+0x58>
    1798:	b4 e0       	ldi	r27, 0x04	; 4
    179a:	a6 95       	lsr	r26
    179c:	97 95       	ror	r25
    179e:	87 95       	ror	r24
    17a0:	77 95       	ror	r23
    17a2:	67 95       	ror	r22
    17a4:	ba 95       	dec	r27
    17a6:	c9 f7       	brne	.-14     	; 0x179a <__ultoa_invert+0x86>
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	61 05       	cpc	r22, r1
    17ac:	71 05       	cpc	r23, r1
    17ae:	08 95       	ret
    17b0:	9b 01       	movw	r18, r22
    17b2:	ac 01       	movw	r20, r24
    17b4:	0a 2e       	mov	r0, r26
    17b6:	06 94       	lsr	r0
    17b8:	57 95       	ror	r21
    17ba:	47 95       	ror	r20
    17bc:	37 95       	ror	r19
    17be:	27 95       	ror	r18
    17c0:	ba 95       	dec	r27
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <__ultoa_invert+0xa2>
    17c4:	62 0f       	add	r22, r18
    17c6:	73 1f       	adc	r23, r19
    17c8:	84 1f       	adc	r24, r20
    17ca:	95 1f       	adc	r25, r21
    17cc:	a0 1d       	adc	r26, r0
    17ce:	08 95       	ret

000017d0 <__divmodsi4>:
    17d0:	05 2e       	mov	r0, r21
    17d2:	97 fb       	bst	r25, 7
    17d4:	1e f4       	brtc	.+6      	; 0x17dc <__divmodsi4+0xc>
    17d6:	00 94       	com	r0
    17d8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__negsi2>
    17dc:	57 fd       	sbrc	r21, 7
    17de:	07 d0       	rcall	.+14     	; 0x17ee <__divmodsi4_neg2>
    17e0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodsi4>
    17e4:	07 fc       	sbrc	r0, 7
    17e6:	03 d0       	rcall	.+6      	; 0x17ee <__divmodsi4_neg2>
    17e8:	4e f4       	brtc	.+18     	; 0x17fc <__divmodsi4_exit>
    17ea:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__negsi2>

000017ee <__divmodsi4_neg2>:
    17ee:	50 95       	com	r21
    17f0:	40 95       	com	r20
    17f2:	30 95       	com	r19
    17f4:	21 95       	neg	r18
    17f6:	3f 4f       	sbci	r19, 0xFF	; 255
    17f8:	4f 4f       	sbci	r20, 0xFF	; 255
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255

000017fc <__divmodsi4_exit>:
    17fc:	08 95       	ret

000017fe <__negsi2>:
    17fe:	90 95       	com	r25
    1800:	80 95       	com	r24
    1802:	70 95       	com	r23
    1804:	61 95       	neg	r22
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	8f 4f       	sbci	r24, 0xFF	; 255
    180a:	9f 4f       	sbci	r25, 0xFF	; 255
    180c:	08 95       	ret

0000180e <__muluhisi3>:
    180e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__umulhisi3>
    1812:	a5 9f       	mul	r26, r21
    1814:	90 0d       	add	r25, r0
    1816:	b4 9f       	mul	r27, r20
    1818:	90 0d       	add	r25, r0
    181a:	a4 9f       	mul	r26, r20
    181c:	80 0d       	add	r24, r0
    181e:	91 1d       	adc	r25, r1
    1820:	11 24       	eor	r1, r1
    1822:	08 95       	ret

00001824 <__mulshisi3>:
    1824:	b7 ff       	sbrs	r27, 7
    1826:	0c 94 07 0c 	jmp	0x180e	; 0x180e <__muluhisi3>

0000182a <__mulohisi3>:
    182a:	0e 94 07 0c 	call	0x180e	; 0x180e <__muluhisi3>
    182e:	82 1b       	sub	r24, r18
    1830:	93 0b       	sbc	r25, r19
    1832:	08 95       	ret

00001834 <__prologue_saves__>:
    1834:	2f 92       	push	r2
    1836:	3f 92       	push	r3
    1838:	4f 92       	push	r4
    183a:	5f 92       	push	r5
    183c:	6f 92       	push	r6
    183e:	7f 92       	push	r7
    1840:	8f 92       	push	r8
    1842:	9f 92       	push	r9
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	ca 1b       	sub	r28, r26
    185e:	db 0b       	sbc	r29, r27
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	09 94       	ijmp

0000186c <__epilogue_restores__>:
    186c:	2a 88       	ldd	r2, Y+18	; 0x12
    186e:	39 88       	ldd	r3, Y+17	; 0x11
    1870:	48 88       	ldd	r4, Y+16	; 0x10
    1872:	5f 84       	ldd	r5, Y+15	; 0x0f
    1874:	6e 84       	ldd	r6, Y+14	; 0x0e
    1876:	7d 84       	ldd	r7, Y+13	; 0x0d
    1878:	8c 84       	ldd	r8, Y+12	; 0x0c
    187a:	9b 84       	ldd	r9, Y+11	; 0x0b
    187c:	aa 84       	ldd	r10, Y+10	; 0x0a
    187e:	b9 84       	ldd	r11, Y+9	; 0x09
    1880:	c8 84       	ldd	r12, Y+8	; 0x08
    1882:	df 80       	ldd	r13, Y+7	; 0x07
    1884:	ee 80       	ldd	r14, Y+6	; 0x06
    1886:	fd 80       	ldd	r15, Y+5	; 0x05
    1888:	0c 81       	ldd	r16, Y+4	; 0x04
    188a:	1b 81       	ldd	r17, Y+3	; 0x03
    188c:	aa 81       	ldd	r26, Y+2	; 0x02
    188e:	b9 81       	ldd	r27, Y+1	; 0x01
    1890:	ce 0f       	add	r28, r30
    1892:	d1 1d       	adc	r29, r1
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	ed 01       	movw	r28, r26
    18a0:	08 95       	ret

000018a2 <__udivmodsi4>:
    18a2:	a1 e2       	ldi	r26, 0x21	; 33
    18a4:	1a 2e       	mov	r1, r26
    18a6:	aa 1b       	sub	r26, r26
    18a8:	bb 1b       	sub	r27, r27
    18aa:	fd 01       	movw	r30, r26
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <__udivmodsi4_ep>

000018ae <__udivmodsi4_loop>:
    18ae:	aa 1f       	adc	r26, r26
    18b0:	bb 1f       	adc	r27, r27
    18b2:	ee 1f       	adc	r30, r30
    18b4:	ff 1f       	adc	r31, r31
    18b6:	a2 17       	cp	r26, r18
    18b8:	b3 07       	cpc	r27, r19
    18ba:	e4 07       	cpc	r30, r20
    18bc:	f5 07       	cpc	r31, r21
    18be:	20 f0       	brcs	.+8      	; 0x18c8 <__udivmodsi4_ep>
    18c0:	a2 1b       	sub	r26, r18
    18c2:	b3 0b       	sbc	r27, r19
    18c4:	e4 0b       	sbc	r30, r20
    18c6:	f5 0b       	sbc	r31, r21

000018c8 <__udivmodsi4_ep>:
    18c8:	66 1f       	adc	r22, r22
    18ca:	77 1f       	adc	r23, r23
    18cc:	88 1f       	adc	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	1a 94       	dec	r1
    18d2:	69 f7       	brne	.-38     	; 0x18ae <__udivmodsi4_loop>
    18d4:	60 95       	com	r22
    18d6:	70 95       	com	r23
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	9b 01       	movw	r18, r22
    18de:	ac 01       	movw	r20, r24
    18e0:	bd 01       	movw	r22, r26
    18e2:	cf 01       	movw	r24, r30
    18e4:	08 95       	ret

000018e6 <__umulhisi3>:
    18e6:	a2 9f       	mul	r26, r18
    18e8:	b0 01       	movw	r22, r0
    18ea:	b3 9f       	mul	r27, r19
    18ec:	c0 01       	movw	r24, r0
    18ee:	a3 9f       	mul	r26, r19
    18f0:	70 0d       	add	r23, r0
    18f2:	81 1d       	adc	r24, r1
    18f4:	11 24       	eor	r1, r1
    18f6:	91 1d       	adc	r25, r1
    18f8:	b2 9f       	mul	r27, r18
    18fa:	70 0d       	add	r23, r0
    18fc:	81 1d       	adc	r24, r1
    18fe:	11 24       	eor	r1, r1
    1900:	91 1d       	adc	r25, r1
    1902:	08 95       	ret

00001904 <_exit>:
    1904:	f8 94       	cli

00001906 <__stop_program>:
    1906:	ff cf       	rjmp	.-2      	; 0x1906 <__stop_program>
