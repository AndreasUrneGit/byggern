
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080015e  0080015e  00000dd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e2  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e92  00000000  00000000  000027de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3e  00000000  00000000  00003670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000725  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000868  00000000  00000000  00004e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 ee       	ldi	r30, 0xE2	; 226
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 35       	cpi	r26, 0x5E	; 94
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e5       	ldi	r26, 0x5E	; 94
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 36       	cpi	r26, 0x68	; 104
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  a6:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(){

	set_bit(TCCR3A, COM3A0);
  ae:	eb e8       	ldi	r30, 0x8B	; 139
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	set_bit(TCCR3B, CS00);
  b8:	ea e8       	ldi	r30, 0x8A	; 138
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	set_bit(TCCR3B, WGM12);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	set_bit(DDRD, PD4);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <USART_transmit>:
}

void USART_transmit(unsigned char data){
	// wait for empty transmit buffer

	loop_until_bit_is_set(UCSR0A, UDRE0);
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <USART_transmit>
	//put data into buffer, sends the data
	UDR0 = data;
  d4:	8c b9       	out	0x0c, r24	; 12
  d6:	08 95       	ret

000000d8 <USART_receive>:
}
unsigned char USART_receive( void ){
	// Wait for data to be received

	loop_until_bit_is_set(UCSR0A, RXC0);
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <USART_receive>
	// Get and return received data from buffer
	return UDR0;
  dc:	8c b1       	in	r24, 0x0c	; 12
  de:	08 95       	ret

000000e0 <USART_init>:
 */ 
#include "ATmega162_programdriver.h"

void USART_init(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  e0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
  e2:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)| (1 << USBS0) |(3<<UCSZ00);
  e8:	8e e8       	ldi	r24, 0x8E	; 142
  ea:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit, USART_receive);
  ec:	6c e6       	ldi	r22, 0x6C	; 108
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	88 e6       	ldi	r24, 0x68	; 104
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 02 02 	call	0x404	; 0x404 <fdevopen>
  f8:	08 95       	ret

000000fa <CAN_init>:
#include "CAN.h"


void CAN_init(uint8_t mode){
	
	mcp_2515_init(mode);
  fa:	0e 94 60 01 	call	0x2c0	; 0x2c0 <mcp_2515_init>
  fe:	08 95       	ret

00000100 <CAN_transmit>:
	
}


void CAN_transmit(CAN_msg* msg){
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	8c 01       	movw	r16, r24
	
	mcp_2515_write(MCP_TXB0SIDH, msg->id >> 3);
 10a:	fc 01       	movw	r30, r24
 10c:	60 81       	ld	r22, Z
 10e:	71 81       	ldd	r23, Z+1	; 0x01
 110:	76 95       	lsr	r23
 112:	67 95       	ror	r22
 114:	76 95       	lsr	r23
 116:	67 95       	ror	r22
 118:	76 95       	lsr	r23
 11a:	67 95       	ror	r22
 11c:	81 e3       	ldi	r24, 0x31	; 49
 11e:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_write>
	mcp_2515_write(MCP_TXB0SIDL, msg->id << 5);
 122:	f8 01       	movw	r30, r16
 124:	60 81       	ld	r22, Z
 126:	62 95       	swap	r22
 128:	66 0f       	add	r22, r22
 12a:	60 7e       	andi	r22, 0xE0	; 224
 12c:	82 e3       	ldi	r24, 0x32	; 50
 12e:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_write>
	mcp_2515_write(MCP_TXB0DLC, msg->length);
 132:	f8 01       	movw	r30, r16
 134:	62 81       	ldd	r22, Z+2	; 0x02
 136:	85 e3       	ldi	r24, 0x35	; 53
 138:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_write>
	
	for(int x = 0; x < msg->length; x++){
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	09 c0       	rjmp	.+18     	; 0x154 <CAN_transmit+0x54>
		mcp_2515_write(MCP_TXB0Dm + x, msg->data[x]);
 142:	f8 01       	movw	r30, r16
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	63 81       	ldd	r22, Z+3	; 0x03
 14a:	8c 2f       	mov	r24, r28
 14c:	8a 5c       	subi	r24, 0xCA	; 202
 14e:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_write>
	
	mcp_2515_write(MCP_TXB0SIDH, msg->id >> 3);
	mcp_2515_write(MCP_TXB0SIDL, msg->id << 5);
	mcp_2515_write(MCP_TXB0DLC, msg->length);
	
	for(int x = 0; x < msg->length; x++){
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	f8 01       	movw	r30, r16
 156:	82 81       	ldd	r24, Z+2	; 0x02
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	c8 17       	cp	r28, r24
 15c:	d9 07       	cpc	r29, r25
 15e:	8c f3       	brlt	.-30     	; 0x142 <CAN_transmit+0x42>
		mcp_2515_write(MCP_TXB0Dm + x, msg->data[x]);
	}
	
	mcp_2515_request_to_send(0);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 48 01 	call	0x290	; 0x290 <mcp_2515_request_to_send>
	
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <CAN_receive>:


CAN_msg CAN_receive(){
 170:	ff 92       	push	r15
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	8c 01       	movw	r16, r24
	
	CAN_msg received_message;
	
	uint8_t id_high = mcp_2515_read(MCP_RXB0SIDH) << 3;
 17c:	81 e6       	ldi	r24, 0x61	; 97
 17e:	0e 94 1a 01 	call	0x234	; 0x234 <mcp_2515_read>
 182:	c8 2f       	mov	r28, r24
 184:	cc 0f       	add	r28, r28
 186:	cc 0f       	add	r28, r28
 188:	cc 0f       	add	r28, r28
	uint8_t id_low = mcp_2515_read(MCP_RXB0SIDL) >> 5;
 18a:	82 e6       	ldi	r24, 0x62	; 98
 18c:	0e 94 1a 01 	call	0x234	; 0x234 <mcp_2515_read>
 190:	82 95       	swap	r24
 192:	86 95       	lsr	r24
 194:	87 70       	andi	r24, 0x07	; 7
	
	received_message.id = id_high + id_low;
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 0f       	add	r24, r28
 19a:	91 1d       	adc	r25, r1
 19c:	f8 01       	movw	r30, r16
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
	
	uint8_t length = mcp_2515_read(MCP_RXB0DLC);
 1a2:	85 e6       	ldi	r24, 0x65	; 101
 1a4:	0e 94 1a 01 	call	0x234	; 0x234 <mcp_2515_read>
 1a8:	f8 2e       	mov	r15, r24
	
	received_message.length = length;
 1aa:	f8 01       	movw	r30, r16
 1ac:	82 83       	std	Z+2, r24	; 0x02
	
	for(int x = 0; x < length; x++){
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	09 c0       	rjmp	.+18     	; 0x1c6 <CAN_receive+0x56>
		received_message.data[x] = mcp_2515_read(MCP_RXB0Dm + x);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	8a 59       	subi	r24, 0x9A	; 154
 1b8:	0e 94 1a 01 	call	0x234	; 0x234 <mcp_2515_read>
 1bc:	f8 01       	movw	r30, r16
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	83 83       	std	Z+3, r24	; 0x03
	
	uint8_t length = mcp_2515_read(MCP_RXB0DLC);
	
	received_message.length = length;
	
	for(int x = 0; x < length; x++){
 1c4:	21 96       	adiw	r28, 0x01	; 1
 1c6:	8f 2d       	mov	r24, r15
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	c8 17       	cp	r28, r24
 1cc:	d9 07       	cpc	r29, r25
 1ce:	94 f3       	brlt	.-28     	; 0x1b4 <CAN_receive+0x44>
		received_message.data[x] = mcp_2515_read(MCP_RXB0Dm + x);
	}
	
	// tells the MCP that the buffer is read
	mcp_2515_bit_modify(MCP_CANINTF, 1, 0);
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	61 e0       	ldi	r22, 0x01	; 1
 1d4:	8c e2       	ldi	r24, 0x2C	; 44
 1d6:	0e 94 2c 01 	call	0x258	; 0x258 <mcp_2515_bit_modify>
	
	return received_message;
}
 1da:	c8 01       	movw	r24, r16
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	08 95       	ret

000001e8 <mcp_2515_reset>:
	uint8_t status = spi_read();
	
	CAN_disable_SPI;
	
	return status;
}
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	80 ec       	ldi	r24, 0xC0	; 192
 1f0:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	83 ec       	ldi	r24, 0xC3	; 195
 1fc:	99 e0       	ldi	r25, 0x09	; 9
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <mcp_2515_reset+0x16>
 202:	00 c0       	rjmp	.+0      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <mcp_2515_write>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	d8 2f       	mov	r29, r24
 20e:	c6 2f       	mov	r28, r22
 210:	88 b3       	in	r24, 0x18	; 24
 212:	8f 7e       	andi	r24, 0xEF	; 239
 214:	88 bb       	out	0x18, r24	; 24
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 21c:	8d 2f       	mov	r24, r29
 21e:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 228:	88 b3       	in	r24, 0x18	; 24
 22a:	80 61       	ori	r24, 0x10	; 16
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <mcp_2515_read>:
 234:	cf 93       	push	r28
 236:	c8 2f       	mov	r28, r24
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	8f 7e       	andi	r24, 0xEF	; 239
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 244:	8c 2f       	mov	r24, r28
 246:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
 24a:	0e 94 8f 01 	call	0x31e	; 0x31e <spi_read>
 24e:	98 b3       	in	r25, 0x18	; 24
 250:	90 61       	ori	r25, 0x10	; 16
 252:	98 bb       	out	0x18, r25	; 24
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <mcp_2515_bit_modify>:

void mcp_2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	18 2f       	mov	r17, r24
 260:	d6 2f       	mov	r29, r22
 262:	c4 2f       	mov	r28, r20
	CAN_enable_SPI;
 264:	88 b3       	in	r24, 0x18	; 24
 266:	8f 7e       	andi	r24, 0xEF	; 239
 268:	88 bb       	out	0x18, r24	; 24
	
	spi_write(MCP_BITMOD);
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
	spi_write(address);
 270:	81 2f       	mov	r24, r17
 272:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
	spi_write(mask);
 276:	8d 2f       	mov	r24, r29
 278:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
	spi_write(data);
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
	
	CAN_disable_SPI;
 282:	88 b3       	in	r24, 0x18	; 24
 284:	80 61       	ori	r24, 0x10	; 16
 286:	88 bb       	out	0x18, r24	; 24
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	08 95       	ret

00000290 <mcp_2515_request_to_send>:

void mcp_2515_request_to_send(uint8_t buffer){
	CAN_enable_SPI;
 290:	98 b3       	in	r25, 0x18	; 24
 292:	9f 7e       	andi	r25, 0xEF	; 239
 294:	98 bb       	out	0x18, r25	; 24
	
	spi_write(MCP_RTS_TX + (0b1 << buffer));
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	a9 01       	movw	r20, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <mcp_2515_request_to_send+0x12>
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	8a 95       	dec	r24
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <mcp_2515_request_to_send+0xe>
 2a6:	ca 01       	movw	r24, r20
 2a8:	80 58       	subi	r24, 0x80	; 128
 2aa:	0e 94 8b 01 	call	0x316	; 0x316 <spi_write>
	
	CAN_disable_SPI;
 2ae:	88 b3       	in	r24, 0x18	; 24
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	88 bb       	out	0x18, r24	; 24
 2b4:	08 95       	ret

000002b6 <mcp_2515_set_mode>:
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
 2b6:	68 2f       	mov	r22, r24
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_write>
 2be:	08 95       	ret

000002c0 <mcp_2515_init>:
 *  Author: oystebw
 */ 

#include "CAN_controller.h"

void mcp_2515_init(uint8_t mode){
 2c0:	cf 93       	push	r28
 2c2:	c8 2f       	mov	r28, r24
	spi_init();
 2c4:	0e 94 75 01 	call	0x2ea	; 0x2ea <spi_init>
	mcp_2515_reset();
 2c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mcp_2515_reset>
	mcp_2515_set_mode(mode);
 2cc:	8c 2f       	mov	r24, r28
 2ce:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <mcp_2515_set_mode>
}
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <__vector_3>:
	//enable INT2 in the General Interrupt Control Register (GICR)
	set_bit(GICR, INT2);
	
}

ISR(INT2_vect){
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1

 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <spi_init>:
#include "SPI.h"

void spi_init(void){
	/* Set SCL, MOSI & PB4 to output, MISO and the rest to input */

	set_bit(DDRB, PB5);
 2ea:	87 b3       	in	r24, 0x17	; 23
 2ec:	80 62       	ori	r24, 0x20	; 32
 2ee:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB7);
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	80 68       	ori	r24, 0x80	; 128
 2f4:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB4);
 2f6:	87 b3       	in	r24, 0x17	; 23
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	87 bb       	out	0x17, r24	; 23
	set_bit(PORTB, PB4);
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	88 bb       	out	0x18, r24	; 24
	
	/* Enable SPI, set it in Master and set clock*/

	set_bit(SPCR, SPE);
 302:	8d b1       	in	r24, 0x0d	; 13
 304:	80 64       	ori	r24, 0x40	; 64
 306:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, MSTR);
 308:	8d b1       	in	r24, 0x0d	; 13
 30a:	80 61       	ori	r24, 0x10	; 16
 30c:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, SPR0);
 30e:	8d b1       	in	r24, 0x0d	; 13
 310:	81 60       	ori	r24, 0x01	; 1
 312:	8d b9       	out	0x0d, r24	; 13
 314:	08 95       	ret

00000316 <spi_write>:
}

void spi_write(uint8_t data){
	/* Start transmission */

	SPDR = data;
 316:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
 318:	77 9b       	sbis	0x0e, 7	; 14
 31a:	fe cf       	rjmp	.-4      	; 0x318 <spi_write+0x2>

}
 31c:	08 95       	ret

0000031e <spi_read>:

uint8_t spi_read(){
	
	SPDR = 0xFF;
 31e:	8f ef       	ldi	r24, 0xFF	; 255
 320:	8f b9       	out	0x0f, r24	; 15
	
	loop_until_bit_is_set(SPSR, SPIF);
 322:	77 9b       	sbis	0x0e, 7	; 14
 324:	fe cf       	rjmp	.-4      	; 0x322 <spi_read+0x4>
	
	return SPDR;
 326:	8f b1       	in	r24, 0x0f	; 15
 328:	08 95       	ret

0000032a <SRAM_init>:
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
}

void SRAM_init(){
	set_bit(MCUCR, SRE);
 32a:	85 b7       	in	r24, 0x35	; 53
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 330:	80 b7       	in	r24, 0x30	; 48
 332:	80 62       	ori	r24, 0x20	; 32
 334:	80 bf       	out	0x30, r24	; 48
 336:	08 95       	ret

00000338 <main>:
#include "joystick.h"
#include "menu.h"
#include "CAN.h"


int main(void){
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	cd b7       	in	r28, 0x3d	; 61
 33e:	de b7       	in	r29, 0x3e	; 62
 340:	ac 97       	sbiw	r28, 0x2c	; 44
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
    // enable global interrupt flags
	//interrupt_init();
	USART_init(MYUBRR);
 34c:	8f e1       	ldi	r24, 0x1F	; 31
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_init>
	SRAM_init();
 354:	0e 94 95 01 	call	0x32a	; 0x32a <SRAM_init>
	ADC_init();
 358:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	//oled_init_program();
	//menu_init();
	CAN_init(MODE_LOOPBACK);
 35c:	80 e4       	ldi	r24, 0x40	; 64
 35e:	0e 94 7d 00 	call	0xfa	; 0xfa <CAN_init>
	
	CAN_msg msg = {69, 6, "Hello"};
 362:	8b e0       	ldi	r24, 0x0B	; 11
 364:	e6 e0       	ldi	r30, 0x06	; 6
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	de 01       	movw	r26, r28
 36a:	11 96       	adiw	r26, 0x01	; 1
 36c:	01 90       	ld	r0, Z+
 36e:	0d 92       	st	X+, r0
 370:	8a 95       	dec	r24
 372:	e1 f7       	brne	.-8      	; 0x36c <main+0x34>
		
	CAN_msg msg2 = {71, 7, "Oystein"};
 374:	8b e0       	ldi	r24, 0x0B	; 11
 376:	e1 e1       	ldi	r30, 0x11	; 17
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	de 01       	movw	r26, r28
 37c:	1c 96       	adiw	r26, 0x0c	; 12
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	8a 95       	dec	r24
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x46>
	
	CAN_transmit(&msg);
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 80 00 	call	0x100	; 0x100 <CAN_transmit>
	
	CAN_msg received = CAN_receive();
 38e:	ce 01       	movw	r24, r28
 390:	47 96       	adiw	r24, 0x17	; 23
 392:	0e 94 b8 00 	call	0x170	; 0x170 <CAN_receive>
	
	CAN_transmit(&msg2);
 396:	ce 01       	movw	r24, r28
 398:	0c 96       	adiw	r24, 0x0c	; 12
 39a:	0e 94 80 00 	call	0x100	; 0x100 <CAN_transmit>
	
	CAN_msg r2 = CAN_receive();
 39e:	ce 01       	movw	r24, r28
 3a0:	82 96       	adiw	r24, 0x22	; 34
 3a2:	0e 94 b8 00 	call	0x170	; 0x170 <CAN_receive>
	
	printf("Message received! With length %d and id %d. The message is: %s\r\n", received.length, received.id, received.data);
 3a6:	29 8d       	ldd	r18, Y+25	; 0x19
 3a8:	ce 01       	movw	r24, r28
 3aa:	4a 96       	adiw	r24, 0x1a	; 26
 3ac:	9f 93       	push	r25
 3ae:	8f 93       	push	r24
 3b0:	88 8d       	ldd	r24, Y+24	; 0x18
 3b2:	8f 93       	push	r24
 3b4:	8f 89       	ldd	r24, Y+23	; 0x17
 3b6:	8f 93       	push	r24
 3b8:	1f 92       	push	r1
 3ba:	2f 93       	push	r18
 3bc:	0c e1       	ldi	r16, 0x1C	; 28
 3be:	11 e0       	ldi	r17, 0x01	; 1
 3c0:	1f 93       	push	r17
 3c2:	0f 93       	push	r16
 3c4:	0e 94 4d 02 	call	0x49a	; 0x49a <printf>
	
	printf("Message received! With length %d and id %d. The message is: %s\r\n", r2.length, r2.id, r2.data);
 3c8:	2c a1       	ldd	r18, Y+36	; 0x24
 3ca:	ce 01       	movw	r24, r28
 3cc:	85 96       	adiw	r24, 0x25	; 37
 3ce:	9f 93       	push	r25
 3d0:	8f 93       	push	r24
 3d2:	8b a1       	ldd	r24, Y+35	; 0x23
 3d4:	8f 93       	push	r24
 3d6:	8a a1       	ldd	r24, Y+34	; 0x22
 3d8:	8f 93       	push	r24
 3da:	1f 92       	push	r1
 3dc:	2f 93       	push	r18
 3de:	1f 93       	push	r17
 3e0:	0f 93       	push	r16
 3e2:	0e 94 4d 02 	call	0x49a	; 0x49a <printf>
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	8e e0       	ldi	r24, 0x0E	; 14
 3f6:	91 50       	subi	r25, 0x01	; 1
 3f8:	20 40       	sbci	r18, 0x00	; 0
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0xbe>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__DATA_REGION_LENGTH__>
 400:	00 00       	nop
 402:	f6 cf       	rjmp	.-20     	; 0x3f0 <main+0xb8>

00000404 <fdevopen>:
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	31 f4       	brne	.+12     	; 0x41c <fdevopen+0x18>
 410:	61 15       	cp	r22, r1
 412:	71 05       	cpc	r23, r1
 414:	19 f4       	brne	.+6      	; 0x41c <fdevopen+0x18>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	3a c0       	rjmp	.+116    	; 0x490 <fdevopen+0x8c>
 41c:	8b 01       	movw	r16, r22
 41e:	ec 01       	movw	r28, r24
 420:	6e e0       	ldi	r22, 0x0E	; 14
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 44 04 	call	0x888	; 0x888 <calloc>
 42c:	fc 01       	movw	r30, r24
 42e:	89 2b       	or	r24, r25
 430:	91 f3       	breq	.-28     	; 0x416 <fdevopen+0x12>
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	83 83       	std	Z+3, r24	; 0x03
 436:	01 15       	cp	r16, r1
 438:	11 05       	cpc	r17, r1
 43a:	71 f0       	breq	.+28     	; 0x458 <fdevopen+0x54>
 43c:	13 87       	std	Z+11, r17	; 0x0b
 43e:	02 87       	std	Z+10, r16	; 0x0a
 440:	81 e8       	ldi	r24, 0x81	; 129
 442:	83 83       	std	Z+3, r24	; 0x03
 444:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
 448:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
 44c:	89 2b       	or	r24, r25
 44e:	21 f4       	brne	.+8      	; 0x458 <fdevopen+0x54>
 450:	f0 93 5f 01 	sts	0x015F, r31	; 0x80015f <__data_end+0x1>
 454:	e0 93 5e 01 	sts	0x015E, r30	; 0x80015e <__data_end>
 458:	20 97       	sbiw	r28, 0x00	; 0
 45a:	c9 f0       	breq	.+50     	; 0x48e <fdevopen+0x8a>
 45c:	d1 87       	std	Z+9, r29	; 0x09
 45e:	c0 87       	std	Z+8, r28	; 0x08
 460:	83 81       	ldd	r24, Z+3	; 0x03
 462:	82 60       	ori	r24, 0x02	; 2
 464:	83 83       	std	Z+3, r24	; 0x03
 466:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x2>
 46a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x3>
 46e:	89 2b       	or	r24, r25
 470:	71 f4       	brne	.+28     	; 0x48e <fdevopen+0x8a>
 472:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <__data_end+0x3>
 476:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <__data_end+0x2>
 47a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end+0x4>
 47e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x5>
 482:	89 2b       	or	r24, r25
 484:	21 f4       	brne	.+8      	; 0x48e <fdevopen+0x8a>
 486:	f0 93 63 01 	sts	0x0163, r31	; 0x800163 <__data_end+0x5>
 48a:	e0 93 62 01 	sts	0x0162, r30	; 0x800162 <__data_end+0x4>
 48e:	cf 01       	movw	r24, r30
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	08 95       	ret

0000049a <printf>:
 49a:	a0 e0       	ldi	r26, 0x00	; 0
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e3 e5       	ldi	r30, 0x53	; 83
 4a0:	f2 e0       	ldi	r31, 0x02	; 2
 4a2:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__prologue_saves__+0x20>
 4a6:	ae 01       	movw	r20, r28
 4a8:	4b 5f       	subi	r20, 0xFB	; 251
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	fa 01       	movw	r30, r20
 4ae:	61 91       	ld	r22, Z+
 4b0:	71 91       	ld	r23, Z+
 4b2:	af 01       	movw	r20, r30
 4b4:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end+0x2>
 4b8:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x3>
 4bc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <vfprintf>
 4c0:	e2 e0       	ldi	r30, 0x02	; 2
 4c2:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__epilogue_restores__+0x20>

000004c6 <vfprintf>:
 4c6:	ab e0       	ldi	r26, 0x0B	; 11
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__prologue_saves__>
 4d2:	6c 01       	movw	r12, r24
 4d4:	7b 01       	movw	r14, r22
 4d6:	8a 01       	movw	r16, r20
 4d8:	fc 01       	movw	r30, r24
 4da:	17 82       	std	Z+7, r1	; 0x07
 4dc:	16 82       	std	Z+6, r1	; 0x06
 4de:	83 81       	ldd	r24, Z+3	; 0x03
 4e0:	81 ff       	sbrs	r24, 1
 4e2:	cc c1       	rjmp	.+920    	; 0x87c <__stack+0x37d>
 4e4:	ce 01       	movw	r24, r28
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	3c 01       	movw	r6, r24
 4ea:	f6 01       	movw	r30, r12
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	f7 01       	movw	r30, r14
 4f0:	93 fd       	sbrc	r25, 3
 4f2:	85 91       	lpm	r24, Z+
 4f4:	93 ff       	sbrs	r25, 3
 4f6:	81 91       	ld	r24, Z+
 4f8:	7f 01       	movw	r14, r30
 4fa:	88 23       	and	r24, r24
 4fc:	09 f4       	brne	.+2      	; 0x500 <__stack+0x1>
 4fe:	ba c1       	rjmp	.+884    	; 0x874 <__stack+0x375>
 500:	85 32       	cpi	r24, 0x25	; 37
 502:	39 f4       	brne	.+14     	; 0x512 <__stack+0x13>
 504:	93 fd       	sbrc	r25, 3
 506:	85 91       	lpm	r24, Z+
 508:	93 ff       	sbrs	r25, 3
 50a:	81 91       	ld	r24, Z+
 50c:	7f 01       	movw	r14, r30
 50e:	85 32       	cpi	r24, 0x25	; 37
 510:	29 f4       	brne	.+10     	; 0x51c <__stack+0x1d>
 512:	b6 01       	movw	r22, r12
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 51a:	e7 cf       	rjmp	.-50     	; 0x4ea <vfprintf+0x24>
 51c:	91 2c       	mov	r9, r1
 51e:	21 2c       	mov	r2, r1
 520:	31 2c       	mov	r3, r1
 522:	ff e1       	ldi	r31, 0x1F	; 31
 524:	f3 15       	cp	r31, r3
 526:	d8 f0       	brcs	.+54     	; 0x55e <__stack+0x5f>
 528:	8b 32       	cpi	r24, 0x2B	; 43
 52a:	79 f0       	breq	.+30     	; 0x54a <__stack+0x4b>
 52c:	38 f4       	brcc	.+14     	; 0x53c <__stack+0x3d>
 52e:	80 32       	cpi	r24, 0x20	; 32
 530:	79 f0       	breq	.+30     	; 0x550 <__stack+0x51>
 532:	83 32       	cpi	r24, 0x23	; 35
 534:	a1 f4       	brne	.+40     	; 0x55e <__stack+0x5f>
 536:	23 2d       	mov	r18, r3
 538:	20 61       	ori	r18, 0x10	; 16
 53a:	1d c0       	rjmp	.+58     	; 0x576 <__stack+0x77>
 53c:	8d 32       	cpi	r24, 0x2D	; 45
 53e:	61 f0       	breq	.+24     	; 0x558 <__stack+0x59>
 540:	80 33       	cpi	r24, 0x30	; 48
 542:	69 f4       	brne	.+26     	; 0x55e <__stack+0x5f>
 544:	23 2d       	mov	r18, r3
 546:	21 60       	ori	r18, 0x01	; 1
 548:	16 c0       	rjmp	.+44     	; 0x576 <__stack+0x77>
 54a:	83 2d       	mov	r24, r3
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	38 2e       	mov	r3, r24
 550:	e3 2d       	mov	r30, r3
 552:	e4 60       	ori	r30, 0x04	; 4
 554:	3e 2e       	mov	r3, r30
 556:	2a c0       	rjmp	.+84     	; 0x5ac <__stack+0xad>
 558:	f3 2d       	mov	r31, r3
 55a:	f8 60       	ori	r31, 0x08	; 8
 55c:	1d c0       	rjmp	.+58     	; 0x598 <__stack+0x99>
 55e:	37 fc       	sbrc	r3, 7
 560:	2d c0       	rjmp	.+90     	; 0x5bc <__stack+0xbd>
 562:	20 ed       	ldi	r18, 0xD0	; 208
 564:	28 0f       	add	r18, r24
 566:	2a 30       	cpi	r18, 0x0A	; 10
 568:	40 f0       	brcs	.+16     	; 0x57a <__stack+0x7b>
 56a:	8e 32       	cpi	r24, 0x2E	; 46
 56c:	b9 f4       	brne	.+46     	; 0x59c <__stack+0x9d>
 56e:	36 fc       	sbrc	r3, 6
 570:	81 c1       	rjmp	.+770    	; 0x874 <__stack+0x375>
 572:	23 2d       	mov	r18, r3
 574:	20 64       	ori	r18, 0x40	; 64
 576:	32 2e       	mov	r3, r18
 578:	19 c0       	rjmp	.+50     	; 0x5ac <__stack+0xad>
 57a:	36 fe       	sbrs	r3, 6
 57c:	06 c0       	rjmp	.+12     	; 0x58a <__stack+0x8b>
 57e:	8a e0       	ldi	r24, 0x0A	; 10
 580:	98 9e       	mul	r9, r24
 582:	20 0d       	add	r18, r0
 584:	11 24       	eor	r1, r1
 586:	92 2e       	mov	r9, r18
 588:	11 c0       	rjmp	.+34     	; 0x5ac <__stack+0xad>
 58a:	ea e0       	ldi	r30, 0x0A	; 10
 58c:	2e 9e       	mul	r2, r30
 58e:	20 0d       	add	r18, r0
 590:	11 24       	eor	r1, r1
 592:	22 2e       	mov	r2, r18
 594:	f3 2d       	mov	r31, r3
 596:	f0 62       	ori	r31, 0x20	; 32
 598:	3f 2e       	mov	r3, r31
 59a:	08 c0       	rjmp	.+16     	; 0x5ac <__stack+0xad>
 59c:	8c 36       	cpi	r24, 0x6C	; 108
 59e:	21 f4       	brne	.+8      	; 0x5a8 <__stack+0xa9>
 5a0:	83 2d       	mov	r24, r3
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	38 2e       	mov	r3, r24
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__stack+0xad>
 5a8:	88 36       	cpi	r24, 0x68	; 104
 5aa:	41 f4       	brne	.+16     	; 0x5bc <__stack+0xbd>
 5ac:	f7 01       	movw	r30, r14
 5ae:	93 fd       	sbrc	r25, 3
 5b0:	85 91       	lpm	r24, Z+
 5b2:	93 ff       	sbrs	r25, 3
 5b4:	81 91       	ld	r24, Z+
 5b6:	7f 01       	movw	r14, r30
 5b8:	81 11       	cpse	r24, r1
 5ba:	b3 cf       	rjmp	.-154    	; 0x522 <__stack+0x23>
 5bc:	98 2f       	mov	r25, r24
 5be:	9f 7d       	andi	r25, 0xDF	; 223
 5c0:	95 54       	subi	r25, 0x45	; 69
 5c2:	93 30       	cpi	r25, 0x03	; 3
 5c4:	28 f4       	brcc	.+10     	; 0x5d0 <__stack+0xd1>
 5c6:	0c 5f       	subi	r16, 0xFC	; 252
 5c8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ca:	9f e3       	ldi	r25, 0x3F	; 63
 5cc:	99 83       	std	Y+1, r25	; 0x01
 5ce:	0d c0       	rjmp	.+26     	; 0x5ea <__stack+0xeb>
 5d0:	83 36       	cpi	r24, 0x63	; 99
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <__stack+0xe1>
 5d4:	83 37       	cpi	r24, 0x73	; 115
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__stack+0xf5>
 5d8:	83 35       	cpi	r24, 0x53	; 83
 5da:	09 f0       	breq	.+2      	; 0x5de <__stack+0xdf>
 5dc:	59 c0       	rjmp	.+178    	; 0x690 <__stack+0x191>
 5de:	21 c0       	rjmp	.+66     	; 0x622 <__stack+0x123>
 5e0:	f8 01       	movw	r30, r16
 5e2:	80 81       	ld	r24, Z
 5e4:	89 83       	std	Y+1, r24	; 0x01
 5e6:	0e 5f       	subi	r16, 0xFE	; 254
 5e8:	1f 4f       	sbci	r17, 0xFF	; 255
 5ea:	88 24       	eor	r8, r8
 5ec:	83 94       	inc	r8
 5ee:	91 2c       	mov	r9, r1
 5f0:	53 01       	movw	r10, r6
 5f2:	13 c0       	rjmp	.+38     	; 0x61a <__stack+0x11b>
 5f4:	28 01       	movw	r4, r16
 5f6:	f2 e0       	ldi	r31, 0x02	; 2
 5f8:	4f 0e       	add	r4, r31
 5fa:	51 1c       	adc	r5, r1
 5fc:	f8 01       	movw	r30, r16
 5fe:	a0 80       	ld	r10, Z
 600:	b1 80       	ldd	r11, Z+1	; 0x01
 602:	36 fe       	sbrs	r3, 6
 604:	03 c0       	rjmp	.+6      	; 0x60c <__stack+0x10d>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <__stack+0x111>
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	7f ef       	ldi	r23, 0xFF	; 255
 610:	c5 01       	movw	r24, r10
 612:	0e 94 93 05 	call	0xb26	; 0xb26 <strnlen>
 616:	4c 01       	movw	r8, r24
 618:	82 01       	movw	r16, r4
 61a:	f3 2d       	mov	r31, r3
 61c:	ff 77       	andi	r31, 0x7F	; 127
 61e:	3f 2e       	mov	r3, r31
 620:	16 c0       	rjmp	.+44     	; 0x64e <__stack+0x14f>
 622:	28 01       	movw	r4, r16
 624:	22 e0       	ldi	r18, 0x02	; 2
 626:	42 0e       	add	r4, r18
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <__stack+0x13b>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <__stack+0x13f>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 81 05 	call	0xb02	; 0xb02 <strnlen_P>
 644:	4c 01       	movw	r8, r24
 646:	f3 2d       	mov	r31, r3
 648:	f0 68       	ori	r31, 0x80	; 128
 64a:	3f 2e       	mov	r3, r31
 64c:	82 01       	movw	r16, r4
 64e:	33 fc       	sbrc	r3, 3
 650:	1b c0       	rjmp	.+54     	; 0x688 <__stack+0x189>
 652:	82 2d       	mov	r24, r2
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	88 16       	cp	r8, r24
 658:	99 06       	cpc	r9, r25
 65a:	b0 f4       	brcc	.+44     	; 0x688 <__stack+0x189>
 65c:	b6 01       	movw	r22, r12
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 666:	2a 94       	dec	r2
 668:	f4 cf       	rjmp	.-24     	; 0x652 <__stack+0x153>
 66a:	f5 01       	movw	r30, r10
 66c:	37 fc       	sbrc	r3, 7
 66e:	85 91       	lpm	r24, Z+
 670:	37 fe       	sbrs	r3, 7
 672:	81 91       	ld	r24, Z+
 674:	5f 01       	movw	r10, r30
 676:	b6 01       	movw	r22, r12
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 67e:	21 10       	cpse	r2, r1
 680:	2a 94       	dec	r2
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	82 1a       	sub	r8, r18
 686:	91 08       	sbc	r9, r1
 688:	81 14       	cp	r8, r1
 68a:	91 04       	cpc	r9, r1
 68c:	71 f7       	brne	.-36     	; 0x66a <__stack+0x16b>
 68e:	e8 c0       	rjmp	.+464    	; 0x860 <__stack+0x361>
 690:	84 36       	cpi	r24, 0x64	; 100
 692:	11 f0       	breq	.+4      	; 0x698 <__stack+0x199>
 694:	89 36       	cpi	r24, 0x69	; 105
 696:	41 f5       	brne	.+80     	; 0x6e8 <__stack+0x1e9>
 698:	f8 01       	movw	r30, r16
 69a:	37 fe       	sbrs	r3, 7
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <__stack+0x1ad>
 69e:	60 81       	ld	r22, Z
 6a0:	71 81       	ldd	r23, Z+1	; 0x01
 6a2:	82 81       	ldd	r24, Z+2	; 0x02
 6a4:	93 81       	ldd	r25, Z+3	; 0x03
 6a6:	0c 5f       	subi	r16, 0xFC	; 252
 6a8:	1f 4f       	sbci	r17, 0xFF	; 255
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <__stack+0x1bd>
 6ac:	60 81       	ld	r22, Z
 6ae:	71 81       	ldd	r23, Z+1	; 0x01
 6b0:	07 2e       	mov	r0, r23
 6b2:	00 0c       	add	r0, r0
 6b4:	88 0b       	sbc	r24, r24
 6b6:	99 0b       	sbc	r25, r25
 6b8:	0e 5f       	subi	r16, 0xFE	; 254
 6ba:	1f 4f       	sbci	r17, 0xFF	; 255
 6bc:	f3 2d       	mov	r31, r3
 6be:	ff 76       	andi	r31, 0x6F	; 111
 6c0:	3f 2e       	mov	r3, r31
 6c2:	97 ff       	sbrs	r25, 7
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <__stack+0x1d9>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	f0 68       	ori	r31, 0x80	; 128
 6d6:	3f 2e       	mov	r3, r31
 6d8:	2a e0       	ldi	r18, 0x0A	; 10
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	a3 01       	movw	r20, r6
 6de:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 6e2:	88 2e       	mov	r8, r24
 6e4:	86 18       	sub	r8, r6
 6e6:	45 c0       	rjmp	.+138    	; 0x772 <__stack+0x273>
 6e8:	85 37       	cpi	r24, 0x75	; 117
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <__stack+0x1f9>
 6ec:	23 2d       	mov	r18, r3
 6ee:	2f 7e       	andi	r18, 0xEF	; 239
 6f0:	b2 2e       	mov	r11, r18
 6f2:	2a e0       	ldi	r18, 0x0A	; 10
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	25 c0       	rjmp	.+74     	; 0x742 <__stack+0x243>
 6f8:	93 2d       	mov	r25, r3
 6fa:	99 7f       	andi	r25, 0xF9	; 249
 6fc:	b9 2e       	mov	r11, r25
 6fe:	8f 36       	cpi	r24, 0x6F	; 111
 700:	c1 f0       	breq	.+48     	; 0x732 <__stack+0x233>
 702:	18 f4       	brcc	.+6      	; 0x70a <__stack+0x20b>
 704:	88 35       	cpi	r24, 0x58	; 88
 706:	79 f0       	breq	.+30     	; 0x726 <__stack+0x227>
 708:	b5 c0       	rjmp	.+362    	; 0x874 <__stack+0x375>
 70a:	80 37       	cpi	r24, 0x70	; 112
 70c:	19 f0       	breq	.+6      	; 0x714 <__stack+0x215>
 70e:	88 37       	cpi	r24, 0x78	; 120
 710:	21 f0       	breq	.+8      	; 0x71a <__stack+0x21b>
 712:	b0 c0       	rjmp	.+352    	; 0x874 <__stack+0x375>
 714:	e9 2f       	mov	r30, r25
 716:	e0 61       	ori	r30, 0x10	; 16
 718:	be 2e       	mov	r11, r30
 71a:	b4 fe       	sbrs	r11, 4
 71c:	0d c0       	rjmp	.+26     	; 0x738 <__stack+0x239>
 71e:	fb 2d       	mov	r31, r11
 720:	f4 60       	ori	r31, 0x04	; 4
 722:	bf 2e       	mov	r11, r31
 724:	09 c0       	rjmp	.+18     	; 0x738 <__stack+0x239>
 726:	34 fe       	sbrs	r3, 4
 728:	0a c0       	rjmp	.+20     	; 0x73e <__stack+0x23f>
 72a:	29 2f       	mov	r18, r25
 72c:	26 60       	ori	r18, 0x06	; 6
 72e:	b2 2e       	mov	r11, r18
 730:	06 c0       	rjmp	.+12     	; 0x73e <__stack+0x23f>
 732:	28 e0       	ldi	r18, 0x08	; 8
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	05 c0       	rjmp	.+10     	; 0x742 <__stack+0x243>
 738:	20 e1       	ldi	r18, 0x10	; 16
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <__stack+0x243>
 73e:	20 e1       	ldi	r18, 0x10	; 16
 740:	32 e0       	ldi	r19, 0x02	; 2
 742:	f8 01       	movw	r30, r16
 744:	b7 fe       	sbrs	r11, 7
 746:	07 c0       	rjmp	.+14     	; 0x756 <__stack+0x257>
 748:	60 81       	ld	r22, Z
 74a:	71 81       	ldd	r23, Z+1	; 0x01
 74c:	82 81       	ldd	r24, Z+2	; 0x02
 74e:	93 81       	ldd	r25, Z+3	; 0x03
 750:	0c 5f       	subi	r16, 0xFC	; 252
 752:	1f 4f       	sbci	r17, 0xFF	; 255
 754:	06 c0       	rjmp	.+12     	; 0x762 <__stack+0x263>
 756:	60 81       	ld	r22, Z
 758:	71 81       	ldd	r23, Z+1	; 0x01
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 5f       	subi	r16, 0xFE	; 254
 760:	1f 4f       	sbci	r17, 0xFF	; 255
 762:	a3 01       	movw	r20, r6
 764:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ultoa_invert>
 768:	88 2e       	mov	r8, r24
 76a:	86 18       	sub	r8, r6
 76c:	fb 2d       	mov	r31, r11
 76e:	ff 77       	andi	r31, 0x7F	; 127
 770:	3f 2e       	mov	r3, r31
 772:	36 fe       	sbrs	r3, 6
 774:	0d c0       	rjmp	.+26     	; 0x790 <__stack+0x291>
 776:	23 2d       	mov	r18, r3
 778:	2e 7f       	andi	r18, 0xFE	; 254
 77a:	a2 2e       	mov	r10, r18
 77c:	89 14       	cp	r8, r9
 77e:	58 f4       	brcc	.+22     	; 0x796 <__stack+0x297>
 780:	34 fe       	sbrs	r3, 4
 782:	0b c0       	rjmp	.+22     	; 0x79a <__stack+0x29b>
 784:	32 fc       	sbrc	r3, 2
 786:	09 c0       	rjmp	.+18     	; 0x79a <__stack+0x29b>
 788:	83 2d       	mov	r24, r3
 78a:	8e 7e       	andi	r24, 0xEE	; 238
 78c:	a8 2e       	mov	r10, r24
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__stack+0x29b>
 790:	b8 2c       	mov	r11, r8
 792:	a3 2c       	mov	r10, r3
 794:	03 c0       	rjmp	.+6      	; 0x79c <__stack+0x29d>
 796:	b8 2c       	mov	r11, r8
 798:	01 c0       	rjmp	.+2      	; 0x79c <__stack+0x29d>
 79a:	b9 2c       	mov	r11, r9
 79c:	a4 fe       	sbrs	r10, 4
 79e:	0f c0       	rjmp	.+30     	; 0x7be <__stack+0x2bf>
 7a0:	fe 01       	movw	r30, r28
 7a2:	e8 0d       	add	r30, r8
 7a4:	f1 1d       	adc	r31, r1
 7a6:	80 81       	ld	r24, Z
 7a8:	80 33       	cpi	r24, 0x30	; 48
 7aa:	21 f4       	brne	.+8      	; 0x7b4 <__stack+0x2b5>
 7ac:	9a 2d       	mov	r25, r10
 7ae:	99 7e       	andi	r25, 0xE9	; 233
 7b0:	a9 2e       	mov	r10, r25
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <__stack+0x2c7>
 7b4:	a2 fe       	sbrs	r10, 2
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <__stack+0x2c5>
 7b8:	b3 94       	inc	r11
 7ba:	b3 94       	inc	r11
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__stack+0x2c7>
 7be:	8a 2d       	mov	r24, r10
 7c0:	86 78       	andi	r24, 0x86	; 134
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__stack+0x2c7>
 7c4:	b3 94       	inc	r11
 7c6:	a3 fc       	sbrc	r10, 3
 7c8:	11 c0       	rjmp	.+34     	; 0x7ec <__stack+0x2ed>
 7ca:	a0 fe       	sbrs	r10, 0
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <__stack+0x2db>
 7ce:	b2 14       	cp	r11, r2
 7d0:	88 f4       	brcc	.+34     	; 0x7f4 <__stack+0x2f5>
 7d2:	28 0c       	add	r2, r8
 7d4:	92 2c       	mov	r9, r2
 7d6:	9b 18       	sub	r9, r11
 7d8:	0e c0       	rjmp	.+28     	; 0x7f6 <__stack+0x2f7>
 7da:	b2 14       	cp	r11, r2
 7dc:	60 f4       	brcc	.+24     	; 0x7f6 <__stack+0x2f7>
 7de:	b6 01       	movw	r22, r12
 7e0:	80 e2       	ldi	r24, 0x20	; 32
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 7e8:	b3 94       	inc	r11
 7ea:	f7 cf       	rjmp	.-18     	; 0x7da <__stack+0x2db>
 7ec:	b2 14       	cp	r11, r2
 7ee:	18 f4       	brcc	.+6      	; 0x7f6 <__stack+0x2f7>
 7f0:	2b 18       	sub	r2, r11
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__stack+0x2f9>
 7f4:	98 2c       	mov	r9, r8
 7f6:	21 2c       	mov	r2, r1
 7f8:	a4 fe       	sbrs	r10, 4
 7fa:	10 c0       	rjmp	.+32     	; 0x81c <__stack+0x31d>
 7fc:	b6 01       	movw	r22, r12
 7fe:	80 e3       	ldi	r24, 0x30	; 48
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 806:	a2 fe       	sbrs	r10, 2
 808:	17 c0       	rjmp	.+46     	; 0x838 <__stack+0x339>
 80a:	a1 fc       	sbrc	r10, 1
 80c:	03 c0       	rjmp	.+6      	; 0x814 <__stack+0x315>
 80e:	88 e7       	ldi	r24, 0x78	; 120
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__stack+0x319>
 814:	88 e5       	ldi	r24, 0x58	; 88
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	b6 01       	movw	r22, r12
 81a:	0c c0       	rjmp	.+24     	; 0x834 <__stack+0x335>
 81c:	8a 2d       	mov	r24, r10
 81e:	86 78       	andi	r24, 0x86	; 134
 820:	59 f0       	breq	.+22     	; 0x838 <__stack+0x339>
 822:	a1 fe       	sbrs	r10, 1
 824:	02 c0       	rjmp	.+4      	; 0x82a <__stack+0x32b>
 826:	8b e2       	ldi	r24, 0x2B	; 43
 828:	01 c0       	rjmp	.+2      	; 0x82c <__stack+0x32d>
 82a:	80 e2       	ldi	r24, 0x20	; 32
 82c:	a7 fc       	sbrc	r10, 7
 82e:	8d e2       	ldi	r24, 0x2D	; 45
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 838:	89 14       	cp	r8, r9
 83a:	38 f4       	brcc	.+14     	; 0x84a <__stack+0x34b>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 846:	9a 94       	dec	r9
 848:	f7 cf       	rjmp	.-18     	; 0x838 <__stack+0x339>
 84a:	8a 94       	dec	r8
 84c:	f3 01       	movw	r30, r6
 84e:	e8 0d       	add	r30, r8
 850:	f1 1d       	adc	r31, r1
 852:	80 81       	ld	r24, Z
 854:	b6 01       	movw	r22, r12
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 85c:	81 10       	cpse	r8, r1
 85e:	f5 cf       	rjmp	.-22     	; 0x84a <__stack+0x34b>
 860:	22 20       	and	r2, r2
 862:	09 f4       	brne	.+2      	; 0x866 <__stack+0x367>
 864:	42 ce       	rjmp	.-892    	; 0x4ea <vfprintf+0x24>
 866:	b6 01       	movw	r22, r12
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <fputc>
 870:	2a 94       	dec	r2
 872:	f6 cf       	rjmp	.-20     	; 0x860 <__stack+0x361>
 874:	f6 01       	movw	r30, r12
 876:	86 81       	ldd	r24, Z+6	; 0x06
 878:	97 81       	ldd	r25, Z+7	; 0x07
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x381>
 87c:	8f ef       	ldi	r24, 0xFF	; 255
 87e:	9f ef       	ldi	r25, 0xFF	; 255
 880:	2b 96       	adiw	r28, 0x0b	; 11
 882:	e2 e1       	ldi	r30, 0x12	; 18
 884:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__epilogue_restores__>

00000888 <calloc>:
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	86 9f       	mul	r24, r22
 892:	80 01       	movw	r16, r0
 894:	87 9f       	mul	r24, r23
 896:	10 0d       	add	r17, r0
 898:	96 9f       	mul	r25, r22
 89a:	10 0d       	add	r17, r0
 89c:	11 24       	eor	r1, r1
 89e:	c8 01       	movw	r24, r16
 8a0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <malloc>
 8a4:	ec 01       	movw	r28, r24
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	29 f0       	breq	.+10     	; 0x8b4 <calloc+0x2c>
 8aa:	a8 01       	movw	r20, r16
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	0e 94 8c 05 	call	0xb18	; 0xb18 <memset>
 8b4:	ce 01       	movw	r24, r28
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	0f 91       	pop	r16
 8be:	08 95       	ret

000008c0 <malloc>:
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	82 30       	cpi	r24, 0x02	; 2
 8ca:	91 05       	cpc	r25, r1
 8cc:	10 f4       	brcc	.+4      	; 0x8d2 <malloc+0x12>
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <__flp>
 8d6:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <__flp+0x1>
 8da:	20 e0       	ldi	r18, 0x00	; 0
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	a0 e0       	ldi	r26, 0x00	; 0
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	30 97       	sbiw	r30, 0x00	; 0
 8e4:	19 f1       	breq	.+70     	; 0x92c <malloc+0x6c>
 8e6:	40 81       	ld	r20, Z
 8e8:	51 81       	ldd	r21, Z+1	; 0x01
 8ea:	02 81       	ldd	r16, Z+2	; 0x02
 8ec:	13 81       	ldd	r17, Z+3	; 0x03
 8ee:	48 17       	cp	r20, r24
 8f0:	59 07       	cpc	r21, r25
 8f2:	c8 f0       	brcs	.+50     	; 0x926 <malloc+0x66>
 8f4:	84 17       	cp	r24, r20
 8f6:	95 07       	cpc	r25, r21
 8f8:	69 f4       	brne	.+26     	; 0x914 <malloc+0x54>
 8fa:	10 97       	sbiw	r26, 0x00	; 0
 8fc:	31 f0       	breq	.+12     	; 0x90a <malloc+0x4a>
 8fe:	12 96       	adiw	r26, 0x02	; 2
 900:	0c 93       	st	X, r16
 902:	12 97       	sbiw	r26, 0x02	; 2
 904:	13 96       	adiw	r26, 0x03	; 3
 906:	1c 93       	st	X, r17
 908:	27 c0       	rjmp	.+78     	; 0x958 <malloc+0x98>
 90a:	00 93 66 01 	sts	0x0166, r16	; 0x800166 <__flp>
 90e:	10 93 67 01 	sts	0x0167, r17	; 0x800167 <__flp+0x1>
 912:	22 c0       	rjmp	.+68     	; 0x958 <malloc+0x98>
 914:	21 15       	cp	r18, r1
 916:	31 05       	cpc	r19, r1
 918:	19 f0       	breq	.+6      	; 0x920 <malloc+0x60>
 91a:	42 17       	cp	r20, r18
 91c:	53 07       	cpc	r21, r19
 91e:	18 f4       	brcc	.+6      	; 0x926 <malloc+0x66>
 920:	9a 01       	movw	r18, r20
 922:	bd 01       	movw	r22, r26
 924:	ef 01       	movw	r28, r30
 926:	df 01       	movw	r26, r30
 928:	f8 01       	movw	r30, r16
 92a:	db cf       	rjmp	.-74     	; 0x8e2 <malloc+0x22>
 92c:	21 15       	cp	r18, r1
 92e:	31 05       	cpc	r19, r1
 930:	f9 f0       	breq	.+62     	; 0x970 <malloc+0xb0>
 932:	28 1b       	sub	r18, r24
 934:	39 0b       	sbc	r19, r25
 936:	24 30       	cpi	r18, 0x04	; 4
 938:	31 05       	cpc	r19, r1
 93a:	80 f4       	brcc	.+32     	; 0x95c <malloc+0x9c>
 93c:	8a 81       	ldd	r24, Y+2	; 0x02
 93e:	9b 81       	ldd	r25, Y+3	; 0x03
 940:	61 15       	cp	r22, r1
 942:	71 05       	cpc	r23, r1
 944:	21 f0       	breq	.+8      	; 0x94e <malloc+0x8e>
 946:	fb 01       	movw	r30, r22
 948:	93 83       	std	Z+3, r25	; 0x03
 94a:	82 83       	std	Z+2, r24	; 0x02
 94c:	04 c0       	rjmp	.+8      	; 0x956 <malloc+0x96>
 94e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__flp+0x1>
 952:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__flp>
 956:	fe 01       	movw	r30, r28
 958:	32 96       	adiw	r30, 0x02	; 2
 95a:	44 c0       	rjmp	.+136    	; 0x9e4 <malloc+0x124>
 95c:	fe 01       	movw	r30, r28
 95e:	e2 0f       	add	r30, r18
 960:	f3 1f       	adc	r31, r19
 962:	81 93       	st	Z+, r24
 964:	91 93       	st	Z+, r25
 966:	22 50       	subi	r18, 0x02	; 2
 968:	31 09       	sbc	r19, r1
 96a:	39 83       	std	Y+1, r19	; 0x01
 96c:	28 83       	st	Y, r18
 96e:	3a c0       	rjmp	.+116    	; 0x9e4 <malloc+0x124>
 970:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
 974:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
 978:	23 2b       	or	r18, r19
 97a:	41 f4       	brne	.+16     	; 0x98c <malloc+0xcc>
 97c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 980:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 984:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <__brkval+0x1>
 988:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <__brkval>
 98c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 990:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 994:	21 15       	cp	r18, r1
 996:	31 05       	cpc	r19, r1
 998:	41 f4       	brne	.+16     	; 0x9aa <malloc+0xea>
 99a:	2d b7       	in	r18, 0x3d	; 61
 99c:	3e b7       	in	r19, 0x3e	; 62
 99e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 9a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 9a6:	24 1b       	sub	r18, r20
 9a8:	35 0b       	sbc	r19, r21
 9aa:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <__brkval>
 9ae:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <__brkval+0x1>
 9b2:	e2 17       	cp	r30, r18
 9b4:	f3 07       	cpc	r31, r19
 9b6:	a0 f4       	brcc	.+40     	; 0x9e0 <malloc+0x120>
 9b8:	2e 1b       	sub	r18, r30
 9ba:	3f 0b       	sbc	r19, r31
 9bc:	28 17       	cp	r18, r24
 9be:	39 07       	cpc	r19, r25
 9c0:	78 f0       	brcs	.+30     	; 0x9e0 <malloc+0x120>
 9c2:	ac 01       	movw	r20, r24
 9c4:	4e 5f       	subi	r20, 0xFE	; 254
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255
 9c8:	24 17       	cp	r18, r20
 9ca:	35 07       	cpc	r19, r21
 9cc:	48 f0       	brcs	.+18     	; 0x9e0 <malloc+0x120>
 9ce:	4e 0f       	add	r20, r30
 9d0:	5f 1f       	adc	r21, r31
 9d2:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <__brkval+0x1>
 9d6:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <__brkval>
 9da:	81 93       	st	Z+, r24
 9dc:	91 93       	st	Z+, r25
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <malloc+0x124>
 9e0:	e0 e0       	ldi	r30, 0x00	; 0
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	cf 01       	movw	r24, r30
 9e6:	df 91       	pop	r29
 9e8:	cf 91       	pop	r28
 9ea:	1f 91       	pop	r17
 9ec:	0f 91       	pop	r16
 9ee:	08 95       	ret

000009f0 <free>:
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	09 f4       	brne	.+2      	; 0x9fa <free+0xa>
 9f8:	81 c0       	rjmp	.+258    	; 0xafc <free+0x10c>
 9fa:	fc 01       	movw	r30, r24
 9fc:	32 97       	sbiw	r30, 0x02	; 2
 9fe:	13 82       	std	Z+3, r1	; 0x03
 a00:	12 82       	std	Z+2, r1	; 0x02
 a02:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <__flp>
 a06:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <__flp+0x1>
 a0a:	10 97       	sbiw	r26, 0x00	; 0
 a0c:	81 f4       	brne	.+32     	; 0xa2e <free+0x3e>
 a0e:	20 81       	ld	r18, Z
 a10:	31 81       	ldd	r19, Z+1	; 0x01
 a12:	82 0f       	add	r24, r18
 a14:	93 1f       	adc	r25, r19
 a16:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
 a1a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	51 f5       	brne	.+84     	; 0xa78 <free+0x88>
 a24:	f0 93 65 01 	sts	0x0165, r31	; 0x800165 <__brkval+0x1>
 a28:	e0 93 64 01 	sts	0x0164, r30	; 0x800164 <__brkval>
 a2c:	67 c0       	rjmp	.+206    	; 0xafc <free+0x10c>
 a2e:	ed 01       	movw	r28, r26
 a30:	20 e0       	ldi	r18, 0x00	; 0
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	ce 17       	cp	r28, r30
 a36:	df 07       	cpc	r29, r31
 a38:	40 f4       	brcc	.+16     	; 0xa4a <free+0x5a>
 a3a:	4a 81       	ldd	r20, Y+2	; 0x02
 a3c:	5b 81       	ldd	r21, Y+3	; 0x03
 a3e:	9e 01       	movw	r18, r28
 a40:	41 15       	cp	r20, r1
 a42:	51 05       	cpc	r21, r1
 a44:	f1 f0       	breq	.+60     	; 0xa82 <free+0x92>
 a46:	ea 01       	movw	r28, r20
 a48:	f5 cf       	rjmp	.-22     	; 0xa34 <free+0x44>
 a4a:	d3 83       	std	Z+3, r29	; 0x03
 a4c:	c2 83       	std	Z+2, r28	; 0x02
 a4e:	40 81       	ld	r20, Z
 a50:	51 81       	ldd	r21, Z+1	; 0x01
 a52:	84 0f       	add	r24, r20
 a54:	95 1f       	adc	r25, r21
 a56:	c8 17       	cp	r28, r24
 a58:	d9 07       	cpc	r29, r25
 a5a:	59 f4       	brne	.+22     	; 0xa72 <free+0x82>
 a5c:	88 81       	ld	r24, Y
 a5e:	99 81       	ldd	r25, Y+1	; 0x01
 a60:	84 0f       	add	r24, r20
 a62:	95 1f       	adc	r25, r21
 a64:	02 96       	adiw	r24, 0x02	; 2
 a66:	91 83       	std	Z+1, r25	; 0x01
 a68:	80 83       	st	Z, r24
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
 a6c:	9b 81       	ldd	r25, Y+3	; 0x03
 a6e:	93 83       	std	Z+3, r25	; 0x03
 a70:	82 83       	std	Z+2, r24	; 0x02
 a72:	21 15       	cp	r18, r1
 a74:	31 05       	cpc	r19, r1
 a76:	29 f4       	brne	.+10     	; 0xa82 <free+0x92>
 a78:	f0 93 67 01 	sts	0x0167, r31	; 0x800167 <__flp+0x1>
 a7c:	e0 93 66 01 	sts	0x0166, r30	; 0x800166 <__flp>
 a80:	3d c0       	rjmp	.+122    	; 0xafc <free+0x10c>
 a82:	e9 01       	movw	r28, r18
 a84:	fb 83       	std	Y+3, r31	; 0x03
 a86:	ea 83       	std	Y+2, r30	; 0x02
 a88:	49 91       	ld	r20, Y+
 a8a:	59 91       	ld	r21, Y+
 a8c:	c4 0f       	add	r28, r20
 a8e:	d5 1f       	adc	r29, r21
 a90:	ec 17       	cp	r30, r28
 a92:	fd 07       	cpc	r31, r29
 a94:	61 f4       	brne	.+24     	; 0xaae <free+0xbe>
 a96:	80 81       	ld	r24, Z
 a98:	91 81       	ldd	r25, Z+1	; 0x01
 a9a:	84 0f       	add	r24, r20
 a9c:	95 1f       	adc	r25, r21
 a9e:	02 96       	adiw	r24, 0x02	; 2
 aa0:	e9 01       	movw	r28, r18
 aa2:	99 83       	std	Y+1, r25	; 0x01
 aa4:	88 83       	st	Y, r24
 aa6:	82 81       	ldd	r24, Z+2	; 0x02
 aa8:	93 81       	ldd	r25, Z+3	; 0x03
 aaa:	9b 83       	std	Y+3, r25	; 0x03
 aac:	8a 83       	std	Y+2, r24	; 0x02
 aae:	e0 e0       	ldi	r30, 0x00	; 0
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	12 96       	adiw	r26, 0x02	; 2
 ab4:	8d 91       	ld	r24, X+
 ab6:	9c 91       	ld	r25, X
 ab8:	13 97       	sbiw	r26, 0x03	; 3
 aba:	00 97       	sbiw	r24, 0x00	; 0
 abc:	19 f0       	breq	.+6      	; 0xac4 <free+0xd4>
 abe:	fd 01       	movw	r30, r26
 ac0:	dc 01       	movw	r26, r24
 ac2:	f7 cf       	rjmp	.-18     	; 0xab2 <free+0xc2>
 ac4:	8d 91       	ld	r24, X+
 ac6:	9c 91       	ld	r25, X
 ac8:	11 97       	sbiw	r26, 0x01	; 1
 aca:	9d 01       	movw	r18, r26
 acc:	2e 5f       	subi	r18, 0xFE	; 254
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	82 0f       	add	r24, r18
 ad2:	93 1f       	adc	r25, r19
 ad4:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
 ad8:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
 adc:	28 17       	cp	r18, r24
 ade:	39 07       	cpc	r19, r25
 ae0:	69 f4       	brne	.+26     	; 0xafc <free+0x10c>
 ae2:	30 97       	sbiw	r30, 0x00	; 0
 ae4:	29 f4       	brne	.+10     	; 0xaf0 <free+0x100>
 ae6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <__flp+0x1>
 aea:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__flp>
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <free+0x104>
 af0:	13 82       	std	Z+3, r1	; 0x03
 af2:	12 82       	std	Z+2, r1	; 0x02
 af4:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__brkval+0x1>
 af8:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__brkval>
 afc:	df 91       	pop	r29
 afe:	cf 91       	pop	r28
 b00:	08 95       	ret

00000b02 <strnlen_P>:
 b02:	fc 01       	movw	r30, r24
 b04:	05 90       	lpm	r0, Z+
 b06:	61 50       	subi	r22, 0x01	; 1
 b08:	70 40       	sbci	r23, 0x00	; 0
 b0a:	01 10       	cpse	r0, r1
 b0c:	d8 f7       	brcc	.-10     	; 0xb04 <strnlen_P+0x2>
 b0e:	80 95       	com	r24
 b10:	90 95       	com	r25
 b12:	8e 0f       	add	r24, r30
 b14:	9f 1f       	adc	r25, r31
 b16:	08 95       	ret

00000b18 <memset>:
 b18:	dc 01       	movw	r26, r24
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <memset+0x6>
 b1c:	6d 93       	st	X+, r22
 b1e:	41 50       	subi	r20, 0x01	; 1
 b20:	50 40       	sbci	r21, 0x00	; 0
 b22:	e0 f7       	brcc	.-8      	; 0xb1c <memset+0x4>
 b24:	08 95       	ret

00000b26 <strnlen>:
 b26:	fc 01       	movw	r30, r24
 b28:	61 50       	subi	r22, 0x01	; 1
 b2a:	70 40       	sbci	r23, 0x00	; 0
 b2c:	01 90       	ld	r0, Z+
 b2e:	01 10       	cpse	r0, r1
 b30:	d8 f7       	brcc	.-10     	; 0xb28 <strnlen+0x2>
 b32:	80 95       	com	r24
 b34:	90 95       	com	r25
 b36:	8e 0f       	add	r24, r30
 b38:	9f 1f       	adc	r25, r31
 b3a:	08 95       	ret

00000b3c <fputc>:
 b3c:	0f 93       	push	r16
 b3e:	1f 93       	push	r17
 b40:	cf 93       	push	r28
 b42:	df 93       	push	r29
 b44:	fb 01       	movw	r30, r22
 b46:	23 81       	ldd	r18, Z+3	; 0x03
 b48:	21 fd       	sbrc	r18, 1
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <fputc+0x16>
 b4c:	8f ef       	ldi	r24, 0xFF	; 255
 b4e:	9f ef       	ldi	r25, 0xFF	; 255
 b50:	2c c0       	rjmp	.+88     	; 0xbaa <fputc+0x6e>
 b52:	22 ff       	sbrs	r18, 2
 b54:	16 c0       	rjmp	.+44     	; 0xb82 <fputc+0x46>
 b56:	46 81       	ldd	r20, Z+6	; 0x06
 b58:	57 81       	ldd	r21, Z+7	; 0x07
 b5a:	24 81       	ldd	r18, Z+4	; 0x04
 b5c:	35 81       	ldd	r19, Z+5	; 0x05
 b5e:	42 17       	cp	r20, r18
 b60:	53 07       	cpc	r21, r19
 b62:	44 f4       	brge	.+16     	; 0xb74 <fputc+0x38>
 b64:	a0 81       	ld	r26, Z
 b66:	b1 81       	ldd	r27, Z+1	; 0x01
 b68:	9d 01       	movw	r18, r26
 b6a:	2f 5f       	subi	r18, 0xFF	; 255
 b6c:	3f 4f       	sbci	r19, 0xFF	; 255
 b6e:	31 83       	std	Z+1, r19	; 0x01
 b70:	20 83       	st	Z, r18
 b72:	8c 93       	st	X, r24
 b74:	26 81       	ldd	r18, Z+6	; 0x06
 b76:	37 81       	ldd	r19, Z+7	; 0x07
 b78:	2f 5f       	subi	r18, 0xFF	; 255
 b7a:	3f 4f       	sbci	r19, 0xFF	; 255
 b7c:	37 83       	std	Z+7, r19	; 0x07
 b7e:	26 83       	std	Z+6, r18	; 0x06
 b80:	14 c0       	rjmp	.+40     	; 0xbaa <fputc+0x6e>
 b82:	8b 01       	movw	r16, r22
 b84:	ec 01       	movw	r28, r24
 b86:	fb 01       	movw	r30, r22
 b88:	00 84       	ldd	r0, Z+8	; 0x08
 b8a:	f1 85       	ldd	r31, Z+9	; 0x09
 b8c:	e0 2d       	mov	r30, r0
 b8e:	09 95       	icall
 b90:	89 2b       	or	r24, r25
 b92:	e1 f6       	brne	.-72     	; 0xb4c <fputc+0x10>
 b94:	d8 01       	movw	r26, r16
 b96:	16 96       	adiw	r26, 0x06	; 6
 b98:	8d 91       	ld	r24, X+
 b9a:	9c 91       	ld	r25, X
 b9c:	17 97       	sbiw	r26, 0x07	; 7
 b9e:	01 96       	adiw	r24, 0x01	; 1
 ba0:	17 96       	adiw	r26, 0x07	; 7
 ba2:	9c 93       	st	X, r25
 ba4:	8e 93       	st	-X, r24
 ba6:	16 97       	sbiw	r26, 0x06	; 6
 ba8:	ce 01       	movw	r24, r28
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	08 95       	ret

00000bb4 <__ultoa_invert>:
 bb4:	fa 01       	movw	r30, r20
 bb6:	aa 27       	eor	r26, r26
 bb8:	28 30       	cpi	r18, 0x08	; 8
 bba:	51 f1       	breq	.+84     	; 0xc10 <__ultoa_invert+0x5c>
 bbc:	20 31       	cpi	r18, 0x10	; 16
 bbe:	81 f1       	breq	.+96     	; 0xc20 <__ultoa_invert+0x6c>
 bc0:	e8 94       	clt
 bc2:	6f 93       	push	r22
 bc4:	6e 7f       	andi	r22, 0xFE	; 254
 bc6:	6e 5f       	subi	r22, 0xFE	; 254
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	af 4f       	sbci	r26, 0xFF	; 255
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0x9c>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	3c d0       	rcall	.+120    	; 0xc50 <__ultoa_invert+0x9c>
 bd8:	67 0f       	add	r22, r23
 bda:	78 1f       	adc	r23, r24
 bdc:	89 1f       	adc	r24, r25
 bde:	9a 1f       	adc	r25, r26
 be0:	a1 1d       	adc	r26, r1
 be2:	68 0f       	add	r22, r24
 be4:	79 1f       	adc	r23, r25
 be6:	8a 1f       	adc	r24, r26
 be8:	91 1d       	adc	r25, r1
 bea:	a1 1d       	adc	r26, r1
 bec:	6a 0f       	add	r22, r26
 bee:	71 1d       	adc	r23, r1
 bf0:	81 1d       	adc	r24, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	20 d0       	rcall	.+64     	; 0xc38 <__ultoa_invert+0x84>
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__ultoa_invert+0x48>
 bfa:	68 94       	set
 bfc:	3f 91       	pop	r19
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	26 9f       	mul	r18, r22
 c02:	11 24       	eor	r1, r1
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	de f6       	brtc	.-74     	; 0xbc2 <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x86>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x5c>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x58>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x7c>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x84>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x6c>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x58>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x86>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa2>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <__prologue_saves__>:
 c70:	2f 92       	push	r2
 c72:	3f 92       	push	r3
 c74:	4f 92       	push	r4
 c76:	5f 92       	push	r5
 c78:	6f 92       	push	r6
 c7a:	7f 92       	push	r7
 c7c:	8f 92       	push	r8
 c7e:	9f 92       	push	r9
 c80:	af 92       	push	r10
 c82:	bf 92       	push	r11
 c84:	cf 92       	push	r12
 c86:	df 92       	push	r13
 c88:	ef 92       	push	r14
 c8a:	ff 92       	push	r15
 c8c:	0f 93       	push	r16
 c8e:	1f 93       	push	r17
 c90:	cf 93       	push	r28
 c92:	df 93       	push	r29
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
 c98:	ca 1b       	sub	r28, r26
 c9a:	db 0b       	sbc	r29, r27
 c9c:	0f b6       	in	r0, 0x3f	; 63
 c9e:	f8 94       	cli
 ca0:	de bf       	out	0x3e, r29	; 62
 ca2:	0f be       	out	0x3f, r0	; 63
 ca4:	cd bf       	out	0x3d, r28	; 61
 ca6:	09 94       	ijmp

00000ca8 <__epilogue_restores__>:
 ca8:	2a 88       	ldd	r2, Y+18	; 0x12
 caa:	39 88       	ldd	r3, Y+17	; 0x11
 cac:	48 88       	ldd	r4, Y+16	; 0x10
 cae:	5f 84       	ldd	r5, Y+15	; 0x0f
 cb0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cb2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cb4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cb6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cb8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cba:	b9 84       	ldd	r11, Y+9	; 0x09
 cbc:	c8 84       	ldd	r12, Y+8	; 0x08
 cbe:	df 80       	ldd	r13, Y+7	; 0x07
 cc0:	ee 80       	ldd	r14, Y+6	; 0x06
 cc2:	fd 80       	ldd	r15, Y+5	; 0x05
 cc4:	0c 81       	ldd	r16, Y+4	; 0x04
 cc6:	1b 81       	ldd	r17, Y+3	; 0x03
 cc8:	aa 81       	ldd	r26, Y+2	; 0x02
 cca:	b9 81       	ldd	r27, Y+1	; 0x01
 ccc:	ce 0f       	add	r28, r30
 cce:	d1 1d       	adc	r29, r1
 cd0:	0f b6       	in	r0, 0x3f	; 63
 cd2:	f8 94       	cli
 cd4:	de bf       	out	0x3e, r29	; 62
 cd6:	0f be       	out	0x3f, r0	; 63
 cd8:	cd bf       	out	0x3d, r28	; 61
 cda:	ed 01       	movw	r28, r26
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
