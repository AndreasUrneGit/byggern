
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000376  00800100  00000e28  00000ebc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800476  00800476  00001232  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001458  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbf  00000000  00000000  0000286c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0a  00000000  00000000  0000342b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00003f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  000041d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000673  00000000  00000000  0000477c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004def  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	14 e0       	ldi	r17, 0x04	; 4
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e2       	ldi	r30, 0x28	; 40
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 37       	cpi	r26, 0x76	; 118
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	24 e0       	ldi	r18, 0x04	; 4
  94:	a6 e7       	ldi	r26, 0x76	; 118
  96:	b4 e0       	ldi	r27, 0x04	; 4
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 38       	cpi	r26, 0x80	; 128
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 92 01 	call	0x324	; 0x324 <main>
  a6:	0c 94 12 07 	jmp	0xe24	; 0xe24 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(){

	set_bit(TCCR3A, COM3A0);
  ae:	eb e8       	ldi	r30, 0x8B	; 139
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	set_bit(TCCR3B, CS00);
  b8:	ea e8       	ldi	r30, 0x8A	; 138
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	set_bit(TCCR3B, WGM12);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	set_bit(DDRD, PD4);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <USART_transmit>:
}

void USART_transmit(unsigned char data){
	// wait for empty transmit buffer

	loop_until_bit_is_set(UCSR0A, UDRE0);
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <USART_transmit>
	//put data into buffer, sends the data
	UDR0 = data;
  d4:	8c b9       	out	0x0c, r24	; 12
  d6:	08 95       	ret

000000d8 <USART_receive>:
}
unsigned char USART_receive( void ){
	// Wait for data to be received

	loop_until_bit_is_set(UCSR0A, RXC0);
  d8:	5f 9b       	sbis	0x0b, 7	; 11
  da:	fe cf       	rjmp	.-4      	; 0xd8 <USART_receive>
	// Get and return received data from buffer
	return UDR0;
  dc:	8c b1       	in	r24, 0x0c	; 12
  de:	08 95       	ret

000000e0 <USART_init>:
 */ 
#include "ATmega162_programdriver.h"

void USART_init(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
  e0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
  e2:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  e4:	88 e1       	ldi	r24, 0x18	; 24
  e6:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)| (1 << USBS0) |(3<<UCSZ00);
  e8:	8e e8       	ldi	r24, 0x8E	; 142
  ea:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit, USART_receive);
  ec:	6c e6       	ldi	r22, 0x6C	; 108
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	88 e6       	ldi	r24, 0x68	; 104
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 42 02 	call	0x484	; 0x484 <fdevopen>
  f8:	08 95       	ret

000000fa <__vector_3>:
	//enable INT2 in the General Interrupt Control Register (GICR)
	set_bit(GICR, INT2);
	
}

ISR(INT2_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1

 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <oled_write_command>:
}

void oled_pos(uint8_t line, uint8_t column){
	oled_goto_line(line);
	oled_goto_column(column);
}
 10e:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xb80>
 112:	08 95       	ret

00000114 <oled_write_data>:
 114:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xd80>
 118:	08 95       	ret

0000011a <oled_init_program>:
 11a:	8e ea       	ldi	r24, 0xAE	; 174
 11c:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 120:	81 ea       	ldi	r24, 0xA1	; 161
 122:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 126:	8a ed       	ldi	r24, 0xDA	; 218
 128:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 12c:	82 e1       	ldi	r24, 0x12	; 18
 12e:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 132:	88 ec       	ldi	r24, 0xC8	; 200
 134:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 138:	88 ea       	ldi	r24, 0xA8	; 168
 13a:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 144:	85 ed       	ldi	r24, 0xD5	; 213
 146:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 150:	81 e8       	ldi	r24, 0x81	; 129
 152:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 156:	80 e5       	ldi	r24, 0x50	; 80
 158:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 15c:	89 ed       	ldi	r24, 0xD9	; 217
 15e:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 162:	81 e2       	ldi	r24, 0x21	; 33
 164:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 174:	8b ed       	ldi	r24, 0xDB	; 219
 176:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 180:	8d ea       	ldi	r24, 0xAD	; 173
 182:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 18c:	84 ea       	ldi	r24, 0xA4	; 164
 18e:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 192:	86 ea       	ldi	r24, 0xA6	; 166
 194:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 198:	8f ea       	ldi	r24, 0xAF	; 175
 19a:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 19e:	08 95       	ret

000001a0 <oled_goto_line>:
 1a0:	80 55       	subi	r24, 0x50	; 80
 1a2:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 1a6:	08 95       	ret

000001a8 <oled_goto_column>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	8f 70       	andi	r24, 0x0F	; 15
 1ae:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 1b2:	8c 2f       	mov	r24, r28
 1b4:	82 95       	swap	r24
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	80 5f       	subi	r24, 0xF0	; 240
 1ba:	0e 94 87 00 	call	0x10e	; 0x10e <oled_write_command>
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <oled_clear_line>:

void oled_clear_line(uint8_t line){
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	oled_goto_line(line);
 1c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <oled_goto_line>
	for(int col = 0; col < 128; col++){
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <oled_clear_line+0x16>
		oled_write_data(0);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 8a 00 	call	0x114	; 0x114 <oled_write_data>
	oled_goto_column(column);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(int col = 0; col < 128; col++){
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	c0 38       	cpi	r28, 0x80	; 128
 1da:	d1 05       	cpc	r29, r1
 1dc:	cc f3       	brlt	.-14     	; 0x1d0 <oled_clear_line+0xe>
		oled_write_data(0);
	}
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <oled_clear_screen>:
}
void oled_goto_column(uint8_t column){
	oled_write_command(column & (0b1111));
	oled_write_command(0x10 + (column >> 4));
}
void oled_clear_screen(){
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
	for(int line = 0; line < 8; line++){
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <oled_clear_screen+0x12>
		oled_clear_line(line);
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <oled_clear_line>
void oled_goto_column(uint8_t column){
	oled_write_command(column & (0b1111));
	oled_write_command(0x10 + (column >> 4));
}
void oled_clear_screen(){
	for(int line = 0; line < 8; line++){
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	c8 30       	cpi	r28, 0x08	; 8
 1f8:	d1 05       	cpc	r29, r1
 1fa:	cc f3       	brlt	.-14     	; 0x1ee <oled_clear_screen+0xa>
		oled_clear_line(line);
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <oled_reset>:

void oled_reset(){
	oled_clear_screen();
 202:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <oled_clear_screen>
	oled_goto_line(0);
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <oled_goto_line>
	oled_goto_column(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <oled_goto_column>
 212:	08 95       	ret

00000214 <oled_putchar>:
	for(int col = 0; col < 128; col++){
		oled_write_data(0);
	}
}

void oled_putchar(char ch){
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	d8 2f       	mov	r29, r24
	for(uint8_t column = 0; column < 8; column++){
 21a:	c0 e0       	ldi	r28, 0x00	; 0
 21c:	11 c0       	rjmp	.+34     	; 0x240 <oled_putchar+0x2c>
		oled_write_data(font8[ch - 32][column]);
 21e:	ed 2f       	mov	r30, r29
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	b0 97       	sbiw	r30, 0x20	; 32
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ee 0f       	add	r30, r30
 22a:	ff 1f       	adc	r31, r31
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e2 58       	subi	r30, 0x82	; 130
 232:	fe 4f       	sbci	r31, 0xFE	; 254
 234:	ec 0f       	add	r30, r28
 236:	f1 1d       	adc	r31, r1
 238:	80 81       	ld	r24, Z
 23a:	0e 94 8a 00 	call	0x114	; 0x114 <oled_write_data>
		oled_write_data(0);
	}
}

void oled_putchar(char ch){
	for(uint8_t column = 0; column < 8; column++){
 23e:	cf 5f       	subi	r28, 0xFF	; 255
 240:	c8 30       	cpi	r28, 0x08	; 8
 242:	68 f3       	brcs	.-38     	; 0x21e <oled_putchar+0xa>
		oled_write_data(font8[ch - 32][column]);
	}
}
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <SRAM_test>:
 *  Author: andreurn
 */ 

#include "sram.h"

void SRAM_test(void){
 24a:	cf 92       	push	r12
 24c:	df 92       	push	r13
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <SRAM_test+0x12>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	9f 93       	push	r25
 266:	8f 93       	push	r24
 268:	0e 94 8d 02 	call	0x51a	; 0x51a <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
 26c:	0e 94 32 02 	call	0x464	; 0x464 <rand>
 270:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
 272:	0e 94 37 02 	call	0x46e	; 0x46e <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	00 e0       	ldi	r16, 0x00	; 0
 27c:	10 e0       	ldi	r17, 0x00	; 0
#include "sram.h"

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
 27e:	e1 2c       	mov	r14, r1
 280:	f1 2c       	mov	r15, r1
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 282:	12 c0       	rjmp	.+36     	; 0x2a8 <SRAM_test+0x5e>
		volatile uint8_t some_value = rand();
 284:	0e 94 32 02 	call	0x464	; 0x464 <rand>
 288:	8a 83       	std	Y+2, r24	; 0x02
		ext_ram[i] = some_value;
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	f8 01       	movw	r30, r16
 28e:	f8 5e       	subi	r31, 0xE8	; 232
 290:	80 83       	st	Z, r24
		volatile uint8_t retreived_value = ext_ram[i];
 292:	80 81       	ld	r24, Z
 294:	89 83       	std	Y+1, r24	; 0x01
		if (retreived_value != some_value) {
 296:	99 81       	ldd	r25, Y+1	; 0x01
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	98 17       	cp	r25, r24
 29c:	19 f0       	breq	.+6      	; 0x2a4 <SRAM_test+0x5a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	e8 1a       	sub	r14, r24
 2a2:	f8 0a       	sbc	r15, r24
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	01 15       	cp	r16, r1
 2aa:	88 e0       	ldi	r24, 0x08	; 8
 2ac:	18 07       	cpc	r17, r24
 2ae:	50 f3       	brcs	.-44     	; 0x284 <SRAM_test+0x3a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
 2b0:	c6 01       	movw	r24, r12
 2b2:	0e 94 37 02 	call	0x46e	; 0x46e <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 2ba:	c1 2c       	mov	r12, r1
 2bc:	d1 2c       	mov	r13, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 2be:	0c c0       	rjmp	.+24     	; 0x2d8 <SRAM_test+0x8e>
		uint8_t some_value = rand();
 2c0:	0e 94 32 02 	call	0x464	; 0x464 <rand>
		uint8_t retreived_value = ext_ram[i];
 2c4:	f8 01       	movw	r30, r16
 2c6:	f8 5e       	subi	r31, 0xE8	; 232
 2c8:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
 2ca:	89 17       	cp	r24, r25
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <SRAM_test+0x8a>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	c8 1a       	sub	r12, r24
 2d2:	d8 0a       	sbc	r13, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	01 15       	cp	r16, r1
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	18 07       	cpc	r17, r24
 2de:	80 f3       	brcs	.-32     	; 0x2c0 <SRAM_test+0x76>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
 2e0:	df 92       	push	r13
 2e2:	cf 92       	push	r12
 2e4:	ff 92       	push	r15
 2e6:	ef 92       	push	r14
 2e8:	82 e2       	ldi	r24, 0x22	; 34
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	0e 94 8d 02 	call	0x51a	; 0x51a <printf>
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	ff 90       	pop	r15
 30e:	ef 90       	pop	r14
 310:	df 90       	pop	r13
 312:	cf 90       	pop	r12
 314:	08 95       	ret

00000316 <SRAM_init>:

void SRAM_init(){
	set_bit(MCUCR, SRE);
 316:	85 b7       	in	r24, 0x35	; 53
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 31c:	80 b7       	in	r24, 0x30	; 48
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	80 bf       	out	0x30, r24	; 48
 322:	08 95       	ret

00000324 <main>:

int main(void){
    // enable global interrupt flags
	//interrupt_init();
	/* Replace with your application code */
	USART_init(MYUBRR);
 324:	8f e1       	ldi	r24, 0x1F	; 31
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_init>
	SRAM_init();
 32c:	0e 94 8b 01 	call	0x316	; 0x316 <SRAM_init>
	ADC_init();
 330:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	oled_init_program();
 334:	0e 94 8d 00 	call	0x11a	; 0x11a <oled_init_program>
	SRAM_test();
 338:	0e 94 25 01 	call	0x24a	; 0x24a <SRAM_test>

	oled_reset();
 33c:	0e 94 01 01 	call	0x202	; 0x202 <oled_reset>
	
	uint8_t i = 0;
 340:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		oled_goto_column(i++);
 342:	c1 e0       	ldi	r28, 0x01	; 1
 344:	cd 0f       	add	r28, r29
 346:	8d 2f       	mov	r24, r29
 348:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <oled_goto_column>
		oled_goto_line(i / 20);
 34c:	8d ec       	ldi	r24, 0xCD	; 205
 34e:	c8 9f       	mul	r28, r24
 350:	81 2d       	mov	r24, r1
 352:	11 24       	eor	r1, r1
 354:	82 95       	swap	r24
 356:	8f 70       	andi	r24, 0x0F	; 15
 358:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <oled_goto_line>
		oled_putchar('V');
 35c:	86 e5       	ldi	r24, 0x56	; 86
 35e:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('i');
 362:	89 e6       	ldi	r24, 0x69	; 105
 364:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar(' ');
 368:	80 e2       	ldi	r24, 0x20	; 32
 36a:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('e');
 36e:	85 e6       	ldi	r24, 0x65	; 101
 370:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('r');
 374:	82 e7       	ldi	r24, 0x72	; 114
 376:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar(' ');
 37a:	80 e2       	ldi	r24, 0x20	; 32
 37c:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('f');
 380:	86 e6       	ldi	r24, 0x66	; 102
 382:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('e');
 386:	85 e6       	ldi	r24, 0x65	; 101
 388:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('r');
 38c:	82 e7       	ldi	r24, 0x72	; 114
 38e:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('d');
 392:	84 e6       	ldi	r24, 0x64	; 100
 394:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('i');
 398:	89 e6       	ldi	r24, 0x69	; 105
 39a:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('g');
 39e:	87 e6       	ldi	r24, 0x67	; 103
 3a0:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		oled_putchar('e');
 3a4:	85 e6       	ldi	r24, 0x65	; 101
 3a6:	0e 94 0a 01 	call	0x214	; 0x214 <oled_putchar>
		
		if(i == 128){
 3aa:	c0 38       	cpi	r28, 0x80	; 128
 3ac:	11 f0       	breq	.+4      	; 0x3b2 <main+0x8e>
	oled_reset();
	
	uint8_t i = 0;
	
	while(1){
		oled_goto_column(i++);
 3ae:	dc 2f       	mov	r29, r28
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <main+0x90>
		oled_putchar('i');
		oled_putchar('g');
		oled_putchar('e');
		
		if(i == 128){
			i = 0;
 3b2:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	8f e7       	ldi	r24, 0x7F	; 127
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x96>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xa0>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <main+0xa2>
		}
		
		_delay_ms(100);
		oled_reset();
 3c6:	0e 94 01 01 	call	0x202	; 0x202 <oled_reset>
	}
 3ca:	bb cf       	rjmp	.-138    	; 0x342 <main+0x1e>

000003cc <do_rand>:
 3cc:	8f 92       	push	r8
 3ce:	9f 92       	push	r9
 3d0:	af 92       	push	r10
 3d2:	bf 92       	push	r11
 3d4:	cf 92       	push	r12
 3d6:	df 92       	push	r13
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	68 81       	ld	r22, Y
 3e4:	79 81       	ldd	r23, Y+1	; 0x01
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ea:	61 15       	cp	r22, r1
 3ec:	71 05       	cpc	r23, r1
 3ee:	81 05       	cpc	r24, r1
 3f0:	91 05       	cpc	r25, r1
 3f2:	21 f4       	brne	.+8      	; 0x3fc <do_rand+0x30>
 3f4:	64 e2       	ldi	r22, 0x24	; 36
 3f6:	79 ed       	ldi	r23, 0xD9	; 217
 3f8:	8b e5       	ldi	r24, 0x5B	; 91
 3fa:	97 e0       	ldi	r25, 0x07	; 7
 3fc:	2d e1       	ldi	r18, 0x1D	; 29
 3fe:	33 ef       	ldi	r19, 0xF3	; 243
 400:	41 e0       	ldi	r20, 0x01	; 1
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__divmodsi4>
 408:	49 01       	movw	r8, r18
 40a:	5a 01       	movw	r10, r20
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	a7 ea       	ldi	r26, 0xA7	; 167
 412:	b1 e4       	ldi	r27, 0x41	; 65
 414:	0e 94 97 06 	call	0xd2e	; 0xd2e <__muluhisi3>
 418:	6b 01       	movw	r12, r22
 41a:	7c 01       	movw	r14, r24
 41c:	ac ee       	ldi	r26, 0xEC	; 236
 41e:	b4 ef       	ldi	r27, 0xF4	; 244
 420:	a5 01       	movw	r20, r10
 422:	94 01       	movw	r18, r8
 424:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__mulohisi3>
 428:	dc 01       	movw	r26, r24
 42a:	cb 01       	movw	r24, r22
 42c:	8c 0d       	add	r24, r12
 42e:	9d 1d       	adc	r25, r13
 430:	ae 1d       	adc	r26, r14
 432:	bf 1d       	adc	r27, r15
 434:	b7 ff       	sbrs	r27, 7
 436:	03 c0       	rjmp	.+6      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	a1 09       	sbc	r26, r1
 43c:	b0 48       	sbci	r27, 0x80	; 128
 43e:	88 83       	st	Y, r24
 440:	99 83       	std	Y+1, r25	; 0x01
 442:	aa 83       	std	Y+2, r26	; 0x02
 444:	bb 83       	std	Y+3, r27	; 0x03
 446:	9f 77       	andi	r25, 0x7F	; 127
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	ff 90       	pop	r15
 44e:	ef 90       	pop	r14
 450:	df 90       	pop	r13
 452:	cf 90       	pop	r12
 454:	bf 90       	pop	r11
 456:	af 90       	pop	r10
 458:	9f 90       	pop	r9
 45a:	8f 90       	pop	r8
 45c:	08 95       	ret

0000045e <rand_r>:
 45e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <do_rand>
 462:	08 95       	ret

00000464 <rand>:
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 e6 01 	call	0x3cc	; 0x3cc <do_rand>
 46c:	08 95       	ret

0000046e <srand>:
 46e:	a0 e0       	ldi	r26, 0x00	; 0
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 476:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 47a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 47e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 482:	08 95       	ret

00000484 <fdevopen>:
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	31 f4       	brne	.+12     	; 0x49c <fdevopen+0x18>
 490:	61 15       	cp	r22, r1
 492:	71 05       	cpc	r23, r1
 494:	19 f4       	brne	.+6      	; 0x49c <fdevopen+0x18>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	3a c0       	rjmp	.+116    	; 0x510 <__stack+0x11>
 49c:	8b 01       	movw	r16, r22
 49e:	ec 01       	movw	r28, r24
 4a0:	6e e0       	ldi	r22, 0x0E	; 14
 4a2:	70 e0       	ldi	r23, 0x00	; 0
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 84 04 	call	0x908	; 0x908 <calloc>
 4ac:	fc 01       	movw	r30, r24
 4ae:	89 2b       	or	r24, r25
 4b0:	91 f3       	breq	.-28     	; 0x496 <fdevopen+0x12>
 4b2:	80 e8       	ldi	r24, 0x80	; 128
 4b4:	83 83       	std	Z+3, r24	; 0x03
 4b6:	01 15       	cp	r16, r1
 4b8:	11 05       	cpc	r17, r1
 4ba:	71 f0       	breq	.+28     	; 0x4d8 <fdevopen+0x54>
 4bc:	13 87       	std	Z+11, r17	; 0x0b
 4be:	02 87       	std	Z+10, r16	; 0x0a
 4c0:	81 e8       	ldi	r24, 0x81	; 129
 4c2:	83 83       	std	Z+3, r24	; 0x03
 4c4:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <__data_end>
 4c8:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <__data_end+0x1>
 4cc:	89 2b       	or	r24, r25
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <fdevopen+0x54>
 4d0:	f0 93 77 04 	sts	0x0477, r31	; 0x800477 <__data_end+0x1>
 4d4:	e0 93 76 04 	sts	0x0476, r30	; 0x800476 <__data_end>
 4d8:	20 97       	sbiw	r28, 0x00	; 0
 4da:	c9 f0       	breq	.+50     	; 0x50e <__stack+0xf>
 4dc:	d1 87       	std	Z+9, r29	; 0x09
 4de:	c0 87       	std	Z+8, r28	; 0x08
 4e0:	83 81       	ldd	r24, Z+3	; 0x03
 4e2:	82 60       	ori	r24, 0x02	; 2
 4e4:	83 83       	std	Z+3, r24	; 0x03
 4e6:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <__data_end+0x2>
 4ea:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <__data_end+0x3>
 4ee:	89 2b       	or	r24, r25
 4f0:	71 f4       	brne	.+28     	; 0x50e <__stack+0xf>
 4f2:	f0 93 79 04 	sts	0x0479, r31	; 0x800479 <__data_end+0x3>
 4f6:	e0 93 78 04 	sts	0x0478, r30	; 0x800478 <__data_end+0x2>
 4fa:	80 91 7a 04 	lds	r24, 0x047A	; 0x80047a <__data_end+0x4>
 4fe:	90 91 7b 04 	lds	r25, 0x047B	; 0x80047b <__data_end+0x5>
 502:	89 2b       	or	r24, r25
 504:	21 f4       	brne	.+8      	; 0x50e <__stack+0xf>
 506:	f0 93 7b 04 	sts	0x047B, r31	; 0x80047b <__data_end+0x5>
 50a:	e0 93 7a 04 	sts	0x047A, r30	; 0x80047a <__data_end+0x4>
 50e:	cf 01       	movw	r24, r30
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <printf>:
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e3 e9       	ldi	r30, 0x93	; 147
 520:	f2 e0       	ldi	r31, 0x02	; 2
 522:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__prologue_saves__+0x20>
 526:	ae 01       	movw	r20, r28
 528:	4b 5f       	subi	r20, 0xFB	; 251
 52a:	5f 4f       	sbci	r21, 0xFF	; 255
 52c:	fa 01       	movw	r30, r20
 52e:	61 91       	ld	r22, Z+
 530:	71 91       	ld	r23, Z+
 532:	af 01       	movw	r20, r30
 534:	80 91 78 04 	lds	r24, 0x0478	; 0x800478 <__data_end+0x2>
 538:	90 91 79 04 	lds	r25, 0x0479	; 0x800479 <__data_end+0x3>
 53c:	0e 94 a3 02 	call	0x546	; 0x546 <vfprintf>
 540:	e2 e0       	ldi	r30, 0x02	; 2
 542:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__epilogue_restores__+0x20>

00000546 <vfprintf>:
 546:	ab e0       	ldi	r26, 0x0B	; 11
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e9 ea       	ldi	r30, 0xA9	; 169
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__prologue_saves__>
 552:	6c 01       	movw	r12, r24
 554:	7b 01       	movw	r14, r22
 556:	8a 01       	movw	r16, r20
 558:	fc 01       	movw	r30, r24
 55a:	17 82       	std	Z+7, r1	; 0x07
 55c:	16 82       	std	Z+6, r1	; 0x06
 55e:	83 81       	ldd	r24, Z+3	; 0x03
 560:	81 ff       	sbrs	r24, 1
 562:	cc c1       	rjmp	.+920    	; 0x8fc <vfprintf+0x3b6>
 564:	ce 01       	movw	r24, r28
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	3c 01       	movw	r6, r24
 56a:	f6 01       	movw	r30, r12
 56c:	93 81       	ldd	r25, Z+3	; 0x03
 56e:	f7 01       	movw	r30, r14
 570:	93 fd       	sbrc	r25, 3
 572:	85 91       	lpm	r24, Z+
 574:	93 ff       	sbrs	r25, 3
 576:	81 91       	ld	r24, Z+
 578:	7f 01       	movw	r14, r30
 57a:	88 23       	and	r24, r24
 57c:	09 f4       	brne	.+2      	; 0x580 <vfprintf+0x3a>
 57e:	ba c1       	rjmp	.+884    	; 0x8f4 <vfprintf+0x3ae>
 580:	85 32       	cpi	r24, 0x25	; 37
 582:	39 f4       	brne	.+14     	; 0x592 <vfprintf+0x4c>
 584:	93 fd       	sbrc	r25, 3
 586:	85 91       	lpm	r24, Z+
 588:	93 ff       	sbrs	r25, 3
 58a:	81 91       	ld	r24, Z+
 58c:	7f 01       	movw	r14, r30
 58e:	85 32       	cpi	r24, 0x25	; 37
 590:	29 f4       	brne	.+10     	; 0x59c <vfprintf+0x56>
 592:	b6 01       	movw	r22, r12
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 59a:	e7 cf       	rjmp	.-50     	; 0x56a <vfprintf+0x24>
 59c:	91 2c       	mov	r9, r1
 59e:	21 2c       	mov	r2, r1
 5a0:	31 2c       	mov	r3, r1
 5a2:	ff e1       	ldi	r31, 0x1F	; 31
 5a4:	f3 15       	cp	r31, r3
 5a6:	d8 f0       	brcs	.+54     	; 0x5de <vfprintf+0x98>
 5a8:	8b 32       	cpi	r24, 0x2B	; 43
 5aa:	79 f0       	breq	.+30     	; 0x5ca <vfprintf+0x84>
 5ac:	38 f4       	brcc	.+14     	; 0x5bc <vfprintf+0x76>
 5ae:	80 32       	cpi	r24, 0x20	; 32
 5b0:	79 f0       	breq	.+30     	; 0x5d0 <vfprintf+0x8a>
 5b2:	83 32       	cpi	r24, 0x23	; 35
 5b4:	a1 f4       	brne	.+40     	; 0x5de <vfprintf+0x98>
 5b6:	23 2d       	mov	r18, r3
 5b8:	20 61       	ori	r18, 0x10	; 16
 5ba:	1d c0       	rjmp	.+58     	; 0x5f6 <vfprintf+0xb0>
 5bc:	8d 32       	cpi	r24, 0x2D	; 45
 5be:	61 f0       	breq	.+24     	; 0x5d8 <vfprintf+0x92>
 5c0:	80 33       	cpi	r24, 0x30	; 48
 5c2:	69 f4       	brne	.+26     	; 0x5de <vfprintf+0x98>
 5c4:	23 2d       	mov	r18, r3
 5c6:	21 60       	ori	r18, 0x01	; 1
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <vfprintf+0xb0>
 5ca:	83 2d       	mov	r24, r3
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	38 2e       	mov	r3, r24
 5d0:	e3 2d       	mov	r30, r3
 5d2:	e4 60       	ori	r30, 0x04	; 4
 5d4:	3e 2e       	mov	r3, r30
 5d6:	2a c0       	rjmp	.+84     	; 0x62c <vfprintf+0xe6>
 5d8:	f3 2d       	mov	r31, r3
 5da:	f8 60       	ori	r31, 0x08	; 8
 5dc:	1d c0       	rjmp	.+58     	; 0x618 <vfprintf+0xd2>
 5de:	37 fc       	sbrc	r3, 7
 5e0:	2d c0       	rjmp	.+90     	; 0x63c <vfprintf+0xf6>
 5e2:	20 ed       	ldi	r18, 0xD0	; 208
 5e4:	28 0f       	add	r18, r24
 5e6:	2a 30       	cpi	r18, 0x0A	; 10
 5e8:	40 f0       	brcs	.+16     	; 0x5fa <vfprintf+0xb4>
 5ea:	8e 32       	cpi	r24, 0x2E	; 46
 5ec:	b9 f4       	brne	.+46     	; 0x61c <vfprintf+0xd6>
 5ee:	36 fc       	sbrc	r3, 6
 5f0:	81 c1       	rjmp	.+770    	; 0x8f4 <vfprintf+0x3ae>
 5f2:	23 2d       	mov	r18, r3
 5f4:	20 64       	ori	r18, 0x40	; 64
 5f6:	32 2e       	mov	r3, r18
 5f8:	19 c0       	rjmp	.+50     	; 0x62c <vfprintf+0xe6>
 5fa:	36 fe       	sbrs	r3, 6
 5fc:	06 c0       	rjmp	.+12     	; 0x60a <vfprintf+0xc4>
 5fe:	8a e0       	ldi	r24, 0x0A	; 10
 600:	98 9e       	mul	r9, r24
 602:	20 0d       	add	r18, r0
 604:	11 24       	eor	r1, r1
 606:	92 2e       	mov	r9, r18
 608:	11 c0       	rjmp	.+34     	; 0x62c <vfprintf+0xe6>
 60a:	ea e0       	ldi	r30, 0x0A	; 10
 60c:	2e 9e       	mul	r2, r30
 60e:	20 0d       	add	r18, r0
 610:	11 24       	eor	r1, r1
 612:	22 2e       	mov	r2, r18
 614:	f3 2d       	mov	r31, r3
 616:	f0 62       	ori	r31, 0x20	; 32
 618:	3f 2e       	mov	r3, r31
 61a:	08 c0       	rjmp	.+16     	; 0x62c <vfprintf+0xe6>
 61c:	8c 36       	cpi	r24, 0x6C	; 108
 61e:	21 f4       	brne	.+8      	; 0x628 <vfprintf+0xe2>
 620:	83 2d       	mov	r24, r3
 622:	80 68       	ori	r24, 0x80	; 128
 624:	38 2e       	mov	r3, r24
 626:	02 c0       	rjmp	.+4      	; 0x62c <vfprintf+0xe6>
 628:	88 36       	cpi	r24, 0x68	; 104
 62a:	41 f4       	brne	.+16     	; 0x63c <vfprintf+0xf6>
 62c:	f7 01       	movw	r30, r14
 62e:	93 fd       	sbrc	r25, 3
 630:	85 91       	lpm	r24, Z+
 632:	93 ff       	sbrs	r25, 3
 634:	81 91       	ld	r24, Z+
 636:	7f 01       	movw	r14, r30
 638:	81 11       	cpse	r24, r1
 63a:	b3 cf       	rjmp	.-154    	; 0x5a2 <vfprintf+0x5c>
 63c:	98 2f       	mov	r25, r24
 63e:	9f 7d       	andi	r25, 0xDF	; 223
 640:	95 54       	subi	r25, 0x45	; 69
 642:	93 30       	cpi	r25, 0x03	; 3
 644:	28 f4       	brcc	.+10     	; 0x650 <vfprintf+0x10a>
 646:	0c 5f       	subi	r16, 0xFC	; 252
 648:	1f 4f       	sbci	r17, 0xFF	; 255
 64a:	9f e3       	ldi	r25, 0x3F	; 63
 64c:	99 83       	std	Y+1, r25	; 0x01
 64e:	0d c0       	rjmp	.+26     	; 0x66a <vfprintf+0x124>
 650:	83 36       	cpi	r24, 0x63	; 99
 652:	31 f0       	breq	.+12     	; 0x660 <vfprintf+0x11a>
 654:	83 37       	cpi	r24, 0x73	; 115
 656:	71 f0       	breq	.+28     	; 0x674 <vfprintf+0x12e>
 658:	83 35       	cpi	r24, 0x53	; 83
 65a:	09 f0       	breq	.+2      	; 0x65e <vfprintf+0x118>
 65c:	59 c0       	rjmp	.+178    	; 0x710 <vfprintf+0x1ca>
 65e:	21 c0       	rjmp	.+66     	; 0x6a2 <vfprintf+0x15c>
 660:	f8 01       	movw	r30, r16
 662:	80 81       	ld	r24, Z
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	0e 5f       	subi	r16, 0xFE	; 254
 668:	1f 4f       	sbci	r17, 0xFF	; 255
 66a:	88 24       	eor	r8, r8
 66c:	83 94       	inc	r8
 66e:	91 2c       	mov	r9, r1
 670:	53 01       	movw	r10, r6
 672:	13 c0       	rjmp	.+38     	; 0x69a <vfprintf+0x154>
 674:	28 01       	movw	r4, r16
 676:	f2 e0       	ldi	r31, 0x02	; 2
 678:	4f 0e       	add	r4, r31
 67a:	51 1c       	adc	r5, r1
 67c:	f8 01       	movw	r30, r16
 67e:	a0 80       	ld	r10, Z
 680:	b1 80       	ldd	r11, Z+1	; 0x01
 682:	36 fe       	sbrs	r3, 6
 684:	03 c0       	rjmp	.+6      	; 0x68c <vfprintf+0x146>
 686:	69 2d       	mov	r22, r9
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	02 c0       	rjmp	.+4      	; 0x690 <vfprintf+0x14a>
 68c:	6f ef       	ldi	r22, 0xFF	; 255
 68e:	7f ef       	ldi	r23, 0xFF	; 255
 690:	c5 01       	movw	r24, r10
 692:	0e 94 d3 05 	call	0xba6	; 0xba6 <strnlen>
 696:	4c 01       	movw	r8, r24
 698:	82 01       	movw	r16, r4
 69a:	f3 2d       	mov	r31, r3
 69c:	ff 77       	andi	r31, 0x7F	; 127
 69e:	3f 2e       	mov	r3, r31
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <vfprintf+0x188>
 6a2:	28 01       	movw	r4, r16
 6a4:	22 e0       	ldi	r18, 0x02	; 2
 6a6:	42 0e       	add	r4, r18
 6a8:	51 1c       	adc	r5, r1
 6aa:	f8 01       	movw	r30, r16
 6ac:	a0 80       	ld	r10, Z
 6ae:	b1 80       	ldd	r11, Z+1	; 0x01
 6b0:	36 fe       	sbrs	r3, 6
 6b2:	03 c0       	rjmp	.+6      	; 0x6ba <vfprintf+0x174>
 6b4:	69 2d       	mov	r22, r9
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <vfprintf+0x178>
 6ba:	6f ef       	ldi	r22, 0xFF	; 255
 6bc:	7f ef       	ldi	r23, 0xFF	; 255
 6be:	c5 01       	movw	r24, r10
 6c0:	0e 94 c1 05 	call	0xb82	; 0xb82 <strnlen_P>
 6c4:	4c 01       	movw	r8, r24
 6c6:	f3 2d       	mov	r31, r3
 6c8:	f0 68       	ori	r31, 0x80	; 128
 6ca:	3f 2e       	mov	r3, r31
 6cc:	82 01       	movw	r16, r4
 6ce:	33 fc       	sbrc	r3, 3
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <vfprintf+0x1c2>
 6d2:	82 2d       	mov	r24, r2
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	88 16       	cp	r8, r24
 6d8:	99 06       	cpc	r9, r25
 6da:	b0 f4       	brcc	.+44     	; 0x708 <vfprintf+0x1c2>
 6dc:	b6 01       	movw	r22, r12
 6de:	80 e2       	ldi	r24, 0x20	; 32
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 6e6:	2a 94       	dec	r2
 6e8:	f4 cf       	rjmp	.-24     	; 0x6d2 <vfprintf+0x18c>
 6ea:	f5 01       	movw	r30, r10
 6ec:	37 fc       	sbrc	r3, 7
 6ee:	85 91       	lpm	r24, Z+
 6f0:	37 fe       	sbrs	r3, 7
 6f2:	81 91       	ld	r24, Z+
 6f4:	5f 01       	movw	r10, r30
 6f6:	b6 01       	movw	r22, r12
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 6fe:	21 10       	cpse	r2, r1
 700:	2a 94       	dec	r2
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	82 1a       	sub	r8, r18
 706:	91 08       	sbc	r9, r1
 708:	81 14       	cp	r8, r1
 70a:	91 04       	cpc	r9, r1
 70c:	71 f7       	brne	.-36     	; 0x6ea <vfprintf+0x1a4>
 70e:	e8 c0       	rjmp	.+464    	; 0x8e0 <vfprintf+0x39a>
 710:	84 36       	cpi	r24, 0x64	; 100
 712:	11 f0       	breq	.+4      	; 0x718 <vfprintf+0x1d2>
 714:	89 36       	cpi	r24, 0x69	; 105
 716:	41 f5       	brne	.+80     	; 0x768 <vfprintf+0x222>
 718:	f8 01       	movw	r30, r16
 71a:	37 fe       	sbrs	r3, 7
 71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x1e6>
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	0c 5f       	subi	r16, 0xFC	; 252
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0x1f6>
 72c:	60 81       	ld	r22, Z
 72e:	71 81       	ldd	r23, Z+1	; 0x01
 730:	07 2e       	mov	r0, r23
 732:	00 0c       	add	r0, r0
 734:	88 0b       	sbc	r24, r24
 736:	99 0b       	sbc	r25, r25
 738:	0e 5f       	subi	r16, 0xFE	; 254
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	f3 2d       	mov	r31, r3
 73e:	ff 76       	andi	r31, 0x6F	; 111
 740:	3f 2e       	mov	r3, r31
 742:	97 ff       	sbrs	r25, 7
 744:	09 c0       	rjmp	.+18     	; 0x758 <vfprintf+0x212>
 746:	90 95       	com	r25
 748:	80 95       	com	r24
 74a:	70 95       	com	r23
 74c:	61 95       	neg	r22
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	f0 68       	ori	r31, 0x80	; 128
 756:	3f 2e       	mov	r3, r31
 758:	2a e0       	ldi	r18, 0x0A	; 10
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	a3 01       	movw	r20, r6
 75e:	0e 94 1a 06 	call	0xc34	; 0xc34 <__ultoa_invert>
 762:	88 2e       	mov	r8, r24
 764:	86 18       	sub	r8, r6
 766:	45 c0       	rjmp	.+138    	; 0x7f2 <vfprintf+0x2ac>
 768:	85 37       	cpi	r24, 0x75	; 117
 76a:	31 f4       	brne	.+12     	; 0x778 <vfprintf+0x232>
 76c:	23 2d       	mov	r18, r3
 76e:	2f 7e       	andi	r18, 0xEF	; 239
 770:	b2 2e       	mov	r11, r18
 772:	2a e0       	ldi	r18, 0x0A	; 10
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	25 c0       	rjmp	.+74     	; 0x7c2 <vfprintf+0x27c>
 778:	93 2d       	mov	r25, r3
 77a:	99 7f       	andi	r25, 0xF9	; 249
 77c:	b9 2e       	mov	r11, r25
 77e:	8f 36       	cpi	r24, 0x6F	; 111
 780:	c1 f0       	breq	.+48     	; 0x7b2 <vfprintf+0x26c>
 782:	18 f4       	brcc	.+6      	; 0x78a <vfprintf+0x244>
 784:	88 35       	cpi	r24, 0x58	; 88
 786:	79 f0       	breq	.+30     	; 0x7a6 <vfprintf+0x260>
 788:	b5 c0       	rjmp	.+362    	; 0x8f4 <vfprintf+0x3ae>
 78a:	80 37       	cpi	r24, 0x70	; 112
 78c:	19 f0       	breq	.+6      	; 0x794 <vfprintf+0x24e>
 78e:	88 37       	cpi	r24, 0x78	; 120
 790:	21 f0       	breq	.+8      	; 0x79a <vfprintf+0x254>
 792:	b0 c0       	rjmp	.+352    	; 0x8f4 <vfprintf+0x3ae>
 794:	e9 2f       	mov	r30, r25
 796:	e0 61       	ori	r30, 0x10	; 16
 798:	be 2e       	mov	r11, r30
 79a:	b4 fe       	sbrs	r11, 4
 79c:	0d c0       	rjmp	.+26     	; 0x7b8 <vfprintf+0x272>
 79e:	fb 2d       	mov	r31, r11
 7a0:	f4 60       	ori	r31, 0x04	; 4
 7a2:	bf 2e       	mov	r11, r31
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <vfprintf+0x272>
 7a6:	34 fe       	sbrs	r3, 4
 7a8:	0a c0       	rjmp	.+20     	; 0x7be <vfprintf+0x278>
 7aa:	29 2f       	mov	r18, r25
 7ac:	26 60       	ori	r18, 0x06	; 6
 7ae:	b2 2e       	mov	r11, r18
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0x278>
 7b2:	28 e0       	ldi	r18, 0x08	; 8
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <vfprintf+0x27c>
 7b8:	20 e1       	ldi	r18, 0x10	; 16
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x27c>
 7be:	20 e1       	ldi	r18, 0x10	; 16
 7c0:	32 e0       	ldi	r19, 0x02	; 2
 7c2:	f8 01       	movw	r30, r16
 7c4:	b7 fe       	sbrs	r11, 7
 7c6:	07 c0       	rjmp	.+14     	; 0x7d6 <vfprintf+0x290>
 7c8:	60 81       	ld	r22, Z
 7ca:	71 81       	ldd	r23, Z+1	; 0x01
 7cc:	82 81       	ldd	r24, Z+2	; 0x02
 7ce:	93 81       	ldd	r25, Z+3	; 0x03
 7d0:	0c 5f       	subi	r16, 0xFC	; 252
 7d2:	1f 4f       	sbci	r17, 0xFF	; 255
 7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <vfprintf+0x29c>
 7d6:	60 81       	ld	r22, Z
 7d8:	71 81       	ldd	r23, Z+1	; 0x01
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 5f       	subi	r16, 0xFE	; 254
 7e0:	1f 4f       	sbci	r17, 0xFF	; 255
 7e2:	a3 01       	movw	r20, r6
 7e4:	0e 94 1a 06 	call	0xc34	; 0xc34 <__ultoa_invert>
 7e8:	88 2e       	mov	r8, r24
 7ea:	86 18       	sub	r8, r6
 7ec:	fb 2d       	mov	r31, r11
 7ee:	ff 77       	andi	r31, 0x7F	; 127
 7f0:	3f 2e       	mov	r3, r31
 7f2:	36 fe       	sbrs	r3, 6
 7f4:	0d c0       	rjmp	.+26     	; 0x810 <vfprintf+0x2ca>
 7f6:	23 2d       	mov	r18, r3
 7f8:	2e 7f       	andi	r18, 0xFE	; 254
 7fa:	a2 2e       	mov	r10, r18
 7fc:	89 14       	cp	r8, r9
 7fe:	58 f4       	brcc	.+22     	; 0x816 <vfprintf+0x2d0>
 800:	34 fe       	sbrs	r3, 4
 802:	0b c0       	rjmp	.+22     	; 0x81a <vfprintf+0x2d4>
 804:	32 fc       	sbrc	r3, 2
 806:	09 c0       	rjmp	.+18     	; 0x81a <vfprintf+0x2d4>
 808:	83 2d       	mov	r24, r3
 80a:	8e 7e       	andi	r24, 0xEE	; 238
 80c:	a8 2e       	mov	r10, r24
 80e:	05 c0       	rjmp	.+10     	; 0x81a <vfprintf+0x2d4>
 810:	b8 2c       	mov	r11, r8
 812:	a3 2c       	mov	r10, r3
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x2d6>
 816:	b8 2c       	mov	r11, r8
 818:	01 c0       	rjmp	.+2      	; 0x81c <vfprintf+0x2d6>
 81a:	b9 2c       	mov	r11, r9
 81c:	a4 fe       	sbrs	r10, 4
 81e:	0f c0       	rjmp	.+30     	; 0x83e <vfprintf+0x2f8>
 820:	fe 01       	movw	r30, r28
 822:	e8 0d       	add	r30, r8
 824:	f1 1d       	adc	r31, r1
 826:	80 81       	ld	r24, Z
 828:	80 33       	cpi	r24, 0x30	; 48
 82a:	21 f4       	brne	.+8      	; 0x834 <vfprintf+0x2ee>
 82c:	9a 2d       	mov	r25, r10
 82e:	99 7e       	andi	r25, 0xE9	; 233
 830:	a9 2e       	mov	r10, r25
 832:	09 c0       	rjmp	.+18     	; 0x846 <vfprintf+0x300>
 834:	a2 fe       	sbrs	r10, 2
 836:	06 c0       	rjmp	.+12     	; 0x844 <vfprintf+0x2fe>
 838:	b3 94       	inc	r11
 83a:	b3 94       	inc	r11
 83c:	04 c0       	rjmp	.+8      	; 0x846 <vfprintf+0x300>
 83e:	8a 2d       	mov	r24, r10
 840:	86 78       	andi	r24, 0x86	; 134
 842:	09 f0       	breq	.+2      	; 0x846 <vfprintf+0x300>
 844:	b3 94       	inc	r11
 846:	a3 fc       	sbrc	r10, 3
 848:	11 c0       	rjmp	.+34     	; 0x86c <vfprintf+0x326>
 84a:	a0 fe       	sbrs	r10, 0
 84c:	06 c0       	rjmp	.+12     	; 0x85a <vfprintf+0x314>
 84e:	b2 14       	cp	r11, r2
 850:	88 f4       	brcc	.+34     	; 0x874 <vfprintf+0x32e>
 852:	28 0c       	add	r2, r8
 854:	92 2c       	mov	r9, r2
 856:	9b 18       	sub	r9, r11
 858:	0e c0       	rjmp	.+28     	; 0x876 <vfprintf+0x330>
 85a:	b2 14       	cp	r11, r2
 85c:	60 f4       	brcc	.+24     	; 0x876 <vfprintf+0x330>
 85e:	b6 01       	movw	r22, r12
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 868:	b3 94       	inc	r11
 86a:	f7 cf       	rjmp	.-18     	; 0x85a <vfprintf+0x314>
 86c:	b2 14       	cp	r11, r2
 86e:	18 f4       	brcc	.+6      	; 0x876 <vfprintf+0x330>
 870:	2b 18       	sub	r2, r11
 872:	02 c0       	rjmp	.+4      	; 0x878 <vfprintf+0x332>
 874:	98 2c       	mov	r9, r8
 876:	21 2c       	mov	r2, r1
 878:	a4 fe       	sbrs	r10, 4
 87a:	10 c0       	rjmp	.+32     	; 0x89c <vfprintf+0x356>
 87c:	b6 01       	movw	r22, r12
 87e:	80 e3       	ldi	r24, 0x30	; 48
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 886:	a2 fe       	sbrs	r10, 2
 888:	17 c0       	rjmp	.+46     	; 0x8b8 <vfprintf+0x372>
 88a:	a1 fc       	sbrc	r10, 1
 88c:	03 c0       	rjmp	.+6      	; 0x894 <vfprintf+0x34e>
 88e:	88 e7       	ldi	r24, 0x78	; 120
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	02 c0       	rjmp	.+4      	; 0x898 <vfprintf+0x352>
 894:	88 e5       	ldi	r24, 0x58	; 88
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	b6 01       	movw	r22, r12
 89a:	0c c0       	rjmp	.+24     	; 0x8b4 <vfprintf+0x36e>
 89c:	8a 2d       	mov	r24, r10
 89e:	86 78       	andi	r24, 0x86	; 134
 8a0:	59 f0       	breq	.+22     	; 0x8b8 <vfprintf+0x372>
 8a2:	a1 fe       	sbrs	r10, 1
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0x364>
 8a6:	8b e2       	ldi	r24, 0x2B	; 43
 8a8:	01 c0       	rjmp	.+2      	; 0x8ac <vfprintf+0x366>
 8aa:	80 e2       	ldi	r24, 0x20	; 32
 8ac:	a7 fc       	sbrc	r10, 7
 8ae:	8d e2       	ldi	r24, 0x2D	; 45
 8b0:	b6 01       	movw	r22, r12
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 8b8:	89 14       	cp	r8, r9
 8ba:	38 f4       	brcc	.+14     	; 0x8ca <vfprintf+0x384>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 8c6:	9a 94       	dec	r9
 8c8:	f7 cf       	rjmp	.-18     	; 0x8b8 <vfprintf+0x372>
 8ca:	8a 94       	dec	r8
 8cc:	f3 01       	movw	r30, r6
 8ce:	e8 0d       	add	r30, r8
 8d0:	f1 1d       	adc	r31, r1
 8d2:	80 81       	ld	r24, Z
 8d4:	b6 01       	movw	r22, r12
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 8dc:	81 10       	cpse	r8, r1
 8de:	f5 cf       	rjmp	.-22     	; 0x8ca <vfprintf+0x384>
 8e0:	22 20       	and	r2, r2
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <vfprintf+0x3a0>
 8e4:	42 ce       	rjmp	.-892    	; 0x56a <vfprintf+0x24>
 8e6:	b6 01       	movw	r22, r12
 8e8:	80 e2       	ldi	r24, 0x20	; 32
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 de 05 	call	0xbbc	; 0xbbc <fputc>
 8f0:	2a 94       	dec	r2
 8f2:	f6 cf       	rjmp	.-20     	; 0x8e0 <vfprintf+0x39a>
 8f4:	f6 01       	movw	r30, r12
 8f6:	86 81       	ldd	r24, Z+6	; 0x06
 8f8:	97 81       	ldd	r25, Z+7	; 0x07
 8fa:	02 c0       	rjmp	.+4      	; 0x900 <vfprintf+0x3ba>
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	9f ef       	ldi	r25, 0xFF	; 255
 900:	2b 96       	adiw	r28, 0x0b	; 11
 902:	e2 e1       	ldi	r30, 0x12	; 18
 904:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__epilogue_restores__>

00000908 <calloc>:
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	86 9f       	mul	r24, r22
 912:	80 01       	movw	r16, r0
 914:	87 9f       	mul	r24, r23
 916:	10 0d       	add	r17, r0
 918:	96 9f       	mul	r25, r22
 91a:	10 0d       	add	r17, r0
 91c:	11 24       	eor	r1, r1
 91e:	c8 01       	movw	r24, r16
 920:	0e 94 a0 04 	call	0x940	; 0x940 <malloc>
 924:	ec 01       	movw	r28, r24
 926:	00 97       	sbiw	r24, 0x00	; 0
 928:	29 f0       	breq	.+10     	; 0x934 <calloc+0x2c>
 92a:	a8 01       	movw	r20, r16
 92c:	60 e0       	ldi	r22, 0x00	; 0
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	0e 94 cc 05 	call	0xb98	; 0xb98 <memset>
 934:	ce 01       	movw	r24, r28
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	1f 91       	pop	r17
 93c:	0f 91       	pop	r16
 93e:	08 95       	ret

00000940 <malloc>:
 940:	0f 93       	push	r16
 942:	1f 93       	push	r17
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	91 05       	cpc	r25, r1
 94c:	10 f4       	brcc	.+4      	; 0x952 <malloc+0x12>
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	e0 91 7e 04 	lds	r30, 0x047E	; 0x80047e <__flp>
 956:	f0 91 7f 04 	lds	r31, 0x047F	; 0x80047f <__flp+0x1>
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
 95e:	a0 e0       	ldi	r26, 0x00	; 0
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	30 97       	sbiw	r30, 0x00	; 0
 964:	19 f1       	breq	.+70     	; 0x9ac <malloc+0x6c>
 966:	40 81       	ld	r20, Z
 968:	51 81       	ldd	r21, Z+1	; 0x01
 96a:	02 81       	ldd	r16, Z+2	; 0x02
 96c:	13 81       	ldd	r17, Z+3	; 0x03
 96e:	48 17       	cp	r20, r24
 970:	59 07       	cpc	r21, r25
 972:	c8 f0       	brcs	.+50     	; 0x9a6 <malloc+0x66>
 974:	84 17       	cp	r24, r20
 976:	95 07       	cpc	r25, r21
 978:	69 f4       	brne	.+26     	; 0x994 <malloc+0x54>
 97a:	10 97       	sbiw	r26, 0x00	; 0
 97c:	31 f0       	breq	.+12     	; 0x98a <malloc+0x4a>
 97e:	12 96       	adiw	r26, 0x02	; 2
 980:	0c 93       	st	X, r16
 982:	12 97       	sbiw	r26, 0x02	; 2
 984:	13 96       	adiw	r26, 0x03	; 3
 986:	1c 93       	st	X, r17
 988:	27 c0       	rjmp	.+78     	; 0x9d8 <malloc+0x98>
 98a:	00 93 7e 04 	sts	0x047E, r16	; 0x80047e <__flp>
 98e:	10 93 7f 04 	sts	0x047F, r17	; 0x80047f <__flp+0x1>
 992:	22 c0       	rjmp	.+68     	; 0x9d8 <malloc+0x98>
 994:	21 15       	cp	r18, r1
 996:	31 05       	cpc	r19, r1
 998:	19 f0       	breq	.+6      	; 0x9a0 <malloc+0x60>
 99a:	42 17       	cp	r20, r18
 99c:	53 07       	cpc	r21, r19
 99e:	18 f4       	brcc	.+6      	; 0x9a6 <malloc+0x66>
 9a0:	9a 01       	movw	r18, r20
 9a2:	bd 01       	movw	r22, r26
 9a4:	ef 01       	movw	r28, r30
 9a6:	df 01       	movw	r26, r30
 9a8:	f8 01       	movw	r30, r16
 9aa:	db cf       	rjmp	.-74     	; 0x962 <malloc+0x22>
 9ac:	21 15       	cp	r18, r1
 9ae:	31 05       	cpc	r19, r1
 9b0:	f9 f0       	breq	.+62     	; 0x9f0 <malloc+0xb0>
 9b2:	28 1b       	sub	r18, r24
 9b4:	39 0b       	sbc	r19, r25
 9b6:	24 30       	cpi	r18, 0x04	; 4
 9b8:	31 05       	cpc	r19, r1
 9ba:	80 f4       	brcc	.+32     	; 0x9dc <malloc+0x9c>
 9bc:	8a 81       	ldd	r24, Y+2	; 0x02
 9be:	9b 81       	ldd	r25, Y+3	; 0x03
 9c0:	61 15       	cp	r22, r1
 9c2:	71 05       	cpc	r23, r1
 9c4:	21 f0       	breq	.+8      	; 0x9ce <malloc+0x8e>
 9c6:	fb 01       	movw	r30, r22
 9c8:	93 83       	std	Z+3, r25	; 0x03
 9ca:	82 83       	std	Z+2, r24	; 0x02
 9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <malloc+0x96>
 9ce:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <__flp+0x1>
 9d2:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <__flp>
 9d6:	fe 01       	movw	r30, r28
 9d8:	32 96       	adiw	r30, 0x02	; 2
 9da:	44 c0       	rjmp	.+136    	; 0xa64 <malloc+0x124>
 9dc:	fe 01       	movw	r30, r28
 9de:	e2 0f       	add	r30, r18
 9e0:	f3 1f       	adc	r31, r19
 9e2:	81 93       	st	Z+, r24
 9e4:	91 93       	st	Z+, r25
 9e6:	22 50       	subi	r18, 0x02	; 2
 9e8:	31 09       	sbc	r19, r1
 9ea:	39 83       	std	Y+1, r19	; 0x01
 9ec:	28 83       	st	Y, r18
 9ee:	3a c0       	rjmp	.+116    	; 0xa64 <malloc+0x124>
 9f0:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <__brkval>
 9f4:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <__brkval+0x1>
 9f8:	23 2b       	or	r18, r19
 9fa:	41 f4       	brne	.+16     	; 0xa0c <malloc+0xcc>
 9fc:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 a00:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 a04:	30 93 7d 04 	sts	0x047D, r19	; 0x80047d <__brkval+0x1>
 a08:	20 93 7c 04 	sts	0x047C, r18	; 0x80047c <__brkval>
 a0c:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 a10:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 a14:	21 15       	cp	r18, r1
 a16:	31 05       	cpc	r19, r1
 a18:	41 f4       	brne	.+16     	; 0xa2a <malloc+0xea>
 a1a:	2d b7       	in	r18, 0x3d	; 61
 a1c:	3e b7       	in	r19, 0x3e	; 62
 a1e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 a22:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 a26:	24 1b       	sub	r18, r20
 a28:	35 0b       	sbc	r19, r21
 a2a:	e0 91 7c 04 	lds	r30, 0x047C	; 0x80047c <__brkval>
 a2e:	f0 91 7d 04 	lds	r31, 0x047D	; 0x80047d <__brkval+0x1>
 a32:	e2 17       	cp	r30, r18
 a34:	f3 07       	cpc	r31, r19
 a36:	a0 f4       	brcc	.+40     	; 0xa60 <malloc+0x120>
 a38:	2e 1b       	sub	r18, r30
 a3a:	3f 0b       	sbc	r19, r31
 a3c:	28 17       	cp	r18, r24
 a3e:	39 07       	cpc	r19, r25
 a40:	78 f0       	brcs	.+30     	; 0xa60 <malloc+0x120>
 a42:	ac 01       	movw	r20, r24
 a44:	4e 5f       	subi	r20, 0xFE	; 254
 a46:	5f 4f       	sbci	r21, 0xFF	; 255
 a48:	24 17       	cp	r18, r20
 a4a:	35 07       	cpc	r19, r21
 a4c:	48 f0       	brcs	.+18     	; 0xa60 <malloc+0x120>
 a4e:	4e 0f       	add	r20, r30
 a50:	5f 1f       	adc	r21, r31
 a52:	50 93 7d 04 	sts	0x047D, r21	; 0x80047d <__brkval+0x1>
 a56:	40 93 7c 04 	sts	0x047C, r20	; 0x80047c <__brkval>
 a5a:	81 93       	st	Z+, r24
 a5c:	91 93       	st	Z+, r25
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <malloc+0x124>
 a60:	e0 e0       	ldi	r30, 0x00	; 0
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	cf 01       	movw	r24, r30
 a66:	df 91       	pop	r29
 a68:	cf 91       	pop	r28
 a6a:	1f 91       	pop	r17
 a6c:	0f 91       	pop	r16
 a6e:	08 95       	ret

00000a70 <free>:
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
 a74:	00 97       	sbiw	r24, 0x00	; 0
 a76:	09 f4       	brne	.+2      	; 0xa7a <free+0xa>
 a78:	81 c0       	rjmp	.+258    	; 0xb7c <free+0x10c>
 a7a:	fc 01       	movw	r30, r24
 a7c:	32 97       	sbiw	r30, 0x02	; 2
 a7e:	13 82       	std	Z+3, r1	; 0x03
 a80:	12 82       	std	Z+2, r1	; 0x02
 a82:	a0 91 7e 04 	lds	r26, 0x047E	; 0x80047e <__flp>
 a86:	b0 91 7f 04 	lds	r27, 0x047F	; 0x80047f <__flp+0x1>
 a8a:	10 97       	sbiw	r26, 0x00	; 0
 a8c:	81 f4       	brne	.+32     	; 0xaae <free+0x3e>
 a8e:	20 81       	ld	r18, Z
 a90:	31 81       	ldd	r19, Z+1	; 0x01
 a92:	82 0f       	add	r24, r18
 a94:	93 1f       	adc	r25, r19
 a96:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <__brkval>
 a9a:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <__brkval+0x1>
 a9e:	28 17       	cp	r18, r24
 aa0:	39 07       	cpc	r19, r25
 aa2:	51 f5       	brne	.+84     	; 0xaf8 <free+0x88>
 aa4:	f0 93 7d 04 	sts	0x047D, r31	; 0x80047d <__brkval+0x1>
 aa8:	e0 93 7c 04 	sts	0x047C, r30	; 0x80047c <__brkval>
 aac:	67 c0       	rjmp	.+206    	; 0xb7c <free+0x10c>
 aae:	ed 01       	movw	r28, r26
 ab0:	20 e0       	ldi	r18, 0x00	; 0
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	ce 17       	cp	r28, r30
 ab6:	df 07       	cpc	r29, r31
 ab8:	40 f4       	brcc	.+16     	; 0xaca <free+0x5a>
 aba:	4a 81       	ldd	r20, Y+2	; 0x02
 abc:	5b 81       	ldd	r21, Y+3	; 0x03
 abe:	9e 01       	movw	r18, r28
 ac0:	41 15       	cp	r20, r1
 ac2:	51 05       	cpc	r21, r1
 ac4:	f1 f0       	breq	.+60     	; 0xb02 <free+0x92>
 ac6:	ea 01       	movw	r28, r20
 ac8:	f5 cf       	rjmp	.-22     	; 0xab4 <free+0x44>
 aca:	d3 83       	std	Z+3, r29	; 0x03
 acc:	c2 83       	std	Z+2, r28	; 0x02
 ace:	40 81       	ld	r20, Z
 ad0:	51 81       	ldd	r21, Z+1	; 0x01
 ad2:	84 0f       	add	r24, r20
 ad4:	95 1f       	adc	r25, r21
 ad6:	c8 17       	cp	r28, r24
 ad8:	d9 07       	cpc	r29, r25
 ada:	59 f4       	brne	.+22     	; 0xaf2 <free+0x82>
 adc:	88 81       	ld	r24, Y
 ade:	99 81       	ldd	r25, Y+1	; 0x01
 ae0:	84 0f       	add	r24, r20
 ae2:	95 1f       	adc	r25, r21
 ae4:	02 96       	adiw	r24, 0x02	; 2
 ae6:	91 83       	std	Z+1, r25	; 0x01
 ae8:	80 83       	st	Z, r24
 aea:	8a 81       	ldd	r24, Y+2	; 0x02
 aec:	9b 81       	ldd	r25, Y+3	; 0x03
 aee:	93 83       	std	Z+3, r25	; 0x03
 af0:	82 83       	std	Z+2, r24	; 0x02
 af2:	21 15       	cp	r18, r1
 af4:	31 05       	cpc	r19, r1
 af6:	29 f4       	brne	.+10     	; 0xb02 <free+0x92>
 af8:	f0 93 7f 04 	sts	0x047F, r31	; 0x80047f <__flp+0x1>
 afc:	e0 93 7e 04 	sts	0x047E, r30	; 0x80047e <__flp>
 b00:	3d c0       	rjmp	.+122    	; 0xb7c <free+0x10c>
 b02:	e9 01       	movw	r28, r18
 b04:	fb 83       	std	Y+3, r31	; 0x03
 b06:	ea 83       	std	Y+2, r30	; 0x02
 b08:	49 91       	ld	r20, Y+
 b0a:	59 91       	ld	r21, Y+
 b0c:	c4 0f       	add	r28, r20
 b0e:	d5 1f       	adc	r29, r21
 b10:	ec 17       	cp	r30, r28
 b12:	fd 07       	cpc	r31, r29
 b14:	61 f4       	brne	.+24     	; 0xb2e <free+0xbe>
 b16:	80 81       	ld	r24, Z
 b18:	91 81       	ldd	r25, Z+1	; 0x01
 b1a:	84 0f       	add	r24, r20
 b1c:	95 1f       	adc	r25, r21
 b1e:	02 96       	adiw	r24, 0x02	; 2
 b20:	e9 01       	movw	r28, r18
 b22:	99 83       	std	Y+1, r25	; 0x01
 b24:	88 83       	st	Y, r24
 b26:	82 81       	ldd	r24, Z+2	; 0x02
 b28:	93 81       	ldd	r25, Z+3	; 0x03
 b2a:	9b 83       	std	Y+3, r25	; 0x03
 b2c:	8a 83       	std	Y+2, r24	; 0x02
 b2e:	e0 e0       	ldi	r30, 0x00	; 0
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	12 96       	adiw	r26, 0x02	; 2
 b34:	8d 91       	ld	r24, X+
 b36:	9c 91       	ld	r25, X
 b38:	13 97       	sbiw	r26, 0x03	; 3
 b3a:	00 97       	sbiw	r24, 0x00	; 0
 b3c:	19 f0       	breq	.+6      	; 0xb44 <free+0xd4>
 b3e:	fd 01       	movw	r30, r26
 b40:	dc 01       	movw	r26, r24
 b42:	f7 cf       	rjmp	.-18     	; 0xb32 <free+0xc2>
 b44:	8d 91       	ld	r24, X+
 b46:	9c 91       	ld	r25, X
 b48:	11 97       	sbiw	r26, 0x01	; 1
 b4a:	9d 01       	movw	r18, r26
 b4c:	2e 5f       	subi	r18, 0xFE	; 254
 b4e:	3f 4f       	sbci	r19, 0xFF	; 255
 b50:	82 0f       	add	r24, r18
 b52:	93 1f       	adc	r25, r19
 b54:	20 91 7c 04 	lds	r18, 0x047C	; 0x80047c <__brkval>
 b58:	30 91 7d 04 	lds	r19, 0x047D	; 0x80047d <__brkval+0x1>
 b5c:	28 17       	cp	r18, r24
 b5e:	39 07       	cpc	r19, r25
 b60:	69 f4       	brne	.+26     	; 0xb7c <free+0x10c>
 b62:	30 97       	sbiw	r30, 0x00	; 0
 b64:	29 f4       	brne	.+10     	; 0xb70 <free+0x100>
 b66:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <__flp+0x1>
 b6a:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <__flp>
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <free+0x104>
 b70:	13 82       	std	Z+3, r1	; 0x03
 b72:	12 82       	std	Z+2, r1	; 0x02
 b74:	b0 93 7d 04 	sts	0x047D, r27	; 0x80047d <__brkval+0x1>
 b78:	a0 93 7c 04 	sts	0x047C, r26	; 0x80047c <__brkval>
 b7c:	df 91       	pop	r29
 b7e:	cf 91       	pop	r28
 b80:	08 95       	ret

00000b82 <strnlen_P>:
 b82:	fc 01       	movw	r30, r24
 b84:	05 90       	lpm	r0, Z+
 b86:	61 50       	subi	r22, 0x01	; 1
 b88:	70 40       	sbci	r23, 0x00	; 0
 b8a:	01 10       	cpse	r0, r1
 b8c:	d8 f7       	brcc	.-10     	; 0xb84 <strnlen_P+0x2>
 b8e:	80 95       	com	r24
 b90:	90 95       	com	r25
 b92:	8e 0f       	add	r24, r30
 b94:	9f 1f       	adc	r25, r31
 b96:	08 95       	ret

00000b98 <memset>:
 b98:	dc 01       	movw	r26, r24
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <memset+0x6>
 b9c:	6d 93       	st	X+, r22
 b9e:	41 50       	subi	r20, 0x01	; 1
 ba0:	50 40       	sbci	r21, 0x00	; 0
 ba2:	e0 f7       	brcc	.-8      	; 0xb9c <memset+0x4>
 ba4:	08 95       	ret

00000ba6 <strnlen>:
 ba6:	fc 01       	movw	r30, r24
 ba8:	61 50       	subi	r22, 0x01	; 1
 baa:	70 40       	sbci	r23, 0x00	; 0
 bac:	01 90       	ld	r0, Z+
 bae:	01 10       	cpse	r0, r1
 bb0:	d8 f7       	brcc	.-10     	; 0xba8 <strnlen+0x2>
 bb2:	80 95       	com	r24
 bb4:	90 95       	com	r25
 bb6:	8e 0f       	add	r24, r30
 bb8:	9f 1f       	adc	r25, r31
 bba:	08 95       	ret

00000bbc <fputc>:
 bbc:	0f 93       	push	r16
 bbe:	1f 93       	push	r17
 bc0:	cf 93       	push	r28
 bc2:	df 93       	push	r29
 bc4:	fb 01       	movw	r30, r22
 bc6:	23 81       	ldd	r18, Z+3	; 0x03
 bc8:	21 fd       	sbrc	r18, 1
 bca:	03 c0       	rjmp	.+6      	; 0xbd2 <fputc+0x16>
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	9f ef       	ldi	r25, 0xFF	; 255
 bd0:	2c c0       	rjmp	.+88     	; 0xc2a <fputc+0x6e>
 bd2:	22 ff       	sbrs	r18, 2
 bd4:	16 c0       	rjmp	.+44     	; 0xc02 <fputc+0x46>
 bd6:	46 81       	ldd	r20, Z+6	; 0x06
 bd8:	57 81       	ldd	r21, Z+7	; 0x07
 bda:	24 81       	ldd	r18, Z+4	; 0x04
 bdc:	35 81       	ldd	r19, Z+5	; 0x05
 bde:	42 17       	cp	r20, r18
 be0:	53 07       	cpc	r21, r19
 be2:	44 f4       	brge	.+16     	; 0xbf4 <fputc+0x38>
 be4:	a0 81       	ld	r26, Z
 be6:	b1 81       	ldd	r27, Z+1	; 0x01
 be8:	9d 01       	movw	r18, r26
 bea:	2f 5f       	subi	r18, 0xFF	; 255
 bec:	3f 4f       	sbci	r19, 0xFF	; 255
 bee:	31 83       	std	Z+1, r19	; 0x01
 bf0:	20 83       	st	Z, r18
 bf2:	8c 93       	st	X, r24
 bf4:	26 81       	ldd	r18, Z+6	; 0x06
 bf6:	37 81       	ldd	r19, Z+7	; 0x07
 bf8:	2f 5f       	subi	r18, 0xFF	; 255
 bfa:	3f 4f       	sbci	r19, 0xFF	; 255
 bfc:	37 83       	std	Z+7, r19	; 0x07
 bfe:	26 83       	std	Z+6, r18	; 0x06
 c00:	14 c0       	rjmp	.+40     	; 0xc2a <fputc+0x6e>
 c02:	8b 01       	movw	r16, r22
 c04:	ec 01       	movw	r28, r24
 c06:	fb 01       	movw	r30, r22
 c08:	00 84       	ldd	r0, Z+8	; 0x08
 c0a:	f1 85       	ldd	r31, Z+9	; 0x09
 c0c:	e0 2d       	mov	r30, r0
 c0e:	09 95       	icall
 c10:	89 2b       	or	r24, r25
 c12:	e1 f6       	brne	.-72     	; 0xbcc <fputc+0x10>
 c14:	d8 01       	movw	r26, r16
 c16:	16 96       	adiw	r26, 0x06	; 6
 c18:	8d 91       	ld	r24, X+
 c1a:	9c 91       	ld	r25, X
 c1c:	17 97       	sbiw	r26, 0x07	; 7
 c1e:	01 96       	adiw	r24, 0x01	; 1
 c20:	17 96       	adiw	r26, 0x07	; 7
 c22:	9c 93       	st	X, r25
 c24:	8e 93       	st	-X, r24
 c26:	16 97       	sbiw	r26, 0x06	; 6
 c28:	ce 01       	movw	r24, r28
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	1f 91       	pop	r17
 c30:	0f 91       	pop	r16
 c32:	08 95       	ret

00000c34 <__ultoa_invert>:
 c34:	fa 01       	movw	r30, r20
 c36:	aa 27       	eor	r26, r26
 c38:	28 30       	cpi	r18, 0x08	; 8
 c3a:	51 f1       	breq	.+84     	; 0xc90 <__ultoa_invert+0x5c>
 c3c:	20 31       	cpi	r18, 0x10	; 16
 c3e:	81 f1       	breq	.+96     	; 0xca0 <__ultoa_invert+0x6c>
 c40:	e8 94       	clt
 c42:	6f 93       	push	r22
 c44:	6e 7f       	andi	r22, 0xFE	; 254
 c46:	6e 5f       	subi	r22, 0xFE	; 254
 c48:	7f 4f       	sbci	r23, 0xFF	; 255
 c4a:	8f 4f       	sbci	r24, 0xFF	; 255
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	af 4f       	sbci	r26, 0xFF	; 255
 c50:	b1 e0       	ldi	r27, 0x01	; 1
 c52:	3e d0       	rcall	.+124    	; 0xcd0 <__ultoa_invert+0x9c>
 c54:	b4 e0       	ldi	r27, 0x04	; 4
 c56:	3c d0       	rcall	.+120    	; 0xcd0 <__ultoa_invert+0x9c>
 c58:	67 0f       	add	r22, r23
 c5a:	78 1f       	adc	r23, r24
 c5c:	89 1f       	adc	r24, r25
 c5e:	9a 1f       	adc	r25, r26
 c60:	a1 1d       	adc	r26, r1
 c62:	68 0f       	add	r22, r24
 c64:	79 1f       	adc	r23, r25
 c66:	8a 1f       	adc	r24, r26
 c68:	91 1d       	adc	r25, r1
 c6a:	a1 1d       	adc	r26, r1
 c6c:	6a 0f       	add	r22, r26
 c6e:	71 1d       	adc	r23, r1
 c70:	81 1d       	adc	r24, r1
 c72:	91 1d       	adc	r25, r1
 c74:	a1 1d       	adc	r26, r1
 c76:	20 d0       	rcall	.+64     	; 0xcb8 <__ultoa_invert+0x84>
 c78:	09 f4       	brne	.+2      	; 0xc7c <__ultoa_invert+0x48>
 c7a:	68 94       	set
 c7c:	3f 91       	pop	r19
 c7e:	2a e0       	ldi	r18, 0x0A	; 10
 c80:	26 9f       	mul	r18, r22
 c82:	11 24       	eor	r1, r1
 c84:	30 19       	sub	r19, r0
 c86:	30 5d       	subi	r19, 0xD0	; 208
 c88:	31 93       	st	Z+, r19
 c8a:	de f6       	brtc	.-74     	; 0xc42 <__ultoa_invert+0xe>
 c8c:	cf 01       	movw	r24, r30
 c8e:	08 95       	ret
 c90:	46 2f       	mov	r20, r22
 c92:	47 70       	andi	r20, 0x07	; 7
 c94:	40 5d       	subi	r20, 0xD0	; 208
 c96:	41 93       	st	Z+, r20
 c98:	b3 e0       	ldi	r27, 0x03	; 3
 c9a:	0f d0       	rcall	.+30     	; 0xcba <__ultoa_invert+0x86>
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__ultoa_invert+0x5c>
 c9e:	f6 cf       	rjmp	.-20     	; 0xc8c <__ultoa_invert+0x58>
 ca0:	46 2f       	mov	r20, r22
 ca2:	4f 70       	andi	r20, 0x0F	; 15
 ca4:	40 5d       	subi	r20, 0xD0	; 208
 ca6:	4a 33       	cpi	r20, 0x3A	; 58
 ca8:	18 f0       	brcs	.+6      	; 0xcb0 <__ultoa_invert+0x7c>
 caa:	49 5d       	subi	r20, 0xD9	; 217
 cac:	31 fd       	sbrc	r19, 1
 cae:	40 52       	subi	r20, 0x20	; 32
 cb0:	41 93       	st	Z+, r20
 cb2:	02 d0       	rcall	.+4      	; 0xcb8 <__ultoa_invert+0x84>
 cb4:	a9 f7       	brne	.-22     	; 0xca0 <__ultoa_invert+0x6c>
 cb6:	ea cf       	rjmp	.-44     	; 0xc8c <__ultoa_invert+0x58>
 cb8:	b4 e0       	ldi	r27, 0x04	; 4
 cba:	a6 95       	lsr	r26
 cbc:	97 95       	ror	r25
 cbe:	87 95       	ror	r24
 cc0:	77 95       	ror	r23
 cc2:	67 95       	ror	r22
 cc4:	ba 95       	dec	r27
 cc6:	c9 f7       	brne	.-14     	; 0xcba <__ultoa_invert+0x86>
 cc8:	00 97       	sbiw	r24, 0x00	; 0
 cca:	61 05       	cpc	r22, r1
 ccc:	71 05       	cpc	r23, r1
 cce:	08 95       	ret
 cd0:	9b 01       	movw	r18, r22
 cd2:	ac 01       	movw	r20, r24
 cd4:	0a 2e       	mov	r0, r26
 cd6:	06 94       	lsr	r0
 cd8:	57 95       	ror	r21
 cda:	47 95       	ror	r20
 cdc:	37 95       	ror	r19
 cde:	27 95       	ror	r18
 ce0:	ba 95       	dec	r27
 ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__ultoa_invert+0xa2>
 ce4:	62 0f       	add	r22, r18
 ce6:	73 1f       	adc	r23, r19
 ce8:	84 1f       	adc	r24, r20
 cea:	95 1f       	adc	r25, r21
 cec:	a0 1d       	adc	r26, r0
 cee:	08 95       	ret

00000cf0 <__divmodsi4>:
 cf0:	05 2e       	mov	r0, r21
 cf2:	97 fb       	bst	r25, 7
 cf4:	1e f4       	brtc	.+6      	; 0xcfc <__divmodsi4+0xc>
 cf6:	00 94       	com	r0
 cf8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__negsi2>
 cfc:	57 fd       	sbrc	r21, 7
 cfe:	07 d0       	rcall	.+14     	; 0xd0e <__divmodsi4_neg2>
 d00:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__udivmodsi4>
 d04:	07 fc       	sbrc	r0, 7
 d06:	03 d0       	rcall	.+6      	; 0xd0e <__divmodsi4_neg2>
 d08:	4e f4       	brtc	.+18     	; 0xd1c <__divmodsi4_exit>
 d0a:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__negsi2>

00000d0e <__divmodsi4_neg2>:
 d0e:	50 95       	com	r21
 d10:	40 95       	com	r20
 d12:	30 95       	com	r19
 d14:	21 95       	neg	r18
 d16:	3f 4f       	sbci	r19, 0xFF	; 255
 d18:	4f 4f       	sbci	r20, 0xFF	; 255
 d1a:	5f 4f       	sbci	r21, 0xFF	; 255

00000d1c <__divmodsi4_exit>:
 d1c:	08 95       	ret

00000d1e <__negsi2>:
 d1e:	90 95       	com	r25
 d20:	80 95       	com	r24
 d22:	70 95       	com	r23
 d24:	61 95       	neg	r22
 d26:	7f 4f       	sbci	r23, 0xFF	; 255
 d28:	8f 4f       	sbci	r24, 0xFF	; 255
 d2a:	9f 4f       	sbci	r25, 0xFF	; 255
 d2c:	08 95       	ret

00000d2e <__muluhisi3>:
 d2e:	0e 94 03 07 	call	0xe06	; 0xe06 <__umulhisi3>
 d32:	a5 9f       	mul	r26, r21
 d34:	90 0d       	add	r25, r0
 d36:	b4 9f       	mul	r27, r20
 d38:	90 0d       	add	r25, r0
 d3a:	a4 9f       	mul	r26, r20
 d3c:	80 0d       	add	r24, r0
 d3e:	91 1d       	adc	r25, r1
 d40:	11 24       	eor	r1, r1
 d42:	08 95       	ret

00000d44 <__mulshisi3>:
 d44:	b7 ff       	sbrs	r27, 7
 d46:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__muluhisi3>

00000d4a <__mulohisi3>:
 d4a:	0e 94 97 06 	call	0xd2e	; 0xd2e <__muluhisi3>
 d4e:	82 1b       	sub	r24, r18
 d50:	93 0b       	sbc	r25, r19
 d52:	08 95       	ret

00000d54 <__prologue_saves__>:
 d54:	2f 92       	push	r2
 d56:	3f 92       	push	r3
 d58:	4f 92       	push	r4
 d5a:	5f 92       	push	r5
 d5c:	6f 92       	push	r6
 d5e:	7f 92       	push	r7
 d60:	8f 92       	push	r8
 d62:	9f 92       	push	r9
 d64:	af 92       	push	r10
 d66:	bf 92       	push	r11
 d68:	cf 92       	push	r12
 d6a:	df 92       	push	r13
 d6c:	ef 92       	push	r14
 d6e:	ff 92       	push	r15
 d70:	0f 93       	push	r16
 d72:	1f 93       	push	r17
 d74:	cf 93       	push	r28
 d76:	df 93       	push	r29
 d78:	cd b7       	in	r28, 0x3d	; 61
 d7a:	de b7       	in	r29, 0x3e	; 62
 d7c:	ca 1b       	sub	r28, r26
 d7e:	db 0b       	sbc	r29, r27
 d80:	0f b6       	in	r0, 0x3f	; 63
 d82:	f8 94       	cli
 d84:	de bf       	out	0x3e, r29	; 62
 d86:	0f be       	out	0x3f, r0	; 63
 d88:	cd bf       	out	0x3d, r28	; 61
 d8a:	09 94       	ijmp

00000d8c <__epilogue_restores__>:
 d8c:	2a 88       	ldd	r2, Y+18	; 0x12
 d8e:	39 88       	ldd	r3, Y+17	; 0x11
 d90:	48 88       	ldd	r4, Y+16	; 0x10
 d92:	5f 84       	ldd	r5, Y+15	; 0x0f
 d94:	6e 84       	ldd	r6, Y+14	; 0x0e
 d96:	7d 84       	ldd	r7, Y+13	; 0x0d
 d98:	8c 84       	ldd	r8, Y+12	; 0x0c
 d9a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d9c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d9e:	b9 84       	ldd	r11, Y+9	; 0x09
 da0:	c8 84       	ldd	r12, Y+8	; 0x08
 da2:	df 80       	ldd	r13, Y+7	; 0x07
 da4:	ee 80       	ldd	r14, Y+6	; 0x06
 da6:	fd 80       	ldd	r15, Y+5	; 0x05
 da8:	0c 81       	ldd	r16, Y+4	; 0x04
 daa:	1b 81       	ldd	r17, Y+3	; 0x03
 dac:	aa 81       	ldd	r26, Y+2	; 0x02
 dae:	b9 81       	ldd	r27, Y+1	; 0x01
 db0:	ce 0f       	add	r28, r30
 db2:	d1 1d       	adc	r29, r1
 db4:	0f b6       	in	r0, 0x3f	; 63
 db6:	f8 94       	cli
 db8:	de bf       	out	0x3e, r29	; 62
 dba:	0f be       	out	0x3f, r0	; 63
 dbc:	cd bf       	out	0x3d, r28	; 61
 dbe:	ed 01       	movw	r28, r26
 dc0:	08 95       	ret

00000dc2 <__udivmodsi4>:
 dc2:	a1 e2       	ldi	r26, 0x21	; 33
 dc4:	1a 2e       	mov	r1, r26
 dc6:	aa 1b       	sub	r26, r26
 dc8:	bb 1b       	sub	r27, r27
 dca:	fd 01       	movw	r30, r26
 dcc:	0d c0       	rjmp	.+26     	; 0xde8 <__udivmodsi4_ep>

00000dce <__udivmodsi4_loop>:
 dce:	aa 1f       	adc	r26, r26
 dd0:	bb 1f       	adc	r27, r27
 dd2:	ee 1f       	adc	r30, r30
 dd4:	ff 1f       	adc	r31, r31
 dd6:	a2 17       	cp	r26, r18
 dd8:	b3 07       	cpc	r27, r19
 dda:	e4 07       	cpc	r30, r20
 ddc:	f5 07       	cpc	r31, r21
 dde:	20 f0       	brcs	.+8      	; 0xde8 <__udivmodsi4_ep>
 de0:	a2 1b       	sub	r26, r18
 de2:	b3 0b       	sbc	r27, r19
 de4:	e4 0b       	sbc	r30, r20
 de6:	f5 0b       	sbc	r31, r21

00000de8 <__udivmodsi4_ep>:
 de8:	66 1f       	adc	r22, r22
 dea:	77 1f       	adc	r23, r23
 dec:	88 1f       	adc	r24, r24
 dee:	99 1f       	adc	r25, r25
 df0:	1a 94       	dec	r1
 df2:	69 f7       	brne	.-38     	; 0xdce <__udivmodsi4_loop>
 df4:	60 95       	com	r22
 df6:	70 95       	com	r23
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	9b 01       	movw	r18, r22
 dfe:	ac 01       	movw	r20, r24
 e00:	bd 01       	movw	r22, r26
 e02:	cf 01       	movw	r24, r30
 e04:	08 95       	ret

00000e06 <__umulhisi3>:
 e06:	a2 9f       	mul	r26, r18
 e08:	b0 01       	movw	r22, r0
 e0a:	b3 9f       	mul	r27, r19
 e0c:	c0 01       	movw	r24, r0
 e0e:	a3 9f       	mul	r26, r19
 e10:	70 0d       	add	r23, r0
 e12:	81 1d       	adc	r24, r1
 e14:	11 24       	eor	r1, r1
 e16:	91 1d       	adc	r25, r1
 e18:	b2 9f       	mul	r27, r18
 e1a:	70 0d       	add	r23, r0
 e1c:	81 1d       	adc	r24, r1
 e1e:	11 24       	eor	r1, r1
 e20:	91 1d       	adc	r25, r1
 e22:	08 95       	ret

00000e24 <_exit>:
 e24:	f8 94       	cli

00000e26 <__stop_program>:
 e26:	ff cf       	rjmp	.-2      	; 0xe26 <__stop_program>
