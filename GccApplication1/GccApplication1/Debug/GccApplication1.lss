
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800124  00800124  00000d60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001897  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eaf  00000000  00000000  0000281f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dbf  00000000  00000000  000036ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  00004490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000744  00000000  00000000  000047fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000973  00000000  00000000  00004f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  000058b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_3>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 ea       	ldi	r30, 0xA8	; 168
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 32       	cpi	r26, 0x24	; 36
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a4 e2       	ldi	r26, 0x24	; 36
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 33       	cpi	r26, 0x32	; 50
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  a6:	0c 94 52 06 	jmp	0xca4	; 0xca4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(){

	set_bit(TCCR3A, COM3A0);
  ae:	eb e8       	ldi	r30, 0x8B	; 139
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
	set_bit(TCCR3B, CS00);
  b8:	ea e8       	ldi	r30, 0x8A	; 138
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	set_bit(TCCR3B, WGM12);
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
	set_bit(DDRD, PD4);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	81 bb       	out	0x11, r24	; 17
  ce:	08 95       	ret

000000d0 <ADC_sample>:
	
}

void ADC_sample(uint8_t* joystick_x, uint8_t* joystick_y, uint8_t* slider_right, uint8_t* slider_left){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	volatile char* adc_addr = (char*)0x1400;
	*joystick_x = adc_addr[0];
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f4 e1       	ldi	r31, 0x14	; 20
  d8:	a0 81       	ld	r26, Z
  da:	ec 01       	movw	r28, r24
  dc:	a8 83       	st	Y, r26
	*joystick_y = adc_addr[0];
  de:	80 81       	ld	r24, Z
  e0:	db 01       	movw	r26, r22
  e2:	8c 93       	st	X, r24
	*slider_right = adc_addr[0];
  e4:	80 81       	ld	r24, Z
  e6:	ea 01       	movw	r28, r20
  e8:	88 83       	st	Y, r24
	*slider_left = adc_addr[0];
  ea:	80 81       	ld	r24, Z
  ec:	d9 01       	movw	r26, r18
  ee:	8c 93       	st	X, r24
	
	adc_addr[0] = 0;
  f0:	10 82       	st	Z, r1
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <USART_transmit>:
}

void USART_transmit(unsigned char data){
	// wait for empty transmit buffer

	loop_until_bit_is_set(UCSR0A, UDRE0);
  f8:	5d 9b       	sbis	0x0b, 5	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <USART_transmit>
	//put data into buffer, sends the data
	UDR0 = data;
  fc:	8c b9       	out	0x0c, r24	; 12
  fe:	08 95       	ret

00000100 <USART_receive>:
}
unsigned char USART_receive( void ){
	// Wait for data to be received

	loop_until_bit_is_set(UCSR0A, RXC0);
 100:	5f 9b       	sbis	0x0b, 7	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <USART_receive>
	// Get and return received data from buffer
	return UDR0;
 104:	8c b1       	in	r24, 0x0c	; 12
 106:	08 95       	ret

00000108 <USART_init>:
 */ 
#include "ATmega162_programdriver.h"

void USART_init(unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 108:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 10a:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 10c:	88 e1       	ldi	r24, 0x18	; 24
 10e:	8a b9       	out	0x0a, r24	; 10
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)| (1 << USBS0) |(3<<UCSZ00);
 110:	8e e8       	ldi	r24, 0x8E	; 142
 112:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit, USART_receive);
 114:	60 e8       	ldi	r22, 0x80	; 128
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	8c e7       	ldi	r24, 0x7C	; 124
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <fdevopen>
 120:	08 95       	ret

00000122 <CAN_init>:
#include "CAN.h"


void CAN_init(uint8_t mode){
	
	mcp_2515_init(mode);
 122:	0e 94 1c 01 	call	0x238	; 0x238 <mcp_2515_init>
 126:	08 95       	ret

00000128 <CAN_transmit>:
	
}


void CAN_transmit(CAN_msg* msg){
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
	
	mcp_2515_write(MCP_TXB0SIDH, msg->id >> 3);
 132:	fc 01       	movw	r30, r24
 134:	60 81       	ld	r22, Z
 136:	71 81       	ldd	r23, Z+1	; 0x01
 138:	76 95       	lsr	r23
 13a:	67 95       	ror	r22
 13c:	76 95       	lsr	r23
 13e:	67 95       	ror	r22
 140:	76 95       	lsr	r23
 142:	67 95       	ror	r22
 144:	81 e3       	ldi	r24, 0x31	; 49
 146:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	mcp_2515_write(MCP_TXB0SIDL, msg->id << 5);
 14a:	f8 01       	movw	r30, r16
 14c:	60 81       	ld	r22, Z
 14e:	62 95       	swap	r22
 150:	66 0f       	add	r22, r22
 152:	60 7e       	andi	r22, 0xE0	; 224
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	mcp_2515_write(MCP_TXB0DLC, msg->length);
 15a:	f8 01       	movw	r30, r16
 15c:	62 81       	ldd	r22, Z+2	; 0x02
 15e:	85 e3       	ldi	r24, 0x35	; 53
 160:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	
	for(int x = 0; x < msg->length; x++){
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d0 e0       	ldi	r29, 0x00	; 0
 168:	09 c0       	rjmp	.+18     	; 0x17c <CAN_transmit+0x54>
		mcp_2515_write(MCP_TXB0Dm + x, msg->data[x]);
 16a:	f8 01       	movw	r30, r16
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	63 81       	ldd	r22, Z+3	; 0x03
 172:	8c 2f       	mov	r24, r28
 174:	8a 5c       	subi	r24, 0xCA	; 202
 176:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	
	mcp_2515_write(MCP_TXB0SIDH, msg->id >> 3);
	mcp_2515_write(MCP_TXB0SIDL, msg->id << 5);
	mcp_2515_write(MCP_TXB0DLC, msg->length);
	
	for(int x = 0; x < msg->length; x++){
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	f8 01       	movw	r30, r16
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	c8 17       	cp	r28, r24
 184:	d9 07       	cpc	r29, r25
 186:	8c f3       	brlt	.-30     	; 0x16a <CAN_transmit+0x42>
		mcp_2515_write(MCP_TXB0Dm + x, msg->data[x]);
	}
	
	mcp_2515_request_to_send(0);
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 04 01 	call	0x208	; 0x208 <mcp_2515_request_to_send>
	
}
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	1f 91       	pop	r17
 194:	0f 91       	pop	r16
 196:	08 95       	ret

00000198 <mcp_2515_reset>:
	spi_write(address);
	spi_write(mask);
	spi_write(data);
	
	CAN_disable_SPI;
}
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	88 bb       	out	0x18, r24	; 24
 19e:	80 ec       	ldi	r24, 0xC0	; 192
 1a0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1a4:	88 b3       	in	r24, 0x18	; 24
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	88 bb       	out	0x18, r24	; 24
 1aa:	83 ec       	ldi	r24, 0xC3	; 195
 1ac:	99 e0       	ldi	r25, 0x09	; 9
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <mcp_2515_reset+0x16>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <mcp_2515_reset+0x1c>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <mcp_2515_write>:
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	d8 2f       	mov	r29, r24
 1be:	c6 2f       	mov	r28, r22
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8f 7e       	andi	r24, 0xEF	; 239
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1cc:	8d 2f       	mov	r24, r29
 1ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	80 61       	ori	r24, 0x10	; 16
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <mcp_2515_read>:
 1e4:	cf 93       	push	r28
 1e6:	c8 2f       	mov	r28, r24
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	8f 7e       	andi	r24, 0xEF	; 239
 1ec:	88 bb       	out	0x18, r24	; 24
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1f4:	8c 2f       	mov	r24, r28
 1f6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
 1fa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <spi_read>
 1fe:	98 b3       	in	r25, 0x18	; 24
 200:	90 61       	ori	r25, 0x10	; 16
 202:	98 bb       	out	0x18, r25	; 24
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <mcp_2515_request_to_send>:

void mcp_2515_request_to_send(uint8_t buffer){
	CAN_enable_SPI;
 208:	98 b3       	in	r25, 0x18	; 24
 20a:	9f 7e       	andi	r25, 0xEF	; 239
 20c:	98 bb       	out	0x18, r25	; 24
	
	spi_write(MCP_RTS_TX + (0b1 << buffer));
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	a9 01       	movw	r20, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <mcp_2515_request_to_send+0x12>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <mcp_2515_request_to_send+0xe>
 21e:	ca 01       	movw	r24, r20
 220:	80 58       	subi	r24, 0x80	; 128
 222:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <spi_write>
	
	CAN_disable_SPI;
 226:	88 b3       	in	r24, 0x18	; 24
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	08 95       	ret

0000022e <mcp_2515_set_mode>:
}

void mcp_2515_set_mode(uint8_t mode){
	mcp_2515_write(MCP_CANCTRL, mode);
 22e:	68 2f       	mov	r22, r24
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
 236:	08 95       	ret

00000238 <mcp_2515_init>:
 *  Author: oystebw
 */ 

#include "CAN_controller.h"

void mcp_2515_init(uint8_t mode){
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	18 2f       	mov	r17, r24
	spi_init();
 240:	0e 94 be 01 	call	0x37c	; 0x37c <spi_init>
	mcp_2515_reset();
 244:	0e 94 cc 00 	call	0x198	; 0x198 <mcp_2515_reset>
	time quantum (T_q) = 2*T_osc
	*/

	uint8_t BRP = CAN_FREQ / (2 * 16 * BAUDRATE);
	
	mcp_2515_write(MCP_CNF3, WAKFIL_DISABLE | (PS2 - 1));
 248:	66 e0       	ldi	r22, 0x06	; 6
 24a:	88 e2       	ldi	r24, 0x28	; 40
 24c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	mcp_2515_write(MCP_CNF2, BTLMODE | SAMPLE_3X | ((PS1 - 1) << 3) | (PROSEG - 1));
 250:	69 ee       	ldi	r22, 0xE9	; 233
 252:	89 e2       	ldi	r24, 0x29	; 41
 254:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	mcp_2515_write(MCP_CNF1, SJW4 | (BRP-1));
 258:	61 ec       	ldi	r22, 0xC1	; 193
 25a:	8a e2       	ldi	r24, 0x2A	; 42
 25c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <mcp_2515_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	87 ea       	ldi	r24, 0xA7	; 167
 262:	91 e6       	ldi	r25, 0x61	; 97
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <mcp_2515_init+0x2c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <mcp_2515_init+0x32>
 26a:	00 00       	nop
	
	_delay_ms(100);

	printf("%x\r\n", mcp_2515_read(MCP_CNF1));
 26c:	8a e2       	ldi	r24, 0x2A	; 42
 26e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <mcp_2515_read>
 272:	1f 92       	push	r1
 274:	8f 93       	push	r24
 276:	c1 e1       	ldi	r28, 0x11	; 17
 278:	d1 e0       	ldi	r29, 0x01	; 1
 27a:	df 93       	push	r29
 27c:	cf 93       	push	r28
 27e:	0e 94 30 02 	call	0x460	; 0x460 <printf>
	printf("%x\r\n", mcp_2515_read(MCP_CNF2));
 282:	89 e2       	ldi	r24, 0x29	; 41
 284:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <mcp_2515_read>
 288:	1f 92       	push	r1
 28a:	8f 93       	push	r24
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	0e 94 30 02 	call	0x460	; 0x460 <printf>
	printf("%x\r\n", mcp_2515_read(MCP_CNF3));
 294:	88 e2       	ldi	r24, 0x28	; 40
 296:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <mcp_2515_read>
 29a:	1f 92       	push	r1
 29c:	8f 93       	push	r24
 29e:	df 93       	push	r29
 2a0:	cf 93       	push	r28
 2a2:	0e 94 30 02 	call	0x460	; 0x460 <printf>
	
	
	mcp_2515_set_mode(mode);
 2a6:	81 2f       	mov	r24, r17
 2a8:	0e 94 17 01 	call	0x22e	; 0x22e <mcp_2515_set_mode>
}
 2ac:	8d b7       	in	r24, 0x3d	; 61
 2ae:	9e b7       	in	r25, 0x3e	; 62
 2b0:	0c 96       	adiw	r24, 0x0c	; 12
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	9e bf       	out	0x3e, r25	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	8d bf       	out	0x3d, r24	; 61
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <__vector_3>:
	//enable INT2 in the General Interrupt Control Register (GICR)
	set_bit(GICR, INT2);
	
}

ISR(INT2_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1

 2ce:	0f 90       	pop	r0
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	0f 90       	pop	r0
 2d4:	1f 90       	pop	r1
 2d6:	18 95       	reti

000002d8 <main>:
#include "joystick.h"
#include "menu.h"
#include "CAN.h"


int main(void){
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
 2e0:	2b 97       	sbiw	r28, 0x0b	; 11
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	f8 94       	cli
 2e6:	de bf       	out	0x3e, r29	; 62
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	cd bf       	out	0x3d, r28	; 61
    // enable global interrupt flags
	//interrupt_init();
	USART_init(MYUBRR);
 2ec:	8f e1       	ldi	r24, 0x1F	; 31
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 84 00 	call	0x108	; 0x108 <USART_init>
	SRAM_init();
 2f4:	0e 94 de 01 	call	0x3bc	; 0x3bc <SRAM_init>
	ADC_init();
 2f8:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	//oled_init_program();
	//menu_init();
	CAN_init(MODE_NORMAL);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 91 00 	call	0x122	; 0x122 <CAN_init>
	
	CAN_msg message = {1, 4, "Hello!"};
 302:	8b e0       	ldi	r24, 0x0B	; 11
 304:	e6 e0       	ldi	r30, 0x06	; 6
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	de 01       	movw	r26, r28
 30a:	11 96       	adiw	r26, 0x01	; 1
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	8a 95       	dec	r24
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x34>
	
	while(1){
		ADC_sample(&joystick_x, &joystick_y, &slider_right, &slider_left);
 314:	26 e2       	ldi	r18, 0x26	; 38
 316:	31 e0       	ldi	r19, 0x01	; 1
 318:	47 e2       	ldi	r20, 0x27	; 39
 31a:	51 e0       	ldi	r21, 0x01	; 1
 31c:	64 e2       	ldi	r22, 0x24	; 36
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	85 e2       	ldi	r24, 0x25	; 37
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 68 00 	call	0xd0	; 0xd0 <ADC_sample>
			menu_navigate(joystick_position, glob_current_menu);
			menu_print();
		}
		*/
		
		message.data[0] = joystick_x;
 328:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <joystick_x>
 32c:	8c 83       	std	Y+4, r24	; 0x04
		message.data[1] = joystick_y;
 32e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__data_end>
 332:	9d 83       	std	Y+5, r25	; 0x05
		message.data[2] = slider_right;
 334:	20 91 27 01 	lds	r18, 0x0127	; 0x800127 <slider_right>
 338:	2e 83       	std	Y+6, r18	; 0x06
		message.data[3] = slider_left;
 33a:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <slider_left>
 33e:	3f 83       	std	Y+7, r19	; 0x07
		
		printf("%u\t%u\t%u\t%u\n\r", joystick_x, joystick_y, slider_right, slider_left);
 340:	1f 92       	push	r1
 342:	3f 93       	push	r19
 344:	1f 92       	push	r1
 346:	2f 93       	push	r18
 348:	1f 92       	push	r1
 34a:	9f 93       	push	r25
 34c:	1f 92       	push	r1
 34e:	8f 93       	push	r24
 350:	86 e1       	ldi	r24, 0x16	; 22
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	9f 93       	push	r25
 356:	8f 93       	push	r24
 358:	0e 94 30 02 	call	0x460	; 0x460 <printf>
		
		CAN_transmit(&message);
 35c:	ce 01       	movw	r24, r28
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	0e 94 94 00 	call	0x128	; 0x128 <CAN_transmit>
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	9f e2       	ldi	r25, 0x2F	; 47
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <main+0x90>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x96>
 36e:	00 00       	nop
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	cc cf       	rjmp	.-104    	; 0x314 <main+0x3c>

0000037c <spi_init>:
#include "SPI.h"

void spi_init(void){
	/* Set SCL, MOSI & PB4 to output, MISO and the rest to input */

	set_bit(DDRB, PB5);
 37c:	87 b3       	in	r24, 0x17	; 23
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB7);
 382:	87 b3       	in	r24, 0x17	; 23
 384:	80 68       	ori	r24, 0x80	; 128
 386:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB, PB4);
 388:	87 b3       	in	r24, 0x17	; 23
 38a:	80 61       	ori	r24, 0x10	; 16
 38c:	87 bb       	out	0x17, r24	; 23
	set_bit(PORTB, PB4);
 38e:	88 b3       	in	r24, 0x18	; 24
 390:	80 61       	ori	r24, 0x10	; 16
 392:	88 bb       	out	0x18, r24	; 24
	
	/* Enable SPI, set it in Master and set clock*/

	set_bit(SPCR, SPE);
 394:	8d b1       	in	r24, 0x0d	; 13
 396:	80 64       	ori	r24, 0x40	; 64
 398:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, MSTR);
 39a:	8d b1       	in	r24, 0x0d	; 13
 39c:	80 61       	ori	r24, 0x10	; 16
 39e:	8d b9       	out	0x0d, r24	; 13
	set_bit(SPCR, SPR0);
 3a0:	8d b1       	in	r24, 0x0d	; 13
 3a2:	81 60       	ori	r24, 0x01	; 1
 3a4:	8d b9       	out	0x0d, r24	; 13
 3a6:	08 95       	ret

000003a8 <spi_write>:
}

void spi_write(uint8_t data){
	/* Start transmission */

	SPDR = data;
 3a8:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	loop_until_bit_is_set(SPSR, SPIF);
 3aa:	77 9b       	sbis	0x0e, 7	; 14
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <spi_write+0x2>

}
 3ae:	08 95       	ret

000003b0 <spi_read>:

uint8_t spi_read(){
	
	SPDR = 0xFF;
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	8f b9       	out	0x0f, r24	; 15
	
	loop_until_bit_is_set(SPSR, SPIF);
 3b4:	77 9b       	sbis	0x0e, 7	; 14
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <spi_read+0x4>
	
	return SPDR;
 3b8:	8f b1       	in	r24, 0x0f	; 15
 3ba:	08 95       	ret

000003bc <SRAM_init>:
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
}

void SRAM_init(){
	set_bit(MCUCR, SRE);
 3bc:	85 b7       	in	r24, 0x35	; 53
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
 3c2:	80 b7       	in	r24, 0x30	; 48
 3c4:	80 62       	ori	r24, 0x20	; 32
 3c6:	80 bf       	out	0x30, r24	; 48
 3c8:	08 95       	ret

000003ca <fdevopen>:
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	00 97       	sbiw	r24, 0x00	; 0
 3d4:	31 f4       	brne	.+12     	; 0x3e2 <fdevopen+0x18>
 3d6:	61 15       	cp	r22, r1
 3d8:	71 05       	cpc	r23, r1
 3da:	19 f4       	brne	.+6      	; 0x3e2 <fdevopen+0x18>
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	3a c0       	rjmp	.+116    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 3e2:	8b 01       	movw	r16, r22
 3e4:	ec 01       	movw	r28, r24
 3e6:	6e e0       	ldi	r22, 0x0E	; 14
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 27 04 	call	0x84e	; 0x84e <calloc>
 3f2:	fc 01       	movw	r30, r24
 3f4:	89 2b       	or	r24, r25
 3f6:	91 f3       	breq	.-28     	; 0x3dc <fdevopen+0x12>
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	83 83       	std	Z+3, r24	; 0x03
 3fc:	01 15       	cp	r16, r1
 3fe:	11 05       	cpc	r17, r1
 400:	71 f0       	breq	.+28     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 402:	13 87       	std	Z+11, r17	; 0x0b
 404:	02 87       	std	Z+10, r16	; 0x0a
 406:	81 e8       	ldi	r24, 0x81	; 129
 408:	83 83       	std	Z+3, r24	; 0x03
 40a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__iob>
 40e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__iob+0x1>
 412:	89 2b       	or	r24, r25
 414:	21 f4       	brne	.+8      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 416:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <__iob+0x1>
 41a:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <__iob>
 41e:	20 97       	sbiw	r28, 0x00	; 0
 420:	c9 f0       	breq	.+50     	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 422:	d1 87       	std	Z+9, r29	; 0x09
 424:	c0 87       	std	Z+8, r28	; 0x08
 426:	83 81       	ldd	r24, Z+3	; 0x03
 428:	82 60       	ori	r24, 0x02	; 2
 42a:	83 83       	std	Z+3, r24	; 0x03
 42c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__iob+0x2>
 430:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__iob+0x3>
 434:	89 2b       	or	r24, r25
 436:	71 f4       	brne	.+28     	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 438:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <__iob+0x3>
 43c:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <__iob+0x2>
 440:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__iob+0x4>
 444:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__iob+0x5>
 448:	89 2b       	or	r24, r25
 44a:	21 f4       	brne	.+8      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 44c:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__iob+0x5>
 450:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__iob+0x4>
 454:	cf 01       	movw	r24, r30
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <printf>:
 460:	a0 e0       	ldi	r26, 0x00	; 0
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e6 e3       	ldi	r30, 0x36	; 54
 466:	f2 e0       	ldi	r31, 0x02	; 2
 468:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__prologue_saves__+0x20>
 46c:	ae 01       	movw	r20, r28
 46e:	4b 5f       	subi	r20, 0xFB	; 251
 470:	5f 4f       	sbci	r21, 0xFF	; 255
 472:	fa 01       	movw	r30, r20
 474:	61 91       	ld	r22, Z+
 476:	71 91       	ld	r23, Z+
 478:	af 01       	movw	r20, r30
 47a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__iob+0x2>
 47e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__iob+0x3>
 482:	0e 94 46 02 	call	0x48c	; 0x48c <vfprintf>
 486:	e2 e0       	ldi	r30, 0x02	; 2
 488:	0c 94 47 06 	jmp	0xc8e	; 0xc8e <__epilogue_restores__+0x20>

0000048c <vfprintf>:
 48c:	ab e0       	ldi	r26, 0x0B	; 11
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	ec e4       	ldi	r30, 0x4C	; 76
 492:	f2 e0       	ldi	r31, 0x02	; 2
 494:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__prologue_saves__>
 498:	6c 01       	movw	r12, r24
 49a:	7b 01       	movw	r14, r22
 49c:	8a 01       	movw	r16, r20
 49e:	fc 01       	movw	r30, r24
 4a0:	17 82       	std	Z+7, r1	; 0x07
 4a2:	16 82       	std	Z+6, r1	; 0x06
 4a4:	83 81       	ldd	r24, Z+3	; 0x03
 4a6:	81 ff       	sbrs	r24, 1
 4a8:	cc c1       	rjmp	.+920    	; 0x842 <__stack+0x343>
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	3c 01       	movw	r6, r24
 4b0:	f6 01       	movw	r30, r12
 4b2:	93 81       	ldd	r25, Z+3	; 0x03
 4b4:	f7 01       	movw	r30, r14
 4b6:	93 fd       	sbrc	r25, 3
 4b8:	85 91       	lpm	r24, Z+
 4ba:	93 ff       	sbrs	r25, 3
 4bc:	81 91       	ld	r24, Z+
 4be:	7f 01       	movw	r14, r30
 4c0:	88 23       	and	r24, r24
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <vfprintf+0x3a>
 4c4:	ba c1       	rjmp	.+884    	; 0x83a <__stack+0x33b>
 4c6:	85 32       	cpi	r24, 0x25	; 37
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <vfprintf+0x4c>
 4ca:	93 fd       	sbrc	r25, 3
 4cc:	85 91       	lpm	r24, Z+
 4ce:	93 ff       	sbrs	r25, 3
 4d0:	81 91       	ld	r24, Z+
 4d2:	7f 01       	movw	r14, r30
 4d4:	85 32       	cpi	r24, 0x25	; 37
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <vfprintf+0x56>
 4d8:	b6 01       	movw	r22, r12
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 4e0:	e7 cf       	rjmp	.-50     	; 0x4b0 <vfprintf+0x24>
 4e2:	91 2c       	mov	r9, r1
 4e4:	21 2c       	mov	r2, r1
 4e6:	31 2c       	mov	r3, r1
 4e8:	ff e1       	ldi	r31, 0x1F	; 31
 4ea:	f3 15       	cp	r31, r3
 4ec:	d8 f0       	brcs	.+54     	; 0x524 <__stack+0x25>
 4ee:	8b 32       	cpi	r24, 0x2B	; 43
 4f0:	79 f0       	breq	.+30     	; 0x510 <__stack+0x11>
 4f2:	38 f4       	brcc	.+14     	; 0x502 <__stack+0x3>
 4f4:	80 32       	cpi	r24, 0x20	; 32
 4f6:	79 f0       	breq	.+30     	; 0x516 <__stack+0x17>
 4f8:	83 32       	cpi	r24, 0x23	; 35
 4fa:	a1 f4       	brne	.+40     	; 0x524 <__stack+0x25>
 4fc:	23 2d       	mov	r18, r3
 4fe:	20 61       	ori	r18, 0x10	; 16
 500:	1d c0       	rjmp	.+58     	; 0x53c <__stack+0x3d>
 502:	8d 32       	cpi	r24, 0x2D	; 45
 504:	61 f0       	breq	.+24     	; 0x51e <__stack+0x1f>
 506:	80 33       	cpi	r24, 0x30	; 48
 508:	69 f4       	brne	.+26     	; 0x524 <__stack+0x25>
 50a:	23 2d       	mov	r18, r3
 50c:	21 60       	ori	r18, 0x01	; 1
 50e:	16 c0       	rjmp	.+44     	; 0x53c <__stack+0x3d>
 510:	83 2d       	mov	r24, r3
 512:	82 60       	ori	r24, 0x02	; 2
 514:	38 2e       	mov	r3, r24
 516:	e3 2d       	mov	r30, r3
 518:	e4 60       	ori	r30, 0x04	; 4
 51a:	3e 2e       	mov	r3, r30
 51c:	2a c0       	rjmp	.+84     	; 0x572 <__stack+0x73>
 51e:	f3 2d       	mov	r31, r3
 520:	f8 60       	ori	r31, 0x08	; 8
 522:	1d c0       	rjmp	.+58     	; 0x55e <__stack+0x5f>
 524:	37 fc       	sbrc	r3, 7
 526:	2d c0       	rjmp	.+90     	; 0x582 <__stack+0x83>
 528:	20 ed       	ldi	r18, 0xD0	; 208
 52a:	28 0f       	add	r18, r24
 52c:	2a 30       	cpi	r18, 0x0A	; 10
 52e:	40 f0       	brcs	.+16     	; 0x540 <__stack+0x41>
 530:	8e 32       	cpi	r24, 0x2E	; 46
 532:	b9 f4       	brne	.+46     	; 0x562 <__stack+0x63>
 534:	36 fc       	sbrc	r3, 6
 536:	81 c1       	rjmp	.+770    	; 0x83a <__stack+0x33b>
 538:	23 2d       	mov	r18, r3
 53a:	20 64       	ori	r18, 0x40	; 64
 53c:	32 2e       	mov	r3, r18
 53e:	19 c0       	rjmp	.+50     	; 0x572 <__stack+0x73>
 540:	36 fe       	sbrs	r3, 6
 542:	06 c0       	rjmp	.+12     	; 0x550 <__stack+0x51>
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	98 9e       	mul	r9, r24
 548:	20 0d       	add	r18, r0
 54a:	11 24       	eor	r1, r1
 54c:	92 2e       	mov	r9, r18
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__stack+0x73>
 550:	ea e0       	ldi	r30, 0x0A	; 10
 552:	2e 9e       	mul	r2, r30
 554:	20 0d       	add	r18, r0
 556:	11 24       	eor	r1, r1
 558:	22 2e       	mov	r2, r18
 55a:	f3 2d       	mov	r31, r3
 55c:	f0 62       	ori	r31, 0x20	; 32
 55e:	3f 2e       	mov	r3, r31
 560:	08 c0       	rjmp	.+16     	; 0x572 <__stack+0x73>
 562:	8c 36       	cpi	r24, 0x6C	; 108
 564:	21 f4       	brne	.+8      	; 0x56e <__stack+0x6f>
 566:	83 2d       	mov	r24, r3
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	38 2e       	mov	r3, r24
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x73>
 56e:	88 36       	cpi	r24, 0x68	; 104
 570:	41 f4       	brne	.+16     	; 0x582 <__stack+0x83>
 572:	f7 01       	movw	r30, r14
 574:	93 fd       	sbrc	r25, 3
 576:	85 91       	lpm	r24, Z+
 578:	93 ff       	sbrs	r25, 3
 57a:	81 91       	ld	r24, Z+
 57c:	7f 01       	movw	r14, r30
 57e:	81 11       	cpse	r24, r1
 580:	b3 cf       	rjmp	.-154    	; 0x4e8 <vfprintf+0x5c>
 582:	98 2f       	mov	r25, r24
 584:	9f 7d       	andi	r25, 0xDF	; 223
 586:	95 54       	subi	r25, 0x45	; 69
 588:	93 30       	cpi	r25, 0x03	; 3
 58a:	28 f4       	brcc	.+10     	; 0x596 <__stack+0x97>
 58c:	0c 5f       	subi	r16, 0xFC	; 252
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	9f e3       	ldi	r25, 0x3F	; 63
 592:	99 83       	std	Y+1, r25	; 0x01
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <__stack+0xb1>
 596:	83 36       	cpi	r24, 0x63	; 99
 598:	31 f0       	breq	.+12     	; 0x5a6 <__stack+0xa7>
 59a:	83 37       	cpi	r24, 0x73	; 115
 59c:	71 f0       	breq	.+28     	; 0x5ba <__stack+0xbb>
 59e:	83 35       	cpi	r24, 0x53	; 83
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__stack+0xa5>
 5a2:	59 c0       	rjmp	.+178    	; 0x656 <__stack+0x157>
 5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <__stack+0xe9>
 5a6:	f8 01       	movw	r30, r16
 5a8:	80 81       	ld	r24, Z
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	0e 5f       	subi	r16, 0xFE	; 254
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
 5b0:	88 24       	eor	r8, r8
 5b2:	83 94       	inc	r8
 5b4:	91 2c       	mov	r9, r1
 5b6:	53 01       	movw	r10, r6
 5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <__stack+0xe1>
 5ba:	28 01       	movw	r4, r16
 5bc:	f2 e0       	ldi	r31, 0x02	; 2
 5be:	4f 0e       	add	r4, r31
 5c0:	51 1c       	adc	r5, r1
 5c2:	f8 01       	movw	r30, r16
 5c4:	a0 80       	ld	r10, Z
 5c6:	b1 80       	ldd	r11, Z+1	; 0x01
 5c8:	36 fe       	sbrs	r3, 6
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <__stack+0xd3>
 5cc:	69 2d       	mov	r22, r9
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__stack+0xd7>
 5d2:	6f ef       	ldi	r22, 0xFF	; 255
 5d4:	7f ef       	ldi	r23, 0xFF	; 255
 5d6:	c5 01       	movw	r24, r10
 5d8:	0e 94 76 05 	call	0xaec	; 0xaec <strnlen>
 5dc:	4c 01       	movw	r8, r24
 5de:	82 01       	movw	r16, r4
 5e0:	f3 2d       	mov	r31, r3
 5e2:	ff 77       	andi	r31, 0x7F	; 127
 5e4:	3f 2e       	mov	r3, r31
 5e6:	16 c0       	rjmp	.+44     	; 0x614 <__stack+0x115>
 5e8:	28 01       	movw	r4, r16
 5ea:	22 e0       	ldi	r18, 0x02	; 2
 5ec:	42 0e       	add	r4, r18
 5ee:	51 1c       	adc	r5, r1
 5f0:	f8 01       	movw	r30, r16
 5f2:	a0 80       	ld	r10, Z
 5f4:	b1 80       	ldd	r11, Z+1	; 0x01
 5f6:	36 fe       	sbrs	r3, 6
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <__stack+0x101>
 5fa:	69 2d       	mov	r22, r9
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <__stack+0x105>
 600:	6f ef       	ldi	r22, 0xFF	; 255
 602:	7f ef       	ldi	r23, 0xFF	; 255
 604:	c5 01       	movw	r24, r10
 606:	0e 94 64 05 	call	0xac8	; 0xac8 <strnlen_P>
 60a:	4c 01       	movw	r8, r24
 60c:	f3 2d       	mov	r31, r3
 60e:	f0 68       	ori	r31, 0x80	; 128
 610:	3f 2e       	mov	r3, r31
 612:	82 01       	movw	r16, r4
 614:	33 fc       	sbrc	r3, 3
 616:	1b c0       	rjmp	.+54     	; 0x64e <__stack+0x14f>
 618:	82 2d       	mov	r24, r2
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	88 16       	cp	r8, r24
 61e:	99 06       	cpc	r9, r25
 620:	b0 f4       	brcc	.+44     	; 0x64e <__stack+0x14f>
 622:	b6 01       	movw	r22, r12
 624:	80 e2       	ldi	r24, 0x20	; 32
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 62c:	2a 94       	dec	r2
 62e:	f4 cf       	rjmp	.-24     	; 0x618 <__stack+0x119>
 630:	f5 01       	movw	r30, r10
 632:	37 fc       	sbrc	r3, 7
 634:	85 91       	lpm	r24, Z+
 636:	37 fe       	sbrs	r3, 7
 638:	81 91       	ld	r24, Z+
 63a:	5f 01       	movw	r10, r30
 63c:	b6 01       	movw	r22, r12
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 644:	21 10       	cpse	r2, r1
 646:	2a 94       	dec	r2
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	82 1a       	sub	r8, r18
 64c:	91 08       	sbc	r9, r1
 64e:	81 14       	cp	r8, r1
 650:	91 04       	cpc	r9, r1
 652:	71 f7       	brne	.-36     	; 0x630 <__stack+0x131>
 654:	e8 c0       	rjmp	.+464    	; 0x826 <__stack+0x327>
 656:	84 36       	cpi	r24, 0x64	; 100
 658:	11 f0       	breq	.+4      	; 0x65e <__stack+0x15f>
 65a:	89 36       	cpi	r24, 0x69	; 105
 65c:	41 f5       	brne	.+80     	; 0x6ae <__stack+0x1af>
 65e:	f8 01       	movw	r30, r16
 660:	37 fe       	sbrs	r3, 7
 662:	07 c0       	rjmp	.+14     	; 0x672 <__stack+0x173>
 664:	60 81       	ld	r22, Z
 666:	71 81       	ldd	r23, Z+1	; 0x01
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	08 c0       	rjmp	.+16     	; 0x682 <__stack+0x183>
 672:	60 81       	ld	r22, Z
 674:	71 81       	ldd	r23, Z+1	; 0x01
 676:	07 2e       	mov	r0, r23
 678:	00 0c       	add	r0, r0
 67a:	88 0b       	sbc	r24, r24
 67c:	99 0b       	sbc	r25, r25
 67e:	0e 5f       	subi	r16, 0xFE	; 254
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	f3 2d       	mov	r31, r3
 684:	ff 76       	andi	r31, 0x6F	; 111
 686:	3f 2e       	mov	r3, r31
 688:	97 ff       	sbrs	r25, 7
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__stack+0x19f>
 68c:	90 95       	com	r25
 68e:	80 95       	com	r24
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	f0 68       	ori	r31, 0x80	; 128
 69c:	3f 2e       	mov	r3, r31
 69e:	2a e0       	ldi	r18, 0x0A	; 10
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	a3 01       	movw	r20, r6
 6a4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 6a8:	88 2e       	mov	r8, r24
 6aa:	86 18       	sub	r8, r6
 6ac:	45 c0       	rjmp	.+138    	; 0x738 <__stack+0x239>
 6ae:	85 37       	cpi	r24, 0x75	; 117
 6b0:	31 f4       	brne	.+12     	; 0x6be <__stack+0x1bf>
 6b2:	23 2d       	mov	r18, r3
 6b4:	2f 7e       	andi	r18, 0xEF	; 239
 6b6:	b2 2e       	mov	r11, r18
 6b8:	2a e0       	ldi	r18, 0x0A	; 10
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	25 c0       	rjmp	.+74     	; 0x708 <__stack+0x209>
 6be:	93 2d       	mov	r25, r3
 6c0:	99 7f       	andi	r25, 0xF9	; 249
 6c2:	b9 2e       	mov	r11, r25
 6c4:	8f 36       	cpi	r24, 0x6F	; 111
 6c6:	c1 f0       	breq	.+48     	; 0x6f8 <__stack+0x1f9>
 6c8:	18 f4       	brcc	.+6      	; 0x6d0 <__stack+0x1d1>
 6ca:	88 35       	cpi	r24, 0x58	; 88
 6cc:	79 f0       	breq	.+30     	; 0x6ec <__stack+0x1ed>
 6ce:	b5 c0       	rjmp	.+362    	; 0x83a <__stack+0x33b>
 6d0:	80 37       	cpi	r24, 0x70	; 112
 6d2:	19 f0       	breq	.+6      	; 0x6da <__stack+0x1db>
 6d4:	88 37       	cpi	r24, 0x78	; 120
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__stack+0x1e1>
 6d8:	b0 c0       	rjmp	.+352    	; 0x83a <__stack+0x33b>
 6da:	e9 2f       	mov	r30, r25
 6dc:	e0 61       	ori	r30, 0x10	; 16
 6de:	be 2e       	mov	r11, r30
 6e0:	b4 fe       	sbrs	r11, 4
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__stack+0x1ff>
 6e4:	fb 2d       	mov	r31, r11
 6e6:	f4 60       	ori	r31, 0x04	; 4
 6e8:	bf 2e       	mov	r11, r31
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__stack+0x1ff>
 6ec:	34 fe       	sbrs	r3, 4
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <__stack+0x205>
 6f0:	29 2f       	mov	r18, r25
 6f2:	26 60       	ori	r18, 0x06	; 6
 6f4:	b2 2e       	mov	r11, r18
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <__stack+0x205>
 6f8:	28 e0       	ldi	r18, 0x08	; 8
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <__stack+0x209>
 6fe:	20 e1       	ldi	r18, 0x10	; 16
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <__stack+0x209>
 704:	20 e1       	ldi	r18, 0x10	; 16
 706:	32 e0       	ldi	r19, 0x02	; 2
 708:	f8 01       	movw	r30, r16
 70a:	b7 fe       	sbrs	r11, 7
 70c:	07 c0       	rjmp	.+14     	; 0x71c <__stack+0x21d>
 70e:	60 81       	ld	r22, Z
 710:	71 81       	ldd	r23, Z+1	; 0x01
 712:	82 81       	ldd	r24, Z+2	; 0x02
 714:	93 81       	ldd	r25, Z+3	; 0x03
 716:	0c 5f       	subi	r16, 0xFC	; 252
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	06 c0       	rjmp	.+12     	; 0x728 <__stack+0x229>
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	a3 01       	movw	r20, r6
 72a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 72e:	88 2e       	mov	r8, r24
 730:	86 18       	sub	r8, r6
 732:	fb 2d       	mov	r31, r11
 734:	ff 77       	andi	r31, 0x7F	; 127
 736:	3f 2e       	mov	r3, r31
 738:	36 fe       	sbrs	r3, 6
 73a:	0d c0       	rjmp	.+26     	; 0x756 <__stack+0x257>
 73c:	23 2d       	mov	r18, r3
 73e:	2e 7f       	andi	r18, 0xFE	; 254
 740:	a2 2e       	mov	r10, r18
 742:	89 14       	cp	r8, r9
 744:	58 f4       	brcc	.+22     	; 0x75c <__stack+0x25d>
 746:	34 fe       	sbrs	r3, 4
 748:	0b c0       	rjmp	.+22     	; 0x760 <__stack+0x261>
 74a:	32 fc       	sbrc	r3, 2
 74c:	09 c0       	rjmp	.+18     	; 0x760 <__stack+0x261>
 74e:	83 2d       	mov	r24, r3
 750:	8e 7e       	andi	r24, 0xEE	; 238
 752:	a8 2e       	mov	r10, r24
 754:	05 c0       	rjmp	.+10     	; 0x760 <__stack+0x261>
 756:	b8 2c       	mov	r11, r8
 758:	a3 2c       	mov	r10, r3
 75a:	03 c0       	rjmp	.+6      	; 0x762 <__stack+0x263>
 75c:	b8 2c       	mov	r11, r8
 75e:	01 c0       	rjmp	.+2      	; 0x762 <__stack+0x263>
 760:	b9 2c       	mov	r11, r9
 762:	a4 fe       	sbrs	r10, 4
 764:	0f c0       	rjmp	.+30     	; 0x784 <__stack+0x285>
 766:	fe 01       	movw	r30, r28
 768:	e8 0d       	add	r30, r8
 76a:	f1 1d       	adc	r31, r1
 76c:	80 81       	ld	r24, Z
 76e:	80 33       	cpi	r24, 0x30	; 48
 770:	21 f4       	brne	.+8      	; 0x77a <__stack+0x27b>
 772:	9a 2d       	mov	r25, r10
 774:	99 7e       	andi	r25, 0xE9	; 233
 776:	a9 2e       	mov	r10, r25
 778:	09 c0       	rjmp	.+18     	; 0x78c <__stack+0x28d>
 77a:	a2 fe       	sbrs	r10, 2
 77c:	06 c0       	rjmp	.+12     	; 0x78a <__stack+0x28b>
 77e:	b3 94       	inc	r11
 780:	b3 94       	inc	r11
 782:	04 c0       	rjmp	.+8      	; 0x78c <__stack+0x28d>
 784:	8a 2d       	mov	r24, r10
 786:	86 78       	andi	r24, 0x86	; 134
 788:	09 f0       	breq	.+2      	; 0x78c <__stack+0x28d>
 78a:	b3 94       	inc	r11
 78c:	a3 fc       	sbrc	r10, 3
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__stack+0x2b3>
 790:	a0 fe       	sbrs	r10, 0
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <__stack+0x2a1>
 794:	b2 14       	cp	r11, r2
 796:	88 f4       	brcc	.+34     	; 0x7ba <__stack+0x2bb>
 798:	28 0c       	add	r2, r8
 79a:	92 2c       	mov	r9, r2
 79c:	9b 18       	sub	r9, r11
 79e:	0e c0       	rjmp	.+28     	; 0x7bc <__stack+0x2bd>
 7a0:	b2 14       	cp	r11, r2
 7a2:	60 f4       	brcc	.+24     	; 0x7bc <__stack+0x2bd>
 7a4:	b6 01       	movw	r22, r12
 7a6:	80 e2       	ldi	r24, 0x20	; 32
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 7ae:	b3 94       	inc	r11
 7b0:	f7 cf       	rjmp	.-18     	; 0x7a0 <__stack+0x2a1>
 7b2:	b2 14       	cp	r11, r2
 7b4:	18 f4       	brcc	.+6      	; 0x7bc <__stack+0x2bd>
 7b6:	2b 18       	sub	r2, r11
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <__stack+0x2bf>
 7ba:	98 2c       	mov	r9, r8
 7bc:	21 2c       	mov	r2, r1
 7be:	a4 fe       	sbrs	r10, 4
 7c0:	10 c0       	rjmp	.+32     	; 0x7e2 <__stack+0x2e3>
 7c2:	b6 01       	movw	r22, r12
 7c4:	80 e3       	ldi	r24, 0x30	; 48
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 7cc:	a2 fe       	sbrs	r10, 2
 7ce:	17 c0       	rjmp	.+46     	; 0x7fe <__stack+0x2ff>
 7d0:	a1 fc       	sbrc	r10, 1
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <__stack+0x2db>
 7d4:	88 e7       	ldi	r24, 0x78	; 120
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <__stack+0x2df>
 7da:	88 e5       	ldi	r24, 0x58	; 88
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	b6 01       	movw	r22, r12
 7e0:	0c c0       	rjmp	.+24     	; 0x7fa <__stack+0x2fb>
 7e2:	8a 2d       	mov	r24, r10
 7e4:	86 78       	andi	r24, 0x86	; 134
 7e6:	59 f0       	breq	.+22     	; 0x7fe <__stack+0x2ff>
 7e8:	a1 fe       	sbrs	r10, 1
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <__stack+0x2f1>
 7ec:	8b e2       	ldi	r24, 0x2B	; 43
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <__stack+0x2f3>
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	a7 fc       	sbrc	r10, 7
 7f4:	8d e2       	ldi	r24, 0x2D	; 45
 7f6:	b6 01       	movw	r22, r12
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 7fe:	89 14       	cp	r8, r9
 800:	38 f4       	brcc	.+14     	; 0x810 <__stack+0x311>
 802:	b6 01       	movw	r22, r12
 804:	80 e3       	ldi	r24, 0x30	; 48
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 80c:	9a 94       	dec	r9
 80e:	f7 cf       	rjmp	.-18     	; 0x7fe <__stack+0x2ff>
 810:	8a 94       	dec	r8
 812:	f3 01       	movw	r30, r6
 814:	e8 0d       	add	r30, r8
 816:	f1 1d       	adc	r31, r1
 818:	80 81       	ld	r24, Z
 81a:	b6 01       	movw	r22, r12
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 822:	81 10       	cpse	r8, r1
 824:	f5 cf       	rjmp	.-22     	; 0x810 <__stack+0x311>
 826:	22 20       	and	r2, r2
 828:	09 f4       	brne	.+2      	; 0x82c <__stack+0x32d>
 82a:	42 ce       	rjmp	.-892    	; 0x4b0 <vfprintf+0x24>
 82c:	b6 01       	movw	r22, r12
 82e:	80 e2       	ldi	r24, 0x20	; 32
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 836:	2a 94       	dec	r2
 838:	f6 cf       	rjmp	.-20     	; 0x826 <__stack+0x327>
 83a:	f6 01       	movw	r30, r12
 83c:	86 81       	ldd	r24, Z+6	; 0x06
 83e:	97 81       	ldd	r25, Z+7	; 0x07
 840:	02 c0       	rjmp	.+4      	; 0x846 <__stack+0x347>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	2b 96       	adiw	r28, 0x0b	; 11
 848:	e2 e1       	ldi	r30, 0x12	; 18
 84a:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__epilogue_restores__>

0000084e <calloc>:
 84e:	0f 93       	push	r16
 850:	1f 93       	push	r17
 852:	cf 93       	push	r28
 854:	df 93       	push	r29
 856:	86 9f       	mul	r24, r22
 858:	80 01       	movw	r16, r0
 85a:	87 9f       	mul	r24, r23
 85c:	10 0d       	add	r17, r0
 85e:	96 9f       	mul	r25, r22
 860:	10 0d       	add	r17, r0
 862:	11 24       	eor	r1, r1
 864:	c8 01       	movw	r24, r16
 866:	0e 94 43 04 	call	0x886	; 0x886 <malloc>
 86a:	ec 01       	movw	r28, r24
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	29 f0       	breq	.+10     	; 0x87a <calloc+0x2c>
 870:	a8 01       	movw	r20, r16
 872:	60 e0       	ldi	r22, 0x00	; 0
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	0e 94 6f 05 	call	0xade	; 0xade <memset>
 87a:	ce 01       	movw	r24, r28
 87c:	df 91       	pop	r29
 87e:	cf 91       	pop	r28
 880:	1f 91       	pop	r17
 882:	0f 91       	pop	r16
 884:	08 95       	ret

00000886 <malloc>:
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	91 05       	cpc	r25, r1
 892:	10 f4       	brcc	.+4      	; 0x898 <malloc+0x12>
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <__flp>
 89c:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <__flp+0x1>
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	a0 e0       	ldi	r26, 0x00	; 0
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	30 97       	sbiw	r30, 0x00	; 0
 8aa:	19 f1       	breq	.+70     	; 0x8f2 <malloc+0x6c>
 8ac:	40 81       	ld	r20, Z
 8ae:	51 81       	ldd	r21, Z+1	; 0x01
 8b0:	02 81       	ldd	r16, Z+2	; 0x02
 8b2:	13 81       	ldd	r17, Z+3	; 0x03
 8b4:	48 17       	cp	r20, r24
 8b6:	59 07       	cpc	r21, r25
 8b8:	c8 f0       	brcs	.+50     	; 0x8ec <malloc+0x66>
 8ba:	84 17       	cp	r24, r20
 8bc:	95 07       	cpc	r25, r21
 8be:	69 f4       	brne	.+26     	; 0x8da <malloc+0x54>
 8c0:	10 97       	sbiw	r26, 0x00	; 0
 8c2:	31 f0       	breq	.+12     	; 0x8d0 <malloc+0x4a>
 8c4:	12 96       	adiw	r26, 0x02	; 2
 8c6:	0c 93       	st	X, r16
 8c8:	12 97       	sbiw	r26, 0x02	; 2
 8ca:	13 96       	adiw	r26, 0x03	; 3
 8cc:	1c 93       	st	X, r17
 8ce:	27 c0       	rjmp	.+78     	; 0x91e <malloc+0x98>
 8d0:	00 93 30 01 	sts	0x0130, r16	; 0x800130 <__flp>
 8d4:	10 93 31 01 	sts	0x0131, r17	; 0x800131 <__flp+0x1>
 8d8:	22 c0       	rjmp	.+68     	; 0x91e <malloc+0x98>
 8da:	21 15       	cp	r18, r1
 8dc:	31 05       	cpc	r19, r1
 8de:	19 f0       	breq	.+6      	; 0x8e6 <malloc+0x60>
 8e0:	42 17       	cp	r20, r18
 8e2:	53 07       	cpc	r21, r19
 8e4:	18 f4       	brcc	.+6      	; 0x8ec <malloc+0x66>
 8e6:	9a 01       	movw	r18, r20
 8e8:	bd 01       	movw	r22, r26
 8ea:	ef 01       	movw	r28, r30
 8ec:	df 01       	movw	r26, r30
 8ee:	f8 01       	movw	r30, r16
 8f0:	db cf       	rjmp	.-74     	; 0x8a8 <malloc+0x22>
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	f9 f0       	breq	.+62     	; 0x936 <malloc+0xb0>
 8f8:	28 1b       	sub	r18, r24
 8fa:	39 0b       	sbc	r19, r25
 8fc:	24 30       	cpi	r18, 0x04	; 4
 8fe:	31 05       	cpc	r19, r1
 900:	80 f4       	brcc	.+32     	; 0x922 <malloc+0x9c>
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	9b 81       	ldd	r25, Y+3	; 0x03
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	21 f0       	breq	.+8      	; 0x914 <malloc+0x8e>
 90c:	fb 01       	movw	r30, r22
 90e:	93 83       	std	Z+3, r25	; 0x03
 910:	82 83       	std	Z+2, r24	; 0x02
 912:	04 c0       	rjmp	.+8      	; 0x91c <malloc+0x96>
 914:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__flp+0x1>
 918:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__flp>
 91c:	fe 01       	movw	r30, r28
 91e:	32 96       	adiw	r30, 0x02	; 2
 920:	44 c0       	rjmp	.+136    	; 0x9aa <malloc+0x124>
 922:	fe 01       	movw	r30, r28
 924:	e2 0f       	add	r30, r18
 926:	f3 1f       	adc	r31, r19
 928:	81 93       	st	Z+, r24
 92a:	91 93       	st	Z+, r25
 92c:	22 50       	subi	r18, 0x02	; 2
 92e:	31 09       	sbc	r19, r1
 930:	39 83       	std	Y+1, r19	; 0x01
 932:	28 83       	st	Y, r18
 934:	3a c0       	rjmp	.+116    	; 0x9aa <malloc+0x124>
 936:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 93a:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 93e:	23 2b       	or	r18, r19
 940:	41 f4       	brne	.+16     	; 0x952 <malloc+0xcc>
 942:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 946:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 94a:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__brkval+0x1>
 94e:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__brkval>
 952:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 956:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	41 f4       	brne	.+16     	; 0x970 <malloc+0xea>
 960:	2d b7       	in	r18, 0x3d	; 61
 962:	3e b7       	in	r19, 0x3e	; 62
 964:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 968:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 96c:	24 1b       	sub	r18, r20
 96e:	35 0b       	sbc	r19, r21
 970:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__brkval>
 974:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <__brkval+0x1>
 978:	e2 17       	cp	r30, r18
 97a:	f3 07       	cpc	r31, r19
 97c:	a0 f4       	brcc	.+40     	; 0x9a6 <malloc+0x120>
 97e:	2e 1b       	sub	r18, r30
 980:	3f 0b       	sbc	r19, r31
 982:	28 17       	cp	r18, r24
 984:	39 07       	cpc	r19, r25
 986:	78 f0       	brcs	.+30     	; 0x9a6 <malloc+0x120>
 988:	ac 01       	movw	r20, r24
 98a:	4e 5f       	subi	r20, 0xFE	; 254
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	24 17       	cp	r18, r20
 990:	35 07       	cpc	r19, r21
 992:	48 f0       	brcs	.+18     	; 0x9a6 <malloc+0x120>
 994:	4e 0f       	add	r20, r30
 996:	5f 1f       	adc	r21, r31
 998:	50 93 2f 01 	sts	0x012F, r21	; 0x80012f <__brkval+0x1>
 99c:	40 93 2e 01 	sts	0x012E, r20	; 0x80012e <__brkval>
 9a0:	81 93       	st	Z+, r24
 9a2:	91 93       	st	Z+, r25
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <malloc+0x124>
 9a6:	e0 e0       	ldi	r30, 0x00	; 0
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	cf 01       	movw	r24, r30
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	08 95       	ret

000009b6 <free>:
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <free+0xa>
 9be:	81 c0       	rjmp	.+258    	; 0xac2 <free+0x10c>
 9c0:	fc 01       	movw	r30, r24
 9c2:	32 97       	sbiw	r30, 0x02	; 2
 9c4:	13 82       	std	Z+3, r1	; 0x03
 9c6:	12 82       	std	Z+2, r1	; 0x02
 9c8:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <__flp>
 9cc:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <__flp+0x1>
 9d0:	10 97       	sbiw	r26, 0x00	; 0
 9d2:	81 f4       	brne	.+32     	; 0x9f4 <free+0x3e>
 9d4:	20 81       	ld	r18, Z
 9d6:	31 81       	ldd	r19, Z+1	; 0x01
 9d8:	82 0f       	add	r24, r18
 9da:	93 1f       	adc	r25, r19
 9dc:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 9e0:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 9e4:	28 17       	cp	r18, r24
 9e6:	39 07       	cpc	r19, r25
 9e8:	51 f5       	brne	.+84     	; 0xa3e <free+0x88>
 9ea:	f0 93 2f 01 	sts	0x012F, r31	; 0x80012f <__brkval+0x1>
 9ee:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <__brkval>
 9f2:	67 c0       	rjmp	.+206    	; 0xac2 <free+0x10c>
 9f4:	ed 01       	movw	r28, r26
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	ce 17       	cp	r28, r30
 9fc:	df 07       	cpc	r29, r31
 9fe:	40 f4       	brcc	.+16     	; 0xa10 <free+0x5a>
 a00:	4a 81       	ldd	r20, Y+2	; 0x02
 a02:	5b 81       	ldd	r21, Y+3	; 0x03
 a04:	9e 01       	movw	r18, r28
 a06:	41 15       	cp	r20, r1
 a08:	51 05       	cpc	r21, r1
 a0a:	f1 f0       	breq	.+60     	; 0xa48 <free+0x92>
 a0c:	ea 01       	movw	r28, r20
 a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <free+0x44>
 a10:	d3 83       	std	Z+3, r29	; 0x03
 a12:	c2 83       	std	Z+2, r28	; 0x02
 a14:	40 81       	ld	r20, Z
 a16:	51 81       	ldd	r21, Z+1	; 0x01
 a18:	84 0f       	add	r24, r20
 a1a:	95 1f       	adc	r25, r21
 a1c:	c8 17       	cp	r28, r24
 a1e:	d9 07       	cpc	r29, r25
 a20:	59 f4       	brne	.+22     	; 0xa38 <free+0x82>
 a22:	88 81       	ld	r24, Y
 a24:	99 81       	ldd	r25, Y+1	; 0x01
 a26:	84 0f       	add	r24, r20
 a28:	95 1f       	adc	r25, r21
 a2a:	02 96       	adiw	r24, 0x02	; 2
 a2c:	91 83       	std	Z+1, r25	; 0x01
 a2e:	80 83       	st	Z, r24
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	9b 81       	ldd	r25, Y+3	; 0x03
 a34:	93 83       	std	Z+3, r25	; 0x03
 a36:	82 83       	std	Z+2, r24	; 0x02
 a38:	21 15       	cp	r18, r1
 a3a:	31 05       	cpc	r19, r1
 a3c:	29 f4       	brne	.+10     	; 0xa48 <free+0x92>
 a3e:	f0 93 31 01 	sts	0x0131, r31	; 0x800131 <__flp+0x1>
 a42:	e0 93 30 01 	sts	0x0130, r30	; 0x800130 <__flp>
 a46:	3d c0       	rjmp	.+122    	; 0xac2 <free+0x10c>
 a48:	e9 01       	movw	r28, r18
 a4a:	fb 83       	std	Y+3, r31	; 0x03
 a4c:	ea 83       	std	Y+2, r30	; 0x02
 a4e:	49 91       	ld	r20, Y+
 a50:	59 91       	ld	r21, Y+
 a52:	c4 0f       	add	r28, r20
 a54:	d5 1f       	adc	r29, r21
 a56:	ec 17       	cp	r30, r28
 a58:	fd 07       	cpc	r31, r29
 a5a:	61 f4       	brne	.+24     	; 0xa74 <free+0xbe>
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	84 0f       	add	r24, r20
 a62:	95 1f       	adc	r25, r21
 a64:	02 96       	adiw	r24, 0x02	; 2
 a66:	e9 01       	movw	r28, r18
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	88 83       	st	Y, r24
 a6c:	82 81       	ldd	r24, Z+2	; 0x02
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	9b 83       	std	Y+3, r25	; 0x03
 a72:	8a 83       	std	Y+2, r24	; 0x02
 a74:	e0 e0       	ldi	r30, 0x00	; 0
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	12 96       	adiw	r26, 0x02	; 2
 a7a:	8d 91       	ld	r24, X+
 a7c:	9c 91       	ld	r25, X
 a7e:	13 97       	sbiw	r26, 0x03	; 3
 a80:	00 97       	sbiw	r24, 0x00	; 0
 a82:	19 f0       	breq	.+6      	; 0xa8a <free+0xd4>
 a84:	fd 01       	movw	r30, r26
 a86:	dc 01       	movw	r26, r24
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <free+0xc2>
 a8a:	8d 91       	ld	r24, X+
 a8c:	9c 91       	ld	r25, X
 a8e:	11 97       	sbiw	r26, 0x01	; 1
 a90:	9d 01       	movw	r18, r26
 a92:	2e 5f       	subi	r18, 0xFE	; 254
 a94:	3f 4f       	sbci	r19, 0xFF	; 255
 a96:	82 0f       	add	r24, r18
 a98:	93 1f       	adc	r25, r19
 a9a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__brkval>
 a9e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <__brkval+0x1>
 aa2:	28 17       	cp	r18, r24
 aa4:	39 07       	cpc	r19, r25
 aa6:	69 f4       	brne	.+26     	; 0xac2 <free+0x10c>
 aa8:	30 97       	sbiw	r30, 0x00	; 0
 aaa:	29 f4       	brne	.+10     	; 0xab6 <free+0x100>
 aac:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__flp+0x1>
 ab0:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__flp>
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <free+0x104>
 ab6:	13 82       	std	Z+3, r1	; 0x03
 ab8:	12 82       	std	Z+2, r1	; 0x02
 aba:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <__brkval+0x1>
 abe:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <__brkval>
 ac2:	df 91       	pop	r29
 ac4:	cf 91       	pop	r28
 ac6:	08 95       	ret

00000ac8 <strnlen_P>:
 ac8:	fc 01       	movw	r30, r24
 aca:	05 90       	lpm	r0, Z+
 acc:	61 50       	subi	r22, 0x01	; 1
 ace:	70 40       	sbci	r23, 0x00	; 0
 ad0:	01 10       	cpse	r0, r1
 ad2:	d8 f7       	brcc	.-10     	; 0xaca <strnlen_P+0x2>
 ad4:	80 95       	com	r24
 ad6:	90 95       	com	r25
 ad8:	8e 0f       	add	r24, r30
 ada:	9f 1f       	adc	r25, r31
 adc:	08 95       	ret

00000ade <memset>:
 ade:	dc 01       	movw	r26, r24
 ae0:	01 c0       	rjmp	.+2      	; 0xae4 <memset+0x6>
 ae2:	6d 93       	st	X+, r22
 ae4:	41 50       	subi	r20, 0x01	; 1
 ae6:	50 40       	sbci	r21, 0x00	; 0
 ae8:	e0 f7       	brcc	.-8      	; 0xae2 <memset+0x4>
 aea:	08 95       	ret

00000aec <strnlen>:
 aec:	fc 01       	movw	r30, r24
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 90       	ld	r0, Z+
 af4:	01 10       	cpse	r0, r1
 af6:	d8 f7       	brcc	.-10     	; 0xaee <strnlen+0x2>
 af8:	80 95       	com	r24
 afa:	90 95       	com	r25
 afc:	8e 0f       	add	r24, r30
 afe:	9f 1f       	adc	r25, r31
 b00:	08 95       	ret

00000b02 <fputc>:
 b02:	0f 93       	push	r16
 b04:	1f 93       	push	r17
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	fb 01       	movw	r30, r22
 b0c:	23 81       	ldd	r18, Z+3	; 0x03
 b0e:	21 fd       	sbrc	r18, 1
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <fputc+0x16>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	2c c0       	rjmp	.+88     	; 0xb70 <fputc+0x6e>
 b18:	22 ff       	sbrs	r18, 2
 b1a:	16 c0       	rjmp	.+44     	; 0xb48 <fputc+0x46>
 b1c:	46 81       	ldd	r20, Z+6	; 0x06
 b1e:	57 81       	ldd	r21, Z+7	; 0x07
 b20:	24 81       	ldd	r18, Z+4	; 0x04
 b22:	35 81       	ldd	r19, Z+5	; 0x05
 b24:	42 17       	cp	r20, r18
 b26:	53 07       	cpc	r21, r19
 b28:	44 f4       	brge	.+16     	; 0xb3a <fputc+0x38>
 b2a:	a0 81       	ld	r26, Z
 b2c:	b1 81       	ldd	r27, Z+1	; 0x01
 b2e:	9d 01       	movw	r18, r26
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	3f 4f       	sbci	r19, 0xFF	; 255
 b34:	31 83       	std	Z+1, r19	; 0x01
 b36:	20 83       	st	Z, r18
 b38:	8c 93       	st	X, r24
 b3a:	26 81       	ldd	r18, Z+6	; 0x06
 b3c:	37 81       	ldd	r19, Z+7	; 0x07
 b3e:	2f 5f       	subi	r18, 0xFF	; 255
 b40:	3f 4f       	sbci	r19, 0xFF	; 255
 b42:	37 83       	std	Z+7, r19	; 0x07
 b44:	26 83       	std	Z+6, r18	; 0x06
 b46:	14 c0       	rjmp	.+40     	; 0xb70 <fputc+0x6e>
 b48:	8b 01       	movw	r16, r22
 b4a:	ec 01       	movw	r28, r24
 b4c:	fb 01       	movw	r30, r22
 b4e:	00 84       	ldd	r0, Z+8	; 0x08
 b50:	f1 85       	ldd	r31, Z+9	; 0x09
 b52:	e0 2d       	mov	r30, r0
 b54:	09 95       	icall
 b56:	89 2b       	or	r24, r25
 b58:	e1 f6       	brne	.-72     	; 0xb12 <fputc+0x10>
 b5a:	d8 01       	movw	r26, r16
 b5c:	16 96       	adiw	r26, 0x06	; 6
 b5e:	8d 91       	ld	r24, X+
 b60:	9c 91       	ld	r25, X
 b62:	17 97       	sbiw	r26, 0x07	; 7
 b64:	01 96       	adiw	r24, 0x01	; 1
 b66:	17 96       	adiw	r26, 0x07	; 7
 b68:	9c 93       	st	X, r25
 b6a:	8e 93       	st	-X, r24
 b6c:	16 97       	sbiw	r26, 0x06	; 6
 b6e:	ce 01       	movw	r24, r28
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

00000b7a <__ultoa_invert>:
 b7a:	fa 01       	movw	r30, r20
 b7c:	aa 27       	eor	r26, r26
 b7e:	28 30       	cpi	r18, 0x08	; 8
 b80:	51 f1       	breq	.+84     	; 0xbd6 <__ultoa_invert+0x5c>
 b82:	20 31       	cpi	r18, 0x10	; 16
 b84:	81 f1       	breq	.+96     	; 0xbe6 <__ultoa_invert+0x6c>
 b86:	e8 94       	clt
 b88:	6f 93       	push	r22
 b8a:	6e 7f       	andi	r22, 0xFE	; 254
 b8c:	6e 5f       	subi	r22, 0xFE	; 254
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	af 4f       	sbci	r26, 0xFF	; 255
 b96:	b1 e0       	ldi	r27, 0x01	; 1
 b98:	3e d0       	rcall	.+124    	; 0xc16 <__ultoa_invert+0x9c>
 b9a:	b4 e0       	ldi	r27, 0x04	; 4
 b9c:	3c d0       	rcall	.+120    	; 0xc16 <__ultoa_invert+0x9c>
 b9e:	67 0f       	add	r22, r23
 ba0:	78 1f       	adc	r23, r24
 ba2:	89 1f       	adc	r24, r25
 ba4:	9a 1f       	adc	r25, r26
 ba6:	a1 1d       	adc	r26, r1
 ba8:	68 0f       	add	r22, r24
 baa:	79 1f       	adc	r23, r25
 bac:	8a 1f       	adc	r24, r26
 bae:	91 1d       	adc	r25, r1
 bb0:	a1 1d       	adc	r26, r1
 bb2:	6a 0f       	add	r22, r26
 bb4:	71 1d       	adc	r23, r1
 bb6:	81 1d       	adc	r24, r1
 bb8:	91 1d       	adc	r25, r1
 bba:	a1 1d       	adc	r26, r1
 bbc:	20 d0       	rcall	.+64     	; 0xbfe <__ultoa_invert+0x84>
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__ultoa_invert+0x48>
 bc0:	68 94       	set
 bc2:	3f 91       	pop	r19
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	26 9f       	mul	r18, r22
 bc8:	11 24       	eor	r1, r1
 bca:	30 19       	sub	r19, r0
 bcc:	30 5d       	subi	r19, 0xD0	; 208
 bce:	31 93       	st	Z+, r19
 bd0:	de f6       	brtc	.-74     	; 0xb88 <__ultoa_invert+0xe>
 bd2:	cf 01       	movw	r24, r30
 bd4:	08 95       	ret
 bd6:	46 2f       	mov	r20, r22
 bd8:	47 70       	andi	r20, 0x07	; 7
 bda:	40 5d       	subi	r20, 0xD0	; 208
 bdc:	41 93       	st	Z+, r20
 bde:	b3 e0       	ldi	r27, 0x03	; 3
 be0:	0f d0       	rcall	.+30     	; 0xc00 <__ultoa_invert+0x86>
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0x5c>
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__ultoa_invert+0x58>
 be6:	46 2f       	mov	r20, r22
 be8:	4f 70       	andi	r20, 0x0F	; 15
 bea:	40 5d       	subi	r20, 0xD0	; 208
 bec:	4a 33       	cpi	r20, 0x3A	; 58
 bee:	18 f0       	brcs	.+6      	; 0xbf6 <__ultoa_invert+0x7c>
 bf0:	49 5d       	subi	r20, 0xD9	; 217
 bf2:	31 fd       	sbrc	r19, 1
 bf4:	40 52       	subi	r20, 0x20	; 32
 bf6:	41 93       	st	Z+, r20
 bf8:	02 d0       	rcall	.+4      	; 0xbfe <__ultoa_invert+0x84>
 bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__ultoa_invert+0x6c>
 bfc:	ea cf       	rjmp	.-44     	; 0xbd2 <__ultoa_invert+0x58>
 bfe:	b4 e0       	ldi	r27, 0x04	; 4
 c00:	a6 95       	lsr	r26
 c02:	97 95       	ror	r25
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__ultoa_invert+0x86>
 c0e:	00 97       	sbiw	r24, 0x00	; 0
 c10:	61 05       	cpc	r22, r1
 c12:	71 05       	cpc	r23, r1
 c14:	08 95       	ret
 c16:	9b 01       	movw	r18, r22
 c18:	ac 01       	movw	r20, r24
 c1a:	0a 2e       	mov	r0, r26
 c1c:	06 94       	lsr	r0
 c1e:	57 95       	ror	r21
 c20:	47 95       	ror	r20
 c22:	37 95       	ror	r19
 c24:	27 95       	ror	r18
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__ultoa_invert+0xa2>
 c2a:	62 0f       	add	r22, r18
 c2c:	73 1f       	adc	r23, r19
 c2e:	84 1f       	adc	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	a0 1d       	adc	r26, r0
 c34:	08 95       	ret

00000c36 <__prologue_saves__>:
 c36:	2f 92       	push	r2
 c38:	3f 92       	push	r3
 c3a:	4f 92       	push	r4
 c3c:	5f 92       	push	r5
 c3e:	6f 92       	push	r6
 c40:	7f 92       	push	r7
 c42:	8f 92       	push	r8
 c44:	9f 92       	push	r9
 c46:	af 92       	push	r10
 c48:	bf 92       	push	r11
 c4a:	cf 92       	push	r12
 c4c:	df 92       	push	r13
 c4e:	ef 92       	push	r14
 c50:	ff 92       	push	r15
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	ca 1b       	sub	r28, r26
 c60:	db 0b       	sbc	r29, r27
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	09 94       	ijmp

00000c6e <__epilogue_restores__>:
 c6e:	2a 88       	ldd	r2, Y+18	; 0x12
 c70:	39 88       	ldd	r3, Y+17	; 0x11
 c72:	48 88       	ldd	r4, Y+16	; 0x10
 c74:	5f 84       	ldd	r5, Y+15	; 0x0f
 c76:	6e 84       	ldd	r6, Y+14	; 0x0e
 c78:	7d 84       	ldd	r7, Y+13	; 0x0d
 c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c80:	b9 84       	ldd	r11, Y+9	; 0x09
 c82:	c8 84       	ldd	r12, Y+8	; 0x08
 c84:	df 80       	ldd	r13, Y+7	; 0x07
 c86:	ee 80       	ldd	r14, Y+6	; 0x06
 c88:	fd 80       	ldd	r15, Y+5	; 0x05
 c8a:	0c 81       	ldd	r16, Y+4	; 0x04
 c8c:	1b 81       	ldd	r17, Y+3	; 0x03
 c8e:	aa 81       	ldd	r26, Y+2	; 0x02
 c90:	b9 81       	ldd	r27, Y+1	; 0x01
 c92:	ce 0f       	add	r28, r30
 c94:	d1 1d       	adc	r29, r1
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	de bf       	out	0x3e, r29	; 62
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	cd bf       	out	0x3d, r28	; 61
 ca0:	ed 01       	movw	r28, r26
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
