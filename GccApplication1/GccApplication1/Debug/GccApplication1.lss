
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  000013e4  00001478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  008001ae  008001ae  00001526  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0d  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e90  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3f  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00005344  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000748  00000000  00000000  000056e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5a  00000000  00000000  00005e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000698a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__ctors_end>
       4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       8:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
       c:	0c 94 a4 03 	jmp	0x748	; 0x748 <__vector_3>
      10:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      18:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      1c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      20:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      24:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      2c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      30:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      34:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      38:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      3c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      40:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      44:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      48:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      50:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      54:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      58:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      5c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      60:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      64:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      68:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>
      6c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <font5>:
     1ec:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     1fc:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     20c:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     21c:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
     22c:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     23c:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     24c:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     25c:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     26c:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     27c:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     28c:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     29c:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     2ac:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     2bc:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     2cc:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     2dc:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     2ec:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     2fc:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     30c:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     31c:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     32c:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     33c:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     34c:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     35c:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     36c:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     37c:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     38c:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     39c:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     3ac:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     3bc:	00 00 41 36 08 00 02 01 03 02 01                    ..A6.......

000003c7 <font8>:
	...
     3cf:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     3df:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     3ef:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     3ff:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     40f:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     41f:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     42f:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     43f:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     44f:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     45f:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     46f:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     47f:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     48f:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     49f:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     4af:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     4bf:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     4cf:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     4df:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     4ef:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     4ff:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     50f:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     51f:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     52f:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     53f:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     54f:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     55f:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     56f:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     57f:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     58f:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     59f:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     5af:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     5bf:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     5cf:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     5df:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     5ef:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     5ff:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     60f:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     61f:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     62f:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     63f:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     64f:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     65f:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     66f:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     67f:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     68f:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     69f:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     6af:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
	...

000006c0 <__ctors_end>:
     6c0:	11 24       	eor	r1, r1
     6c2:	1f be       	out	0x3f, r1	; 63
     6c4:	cf ef       	ldi	r28, 0xFF	; 255
     6c6:	d4 e0       	ldi	r29, 0x04	; 4
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	cd bf       	out	0x3d, r28	; 61

000006cc <__do_copy_data>:
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	e4 ee       	ldi	r30, 0xE4	; 228
     6d4:	f3 e1       	ldi	r31, 0x13	; 19
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <__do_copy_data+0x10>
     6d8:	05 90       	lpm	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	ae 3a       	cpi	r26, 0xAE	; 174
     6de:	b1 07       	cpc	r27, r17
     6e0:	d9 f7       	brne	.-10     	; 0x6d8 <__do_copy_data+0xc>

000006e2 <__do_clear_bss>:
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	ae ea       	ldi	r26, 0xAE	; 174
     6e6:	b1 e0       	ldi	r27, 0x01	; 1
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <.do_clear_bss_start>

000006ea <.do_clear_bss_loop>:
     6ea:	1d 92       	st	X+, r1

000006ec <.do_clear_bss_start>:
     6ec:	ae 3b       	cpi	r26, 0xBE	; 190
     6ee:	b2 07       	cpc	r27, r18
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <.do_clear_bss_loop>
     6f2:	0e 94 28 06 	call	0xc50	; 0xc50 <main>
     6f6:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <_exit>

000006fa <__bad_interrupt>:
     6fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006fe <ADC_init>:
 */ 
#include "ADC.h"

void ADC_init(){

	set_bit(TCCR3A, COM3A0);
     6fe:	eb e8       	ldi	r30, 0x8B	; 139
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	80 64       	ori	r24, 0x40	; 64
     706:	80 83       	st	Z, r24
	set_bit(TCCR3B, CS00);
     708:	ea e8       	ldi	r30, 0x8A	; 138
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	81 60       	ori	r24, 0x01	; 1
     710:	80 83       	st	Z, r24
	set_bit(TCCR3B, WGM12);
     712:	80 81       	ld	r24, Z
     714:	88 60       	ori	r24, 0x08	; 8
     716:	80 83       	st	Z, r24
	set_bit(DDRD, PD4);
     718:	81 b3       	in	r24, 0x11	; 17
     71a:	80 61       	ori	r24, 0x10	; 16
     71c:	81 bb       	out	0x11, r24	; 17
     71e:	08 95       	ret

00000720 <ADC_sample>:
	
}

void ADC_sample(uint8_t* joystick_x, uint8_t* joystick_y, uint8_t* slider_right, uint8_t* slider_left){
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
	volatile char* adc_addr = (char*)0x1400;
	*joystick_x = adc_addr[0];
     724:	e0 e0       	ldi	r30, 0x00	; 0
     726:	f4 e1       	ldi	r31, 0x14	; 20
     728:	a0 81       	ld	r26, Z
     72a:	ec 01       	movw	r28, r24
     72c:	a8 83       	st	Y, r26
	*joystick_y = adc_addr[0];
     72e:	80 81       	ld	r24, Z
     730:	db 01       	movw	r26, r22
     732:	8c 93       	st	X, r24
	*slider_right = adc_addr[0];
     734:	80 81       	ld	r24, Z
     736:	ea 01       	movw	r28, r20
     738:	88 83       	st	Y, r24
	*slider_left = adc_addr[0];
     73a:	80 81       	ld	r24, Z
     73c:	d9 01       	movw	r26, r18
     73e:	8c 93       	st	X, r24
	
	adc_addr[0] = 0;
     740:	10 82       	st	Z, r1
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <__vector_3>:
	//enable INT2 in the General Interrupt Control Register (GICR)
	set_bit(GICR, INT2);
	
}

ISR(INT2_vect){
     748:	1f 92       	push	r1
     74a:	0f 92       	push	r0
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	0f 92       	push	r0
     750:	11 24       	eor	r1, r1

     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <joystick_handle>:
 */ 

#include "joystick.h"

bool joystick_handle(){
	switch(joystick_position){
     75c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <joystick_position>
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	91 f1       	breq	.+100    	; 0x7c8 <joystick_handle+0x6c>
     764:	28 f4       	brcc	.+10     	; 0x770 <joystick_handle+0x14>
     766:	88 23       	and	r24, r24
     768:	41 f0       	breq	.+16     	; 0x77a <joystick_handle+0x1e>
     76a:	81 30       	cpi	r24, 0x01	; 1
     76c:	29 f1       	breq	.+74     	; 0x7b8 <joystick_handle+0x5c>
     76e:	44 c0       	rjmp	.+136    	; 0x7f8 <joystick_handle+0x9c>
     770:	83 30       	cpi	r24, 0x03	; 3
     772:	91 f1       	breq	.+100    	; 0x7d8 <joystick_handle+0x7c>
     774:	84 30       	cpi	r24, 0x04	; 4
     776:	c1 f1       	breq	.+112    	; 0x7e8 <joystick_handle+0x8c>
     778:	3f c0       	rjmp	.+126    	; 0x7f8 <joystick_handle+0x9c>
		case Neutral:
			if(joystick_y > FROM_NEUTRAL_HIGH){
     77a:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
     77e:	81 3f       	cpi	r24, 0xF1	; 241
     780:	20 f0       	brcs	.+8      	; 0x78a <joystick_handle+0x2e>
				joystick_position = Up;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <joystick_position>
				return true;
     788:	08 95       	ret
			}
			if(joystick_y < FROM_NEUTRAL_LOW){
     78a:	8a 30       	cpi	r24, 0x0A	; 10
     78c:	28 f4       	brcc	.+10     	; 0x798 <joystick_handle+0x3c>
				joystick_position = Down;
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <joystick_position>
				return true;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	08 95       	ret
			}
			if(joystick_x > FROM_NEUTRAL_HIGH){
     798:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <joystick_x>
     79c:	81 3f       	cpi	r24, 0xF1	; 241
     79e:	28 f0       	brcs	.+10     	; 0x7aa <joystick_handle+0x4e>
				joystick_position = Right;
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <joystick_position>
				return true;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	08 95       	ret
			}
			if(joystick_x < FROM_NEUTRAL_LOW){
     7aa:	8a 30       	cpi	r24, 0x0A	; 10
     7ac:	30 f5       	brcc	.+76     	; 0x7fa <joystick_handle+0x9e>
				joystick_position = Left;
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <joystick_position>
				return true;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	08 95       	ret
			}
			return false;
		
		case Up:
			if(joystick_y < TO_NEUTRAL_HIGH){
     7b8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
     7bc:	86 3e       	cpi	r24, 0xE6	; 230
     7be:	f8 f4       	brcc	.+62     	; 0x7fe <joystick_handle+0xa2>
				joystick_position = Neutral;
     7c0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <joystick_position>
			}
			return false;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	08 95       	ret
			
		case Down:
			if(joystick_y > TO_NEUTRAL_LOW){
     7c8:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__data_end>
     7cc:	85 31       	cpi	r24, 0x15	; 21
     7ce:	c8 f0       	brcs	.+50     	; 0x802 <joystick_handle+0xa6>
				joystick_position = Neutral;
     7d0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <joystick_position>
			}
			return false;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
		
		case Right:
			if(joystick_x < TO_NEUTRAL_HIGH){
     7d8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <joystick_x>
     7dc:	86 3e       	cpi	r24, 0xE6	; 230
     7de:	98 f4       	brcc	.+38     	; 0x806 <joystick_handle+0xaa>
				joystick_position = Neutral;
     7e0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <joystick_position>
			}
			return false;
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	08 95       	ret
		
		case Left:
			if(joystick_x > TO_NEUTRAL_LOW){
     7e8:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <joystick_x>
     7ec:	85 31       	cpi	r24, 0x15	; 21
     7ee:	68 f0       	brcs	.+26     	; 0x80a <joystick_handle+0xae>
				joystick_position = Neutral;
     7f0:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <joystick_position>
			}
			return false;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	08 95       	ret
		
	}
}
     7f8:	08 95       	ret
			}
			if(joystick_x < FROM_NEUTRAL_LOW){
				joystick_position = Left;
				return true;
			}
			return false;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	08 95       	ret
		
		case Up:
			if(joystick_y < TO_NEUTRAL_HIGH){
				joystick_position = Neutral;
			}
			return false;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	08 95       	ret
			
		case Down:
			if(joystick_y > TO_NEUTRAL_LOW){
				joystick_position = Neutral;
			}
			return false;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	08 95       	ret
		
		case Right:
			if(joystick_x < TO_NEUTRAL_HIGH){
				joystick_position = Neutral;
			}
			return false;
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	08 95       	ret
		
		case Left:
			if(joystick_x > TO_NEUTRAL_LOW){
				joystick_position = Neutral;
			}
			return false;
     80a:	80 e0       	ldi	r24, 0x00	; 0
		
	}
}
     80c:	08 95       	ret

0000080e <menu_print>:
		
	}
	
}

void menu_print(){
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
	oled_reset();
     812:	0e 94 f6 04 	call	0x9ec	; 0x9ec <oled_reset>
	oled_print("\t", 4);
     816:	64 e0       	ldi	r22, 0x04	; 4
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>
	oled_print("Main menu\n\n\r", 8);
     820:	68 e0       	ldi	r22, 0x08	; 8
     822:	8c e0       	ldi	r24, 0x0C	; 12
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>
	for (uint8_t i = 0; i <= glob_menu_length.main_menu; i++){
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	1d c0       	rjmp	.+58     	; 0x868 <menu_print+0x5a>
		uint8_t font_size = 5;
		if (i == glob_current_menu_item){
     82e:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <glob_current_menu_item>
     832:	c8 17       	cp	r28, r24
     834:	11 f0       	breq	.+4      	; 0x83a <menu_print+0x2c>
void menu_print(){
	oled_reset();
	oled_print("\t", 4);
	oled_print("Main menu\n\n\r", 8);
	for (uint8_t i = 0; i <= glob_menu_length.main_menu; i++){
		uint8_t font_size = 5;
     836:	d5 e0       	ldi	r29, 0x05	; 5
     838:	01 c0       	rjmp	.+2      	; 0x83c <menu_print+0x2e>
		if (i == glob_current_menu_item){
			font_size = 8;
     83a:	d8 e0       	ldi	r29, 0x08	; 8
		}
		
		oled_print("\t",4);
     83c:	64 e0       	ldi	r22, 0x04	; 4
     83e:	8a e0       	ldi	r24, 0x0A	; 10
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>
		oled_print(main_menu_str[i],font_size);
     846:	ec 2f       	mov	r30, r28
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	ee 0f       	add	r30, r30
     84c:	ff 1f       	adc	r31, r31
     84e:	ec 5f       	subi	r30, 0xFC	; 252
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	6d 2f       	mov	r22, r29
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>
		oled_print("\n\r",font_size);
     85c:	6d 2f       	mov	r22, r29
     85e:	8b ea       	ldi	r24, 0xAB	; 171
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>

void menu_print(){
	oled_reset();
	oled_print("\t", 4);
	oled_print("Main menu\n\n\r", 8);
	for (uint8_t i = 0; i <= glob_menu_length.main_menu; i++){
     866:	cf 5f       	subi	r28, 0xFF	; 255
     868:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <glob_menu_length>
     86c:	8c 17       	cp	r24, r28
     86e:	f8 f6       	brcc	.-66     	; 0x82e <menu_print+0x20>
		
		oled_print("\t",4);
		oled_print(main_menu_str[i],font_size);
		oled_print("\n\r",font_size);
	}
	oled_goto_line(2 + glob_current_menu_item);
     870:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <glob_current_menu_item>
     874:	8e 5f       	subi	r24, 0xFE	; 254
     876:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_goto_line>
	oled_print("->", 8);
     87a:	68 e0       	ldi	r22, 0x08	; 8
     87c:	89 e1       	ldi	r24, 0x19	; 25
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 89 05 	call	0xb12	; 0xb12 <oled_print>
}
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <get_menu_length>:


uint8_t get_menu_length(Menu current_menu){
	switch (current_menu){
     88a:	81 11       	cpse	r24, r1
     88c:	03 c0       	rjmp	.+6      	; 0x894 <get_menu_length+0xa>
		case main_menu:
			return glob_menu_length.main_menu;
     88e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <glob_menu_length>
     892:	08 95       	ret
	}
}
     894:	08 95       	ret

00000896 <menu_navigate>:

#include "menu.h"

char* main_menu_str [3] = {"Play", "Highscore", "Calibrate"};

void menu_navigate(JoystickPosition joystick_pos, Menu current_menu){
     896:	cf 93       	push	r28
     898:	c8 2f       	mov	r28, r24
     89a:	86 2f       	mov	r24, r22
	uint8_t menu_length = get_menu_length(current_menu);
     89c:	0e 94 45 04 	call	0x88a	; 0x88a <get_menu_length>
	
	
	switch (joystick_pos){
     8a0:	c1 30       	cpi	r28, 0x01	; 1
     8a2:	19 f0       	breq	.+6      	; 0x8aa <menu_navigate+0x14>
     8a4:	c2 30       	cpi	r28, 0x02	; 2
     8a6:	61 f0       	breq	.+24     	; 0x8c0 <menu_navigate+0x2a>
     8a8:	15 c0       	rjmp	.+42     	; 0x8d4 <menu_navigate+0x3e>
		case Up:
			if (glob_current_menu_item == 0){
     8aa:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <glob_current_menu_item>
     8ae:	91 11       	cpse	r25, r1
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <menu_navigate+0x22>
				glob_current_menu_item = menu_length;
     8b2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <glob_current_menu_item>
				break;
     8b6:	0e c0       	rjmp	.+28     	; 0x8d4 <menu_navigate+0x3e>
			}
			glob_current_menu_item -= 1;
     8b8:	91 50       	subi	r25, 0x01	; 1
     8ba:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <glob_current_menu_item>
			break;
     8be:	0a c0       	rjmp	.+20     	; 0x8d4 <menu_navigate+0x3e>
		case Down:
			if (glob_current_menu_item == menu_length){
     8c0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <glob_current_menu_item>
     8c4:	89 13       	cpse	r24, r25
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <menu_navigate+0x38>
				glob_current_menu_item = 0;
     8c8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <glob_current_menu_item>
				break;
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <menu_navigate+0x3e>
			}
			glob_current_menu_item += 1;
     8ce:	9f 5f       	subi	r25, 0xFF	; 255
     8d0:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <glob_current_menu_item>
		case Neutral:
			break;
		
	}
	
}
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <menu_init>:
	}
}


void menu_init(){
	glob_menu_length.main_menu = 2;
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <glob_menu_length>
	glob_current_menu_item = 0;
     8de:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <glob_current_menu_item>
	glob_current_menu = main_menu;
     8e2:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <glob_current_menu>
     8e6:	08 95       	ret

000008e8 <oled_write_command>:
}

void oled_pos(uint8_t line, uint8_t column){
	oled_goto_line(line);
	oled_goto_column(column);
}
     8e8:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xe42>
     8ec:	08 95       	ret

000008ee <oled_write_data>:
     8ee:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0x1042>
     8f2:	08 95       	ret

000008f4 <oled_init_program>:
     8f4:	8e ea       	ldi	r24, 0xAE	; 174
     8f6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     8fa:	81 ea       	ldi	r24, 0xA1	; 161
     8fc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     900:	8a ed       	ldi	r24, 0xDA	; 218
     902:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     906:	82 e1       	ldi	r24, 0x12	; 18
     908:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     90c:	88 ec       	ldi	r24, 0xC8	; 200
     90e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     912:	88 ea       	ldi	r24, 0xA8	; 168
     914:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     918:	8f e3       	ldi	r24, 0x3F	; 63
     91a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     91e:	85 ed       	ldi	r24, 0xD5	; 213
     920:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     92a:	81 e8       	ldi	r24, 0x81	; 129
     92c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     930:	80 e5       	ldi	r24, 0x50	; 80
     932:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     936:	89 ed       	ldi	r24, 0xD9	; 217
     938:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     93c:	81 e2       	ldi	r24, 0x21	; 33
     93e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     942:	80 e2       	ldi	r24, 0x20	; 32
     944:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     94e:	8b ed       	ldi	r24, 0xDB	; 219
     950:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     954:	80 e3       	ldi	r24, 0x30	; 48
     956:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     95a:	8d ea       	ldi	r24, 0xAD	; 173
     95c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     966:	84 ea       	ldi	r24, 0xA4	; 164
     968:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     96c:	86 ea       	ldi	r24, 0xA6	; 166
     96e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     972:	8f ea       	ldi	r24, 0xAF	; 175
     974:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     978:	08 95       	ret

0000097a <oled_goto_line>:
     97a:	cf 93       	push	r28
     97c:	c8 2f       	mov	r28, r24
     97e:	80 eb       	ldi	r24, 0xB0	; 176
     980:	8c 0f       	add	r24, r28
     982:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     986:	c0 93 b7 01 	sts	0x01B7, r28	; 0x8001b7 <glob_current_line>
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <oled_goto_column>:
     98e:	cf 93       	push	r28
     990:	c8 2f       	mov	r28, r24
     992:	8f 70       	andi	r24, 0x0F	; 15
     994:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     998:	8c 2f       	mov	r24, r28
     99a:	82 95       	swap	r24
     99c:	8f 70       	andi	r24, 0x0F	; 15
     99e:	80 5f       	subi	r24, 0xF0	; 240
     9a0:	0e 94 74 04 	call	0x8e8	; 0x8e8 <oled_write_command>
     9a4:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <glob_current_column>
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <oled_clear_line>:

void oled_clear_line(uint8_t line){
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
	oled_goto_line(line);
     9b0:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_goto_line>
	for(int col = 0; col < 128; col++){
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <oled_clear_line+0x16>
		oled_write_data(0);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 77 04 	call	0x8ee	; 0x8ee <oled_write_data>
	oled_goto_column(column);
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	for(int col = 0; col < 128; col++){
     9c0:	21 96       	adiw	r28, 0x01	; 1
     9c2:	c0 38       	cpi	r28, 0x80	; 128
     9c4:	d1 05       	cpc	r29, r1
     9c6:	cc f3       	brlt	.-14     	; 0x9ba <oled_clear_line+0xe>
		oled_write_data(0);
	}
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <oled_clear_screen>:
	oled_write_command(column & (0b1111));
	oled_write_command(0x10 + (column >> 4));
	
	glob_current_column = column;
}
void oled_clear_screen(){
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
	for(int line = 0; line < 8; line++){
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <oled_clear_screen+0x12>
		oled_clear_line(line);
     9d8:	8c 2f       	mov	r24, r28
     9da:	0e 94 d6 04 	call	0x9ac	; 0x9ac <oled_clear_line>
	oled_write_command(0x10 + (column >> 4));
	
	glob_current_column = column;
}
void oled_clear_screen(){
	for(int line = 0; line < 8; line++){
     9de:	21 96       	adiw	r28, 0x01	; 1
     9e0:	c8 30       	cpi	r28, 0x08	; 8
     9e2:	d1 05       	cpc	r29, r1
     9e4:	cc f3       	brlt	.-14     	; 0x9d8 <oled_clear_screen+0xa>
		oled_clear_line(line);
	}
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <oled_reset>:

void oled_reset(){
	oled_clear_screen();
     9ec:	0e 94 e7 04 	call	0x9ce	; 0x9ce <oled_clear_screen>
	oled_goto_line(0);
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_goto_line>
	oled_goto_column(0);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 c7 04 	call	0x98e	; 0x98e <oled_goto_column>
     9fc:	08 95       	ret

000009fe <oled_increment_page_index>:
		oled_putchar(message[index], font_size);
	}
}

void oled_increment_page_index(){
	if(glob_current_line == MAX_LINE){
     9fe:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <glob_current_line>
     a02:	87 30       	cpi	r24, 0x07	; 7
     a04:	21 f4       	brne	.+8      	; 0xa0e <oled_increment_page_index+0x10>
		oled_goto_line(0);
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_goto_line>
		return;
     a0c:	08 95       	ret
	}
	oled_goto_line(glob_current_line + 1);
     a0e:	8f 5f       	subi	r24, 0xFF	; 255
     a10:	0e 94 bd 04 	call	0x97a	; 0x97a <oled_goto_line>
     a14:	08 95       	ret

00000a16 <oled_putchar>:
	for(int col = 0; col < 128; col++){
		oled_write_data(0);
	}
}

void oled_putchar(const char ch, uint8_t font_size){
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	d8 2f       	mov	r29, r24
     a20:	c6 2f       	mov	r28, r22
	switch (ch){
     a22:	8a 30       	cpi	r24, 0x0A	; 10
     a24:	29 f0       	breq	.+10     	; 0xa30 <oled_putchar+0x1a>
     a26:	8d 30       	cpi	r24, 0x0D	; 13
     a28:	31 f0       	breq	.+12     	; 0xa36 <oled_putchar+0x20>
     a2a:	89 30       	cpi	r24, 0x09	; 9
     a2c:	a9 f4       	brne	.+42     	; 0xa58 <oled_putchar+0x42>
     a2e:	0e c0       	rjmp	.+28     	; 0xa4c <oled_putchar+0x36>
		case '\n':
			oled_increment_page_index();
     a30:	0e 94 ff 04 	call	0x9fe	; 0x9fe <oled_increment_page_index>
			break;
     a34:	69 c0       	rjmp	.+210    	; 0xb08 <oled_putchar+0xf2>
		case '\r':
			oled_goto_column(0);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 c7 04 	call	0x98e	; 0x98e <oled_goto_column>
			break;
     a3c:	65 c0       	rjmp	.+202    	; 0xb08 <oled_putchar+0xf2>
		case '\t':
			for (int i = 0; i < 4; i++){
				oled_putchar(' ', font_size);
     a3e:	6c 2f       	mov	r22, r28
     a40:	80 e2       	ldi	r24, 0x20	; 32
     a42:	0e 94 0b 05 	call	0xa16	; 0xa16 <oled_putchar>
			break;
		case '\r':
			oled_goto_column(0);
			break;
		case '\t':
			for (int i = 0; i < 4; i++){
     a46:	0f 5f       	subi	r16, 0xFF	; 255
     a48:	1f 4f       	sbci	r17, 0xFF	; 255
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <oled_putchar+0x3a>
		oled_write_data(0);
	}
}

void oled_putchar(const char ch, uint8_t font_size){
	switch (ch){
     a4c:	00 e0       	ldi	r16, 0x00	; 0
     a4e:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case '\r':
			oled_goto_column(0);
			break;
		case '\t':
			for (int i = 0; i < 4; i++){
     a50:	04 30       	cpi	r16, 0x04	; 4
     a52:	11 05       	cpc	r17, r1
     a54:	a4 f3       	brlt	.-24     	; 0xa3e <oled_putchar+0x28>
     a56:	58 c0       	rjmp	.+176    	; 0xb08 <oled_putchar+0xf2>
				oled_putchar(' ', font_size);
			}
			break;
	
	default:
		if(glob_current_column + font_size > 127){
     a58:	20 91 b4 01 	lds	r18, 0x01B4	; 0x8001b4 <glob_current_column>
     a5c:	86 2f       	mov	r24, r22
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	82 0f       	add	r24, r18
     a62:	91 1d       	adc	r25, r1
     a64:	80 38       	cpi	r24, 0x80	; 128
     a66:	91 05       	cpc	r25, r1
     a68:	2c f0       	brlt	.+10     	; 0xa74 <oled_putchar+0x5e>
			oled_increment_page_index();
     a6a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <oled_increment_page_index>
			oled_goto_column(0);
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 c7 04 	call	0x98e	; 0x98e <oled_goto_column>
		}
		if(font_size == 4){
     a74:	c4 30       	cpi	r28, 0x04	; 4
     a76:	a9 f4       	brne	.+42     	; 0xaa2 <oled_putchar+0x8c>
     a78:	10 c0       	rjmp	.+32     	; 0xa9a <oled_putchar+0x84>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
     a7a:	ed 2f       	mov	r30, r29
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	b0 97       	sbiw	r30, 0x20	; 32
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	e1 0f       	add	r30, r17
     a8a:	f1 1d       	adc	r31, r1
     a8c:	e0 59       	subi	r30, 0x90	; 144
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	84 91       	lpm	r24, Z
     a92:	0e 94 77 04 	call	0x8ee	; 0x8ee <oled_write_data>
		if(glob_current_column + font_size > 127){
			oled_increment_page_index();
			oled_goto_column(0);
		}
		if(font_size == 4){
			for(uint8_t column = 0; column < font_size; column++){
     a96:	1f 5f       	subi	r17, 0xFF	; 255
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <oled_putchar+0x86>
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	1c 17       	cp	r17, r28
     a9e:	68 f3       	brcs	.-38     	; 0xa7a <oled_putchar+0x64>
     aa0:	2e c0       	rjmp	.+92     	; 0xafe <oled_putchar+0xe8>
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
			}
		}
		else if(font_size == 5){
     aa2:	c5 30       	cpi	r28, 0x05	; 5
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <oled_putchar+0xba>
     aa6:	10 e0       	ldi	r17, 0x00	; 0
     aa8:	28 c0       	rjmp	.+80     	; 0xafa <oled_putchar+0xe4>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
     aaa:	8d 2f       	mov	r24, r29
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	80 97       	sbiw	r24, 0x20	; 32
     ab0:	fc 01       	movw	r30, r24
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	e8 0f       	add	r30, r24
     abc:	f9 1f       	adc	r31, r25
     abe:	e1 0f       	add	r30, r17
     ac0:	f1 1d       	adc	r31, r1
     ac2:	e4 51       	subi	r30, 0x14	; 20
     ac4:	fe 4f       	sbci	r31, 0xFE	; 254
     ac6:	84 91       	lpm	r24, Z
     ac8:	0e 94 77 04 	call	0x8ee	; 0x8ee <oled_write_data>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font4[ch - 32][column])));
			}
		}
		else if(font_size == 5){
			for(uint8_t column = 0; column < font_size; column++){
     acc:	1f 5f       	subi	r17, 0xFF	; 255
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <oled_putchar+0xbc>
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	1c 17       	cp	r17, r28
     ad4:	50 f3       	brcs	.-44     	; 0xaaa <oled_putchar+0x94>
     ad6:	13 c0       	rjmp	.+38     	; 0xafe <oled_putchar+0xe8>
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
			}
		}
		else{
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font8[ch - 32][column])));
     ad8:	ed 2f       	mov	r30, r29
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	b0 97       	sbiw	r30, 0x20	; 32
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	e1 0f       	add	r30, r17
     aec:	f1 1d       	adc	r31, r1
     aee:	e9 53       	subi	r30, 0x39	; 57
     af0:	fc 4f       	sbci	r31, 0xFC	; 252
     af2:	84 91       	lpm	r24, Z
     af4:	0e 94 77 04 	call	0x8ee	; 0x8ee <oled_write_data>
			for(uint8_t column = 0; column < font_size; column++){
				oled_write_data(pgm_read_byte(&(font5[ch - 32][column])));
			}
		}
		else{
			for(uint8_t column = 0; column < font_size; column++){
     af8:	1f 5f       	subi	r17, 0xFF	; 255
     afa:	1c 17       	cp	r17, r28
     afc:	68 f3       	brcs	.-38     	; 0xad8 <oled_putchar+0xc2>
				oled_write_data(pgm_read_byte(&(font8[ch - 32][column])));
			}
		}
		glob_current_column += font_size;
     afe:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <glob_current_column>
     b02:	c8 0f       	add	r28, r24
     b04:	c0 93 b4 01 	sts	0x01B4, r28	; 0x8001b4 <glob_current_column>
	}
}
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <oled_print>:

void oled_print(const char* message, uint8_t font_size){
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	7c 01       	movw	r14, r24
     b20:	d6 2f       	mov	r29, r22

	size_t size = strlen(message);
     b22:	fc 01       	movw	r30, r24
     b24:	01 90       	ld	r0, Z+
     b26:	00 20       	and	r0, r0
     b28:	e9 f7       	brne	.-6      	; 0xb24 <oled_print+0x12>
     b2a:	31 97       	sbiw	r30, 0x01	; 1
     b2c:	8f 01       	movw	r16, r30
     b2e:	08 1b       	sub	r16, r24
     b30:	19 0b       	sbc	r17, r25
	
	printf("\n\r%s", message);
     b32:	ff 92       	push	r15
     b34:	8f 93       	push	r24
     b36:	85 e3       	ldi	r24, 0x35	; 53
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	0e 94 af 06 	call	0xd5e	; 0xd5e <printf>
	
	for(uint8_t index = 0; index < size; index++){
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	0f 90       	pop	r0
     b48:	0f 90       	pop	r0
     b4a:	c0 e0       	ldi	r28, 0x00	; 0
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <oled_print+0x4c>
		oled_putchar(message[index], font_size);
     b4e:	f7 01       	movw	r30, r14
     b50:	e8 0f       	add	r30, r24
     b52:	f9 1f       	adc	r31, r25
     b54:	6d 2f       	mov	r22, r29
     b56:	80 81       	ld	r24, Z
     b58:	0e 94 0b 05 	call	0xa16	; 0xa16 <oled_putchar>

	size_t size = strlen(message);
	
	printf("\n\r%s", message);
	
	for(uint8_t index = 0; index < size; index++){
     b5c:	cf 5f       	subi	r28, 0xFF	; 255
     b5e:	8c 2f       	mov	r24, r28
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	80 17       	cp	r24, r16
     b64:	91 07       	cpc	r25, r17
     b66:	98 f3       	brcs	.-26     	; 0xb4e <oled_print+0x3c>
		oled_putchar(message[index], font_size);
	}
}
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <SRAM_test>:
 *  Author: andreurn
 */ 

#include "sram.h"

void SRAM_test(void){
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	00 d0       	rcall	.+0      	; 0xb88 <SRAM_test+0x12>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n\r");
     b8c:	8a e3       	ldi	r24, 0x3A	; 58
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 af 06 	call	0xd5e	; 0xd5e <printf>
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
     b98:	0e 94 9f 06 	call	0xd3e	; 0xd3e <rand>
     b9c:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     b9e:	0e 94 a4 06 	call	0xd48	; 0xd48 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	10 e0       	ldi	r17, 0x00	; 0
#include "sram.h"

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
     baa:	e1 2c       	mov	r14, r1
     bac:	f1 2c       	mov	r15, r1
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bae:	12 c0       	rjmp	.+36     	; 0xbd4 <SRAM_test+0x5e>
		volatile uint8_t some_value = rand();
     bb0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <rand>
     bb4:	8a 83       	std	Y+2, r24	; 0x02
		ext_ram[i] = some_value;
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	f8 01       	movw	r30, r16
     bba:	f8 5e       	subi	r31, 0xE8	; 232
     bbc:	80 83       	st	Z, r24
		volatile uint8_t retreived_value = ext_ram[i];
     bbe:	80 81       	ld	r24, Z
     bc0:	89 83       	std	Y+1, r24	; 0x01
		if (retreived_value != some_value) {
     bc2:	99 81       	ldd	r25, Y+1	; 0x01
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	98 17       	cp	r25, r24
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <SRAM_test+0x5a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	e8 1a       	sub	r14, r24
     bce:	f8 0a       	sbc	r15, r24
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bd0:	0f 5f       	subi	r16, 0xFF	; 255
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
     bd4:	01 15       	cp	r16, r1
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	18 07       	cpc	r17, r24
     bda:	50 f3       	brcs	.-44     	; 0xbb0 <SRAM_test+0x3a>
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     bdc:	c6 01       	movw	r24, r12
     bde:	0e 94 a4 06 	call	0xd48	; 0xd48 <srand>
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     be2:	00 e0       	ldi	r16, 0x00	; 0
     be4:	10 e0       	ldi	r17, 0x00	; 0

void SRAM_test(void){
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
     be6:	c1 2c       	mov	r12, r1
     be8:	d1 2c       	mov	r13, r1
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     bea:	0c c0       	rjmp	.+24     	; 0xc04 <SRAM_test+0x8e>
		uint8_t some_value = rand();
     bec:	0e 94 9f 06 	call	0xd3e	; 0xd3e <rand>
		uint8_t retreived_value = ext_ram[i];
     bf0:	f8 01       	movw	r30, r16
     bf2:	f8 5e       	subi	r31, 0xE8	; 232
     bf4:	90 81       	ld	r25, Z
		if (retreived_value != some_value) {
     bf6:	89 17       	cp	r24, r25
     bf8:	19 f0       	breq	.+6      	; 0xc00 <SRAM_test+0x8a>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	c8 1a       	sub	r12, r24
     bfe:	d8 0a       	sbc	r13, r24
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
     c00:	0f 5f       	subi	r16, 0xFF	; 255
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	01 15       	cp	r16, r1
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	18 07       	cpc	r17, r24
     c0a:	80 f3       	brcs	.-32     	; 0xbec <SRAM_test+0x76>
		if (retreived_value != some_value) {
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\n\r", write_errors, retrieval_errors);
     c0c:	df 92       	push	r13
     c0e:	cf 92       	push	r12
     c10:	ff 92       	push	r15
     c12:	ef 92       	push	r14
     c14:	82 e5       	ldi	r24, 0x52	; 82
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	9f 93       	push	r25
     c1a:	8f 93       	push	r24
     c1c:	0e 94 af 06 	call	0xd5e	; 0xd5e <printf>
}
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	08 95       	ret

00000c42 <SRAM_init>:

void SRAM_init(){
	set_bit(MCUCR, SRE);
     c42:	85 b7       	in	r24, 0x35	; 53
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR, XMM2);
     c48:	80 b7       	in	r24, 0x30	; 48
     c4a:	80 62       	ori	r24, 0x20	; 32
     c4c:	80 bf       	out	0x30, r24	; 48
     c4e:	08 95       	ret

00000c50 <main>:


int main(void){
    // enable global interrupt flags
	//interrupt_init();
	SRAM_init();
     c50:	0e 94 21 06 	call	0xc42	; 0xc42 <SRAM_init>
	ADC_init();
     c54:	0e 94 7f 03 	call	0x6fe	; 0x6fe <ADC_init>
	oled_init_program();
     c58:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <oled_init_program>
	SRAM_test();
     c5c:	0e 94 bb 05 	call	0xb76	; 0xb76 <SRAM_test>
	menu_init();
     c60:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <menu_init>
	
	oled_reset();
     c64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <oled_reset>
	
	menu_print();
     c68:	0e 94 07 04 	call	0x80e	; 0x80e <menu_print>
	while(1){
		ADC_sample(&joystick_x, &joystick_y, &slider_right, &slider_left);
     c6c:	21 eb       	ldi	r18, 0xB1	; 177
     c6e:	31 e0       	ldi	r19, 0x01	; 1
     c70:	42 eb       	ldi	r20, 0xB2	; 178
     c72:	51 e0       	ldi	r21, 0x01	; 1
     c74:	6e ea       	ldi	r22, 0xAE	; 174
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	8f ea       	ldi	r24, 0xAF	; 175
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 90 03 	call	0x720	; 0x720 <ADC_sample>
		if(joystick_handle()){
     c80:	0e 94 ae 03 	call	0x75c	; 0x75c <joystick_handle>
     c84:	88 23       	and	r24, r24
     c86:	41 f0       	breq	.+16     	; 0xc98 <main+0x48>
			menu_navigate(joystick_position, glob_current_menu);
     c88:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <glob_current_menu>
     c8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <joystick_position>
     c90:	0e 94 4b 04 	call	0x896	; 0x896 <menu_navigate>
			menu_print();
     c94:	0e 94 07 04 	call	0x80e	; 0x80e <menu_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c98:	8c ec       	ldi	r24, 0xCC	; 204
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <main+0x4c>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <main+0x52>
     ca2:	00 00       	nop
     ca4:	e3 cf       	rjmp	.-58     	; 0xc6c <main+0x1c>

00000ca6 <do_rand>:
     ca6:	8f 92       	push	r8
     ca8:	9f 92       	push	r9
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
     cbc:	68 81       	ld	r22, Y
     cbe:	79 81       	ldd	r23, Y+1	; 0x01
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	81 05       	cpc	r24, r1
     cca:	91 05       	cpc	r25, r1
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <do_rand+0x30>
     cce:	64 e2       	ldi	r22, 0x24	; 36
     cd0:	79 ed       	ldi	r23, 0xD9	; 217
     cd2:	8b e5       	ldi	r24, 0x5B	; 91
     cd4:	97 e0       	ldi	r25, 0x07	; 7
     cd6:	2d e1       	ldi	r18, 0x1D	; 29
     cd8:	33 ef       	ldi	r19, 0xF3	; 243
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 56 09 	call	0x12ac	; 0x12ac <__divmodsi4>
     ce2:	49 01       	movw	r8, r18
     ce4:	5a 01       	movw	r10, r20
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	a7 ea       	ldi	r26, 0xA7	; 167
     cec:	b1 e4       	ldi	r27, 0x41	; 65
     cee:	0e 94 75 09 	call	0x12ea	; 0x12ea <__muluhisi3>
     cf2:	6b 01       	movw	r12, r22
     cf4:	7c 01       	movw	r14, r24
     cf6:	ac ee       	ldi	r26, 0xEC	; 236
     cf8:	b4 ef       	ldi	r27, 0xF4	; 244
     cfa:	a5 01       	movw	r20, r10
     cfc:	94 01       	movw	r18, r8
     cfe:	0e 94 83 09 	call	0x1306	; 0x1306 <__mulohisi3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8c 0d       	add	r24, r12
     d08:	9d 1d       	adc	r25, r13
     d0a:	ae 1d       	adc	r26, r14
     d0c:	bf 1d       	adc	r27, r15
     d0e:	b7 ff       	sbrs	r27, 7
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <do_rand+0x72>
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	a1 09       	sbc	r26, r1
     d16:	b0 48       	sbci	r27, 0x80	; 128
     d18:	88 83       	st	Y, r24
     d1a:	99 83       	std	Y+1, r25	; 0x01
     d1c:	aa 83       	std	Y+2, r26	; 0x02
     d1e:	bb 83       	std	Y+3, r27	; 0x03
     d20:	9f 77       	andi	r25, 0x7F	; 127
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	08 95       	ret

00000d38 <rand_r>:
     d38:	0e 94 53 06 	call	0xca6	; 0xca6 <do_rand>
     d3c:	08 95       	ret

00000d3e <rand>:
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	0e 94 53 06 	call	0xca6	; 0xca6 <do_rand>
     d46:	08 95       	ret

00000d48 <srand>:
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d50:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d54:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     d58:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     d5c:	08 95       	ret

00000d5e <printf>:
     d5e:	a0 e0       	ldi	r26, 0x00	; 0
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 eb       	ldi	r30, 0xB5	; 181
     d64:	f6 e0       	ldi	r31, 0x06	; 6
     d66:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__prologue_saves__+0x20>
     d6a:	ae 01       	movw	r20, r28
     d6c:	4b 5f       	subi	r20, 0xFB	; 251
     d6e:	5f 4f       	sbci	r21, 0xFF	; 255
     d70:	fa 01       	movw	r30, r20
     d72:	61 91       	ld	r22, Z+
     d74:	71 91       	ld	r23, Z+
     d76:	af 01       	movw	r20, r30
     d78:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <__iob+0x2>
     d7c:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <__iob+0x3>
     d80:	0e 94 c5 06 	call	0xd8a	; 0xd8a <vfprintf>
     d84:	e2 e0       	ldi	r30, 0x02	; 2
     d86:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__epilogue_restores__+0x20>

00000d8a <vfprintf>:
     d8a:	ab e0       	ldi	r26, 0x0B	; 11
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb ec       	ldi	r30, 0xCB	; 203
     d90:	f6 e0       	ldi	r31, 0x06	; 6
     d92:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__prologue_saves__>
     d96:	6c 01       	movw	r12, r24
     d98:	7b 01       	movw	r14, r22
     d9a:	8a 01       	movw	r16, r20
     d9c:	fc 01       	movw	r30, r24
     d9e:	17 82       	std	Z+7, r1	; 0x07
     da0:	16 82       	std	Z+6, r1	; 0x06
     da2:	83 81       	ldd	r24, Z+3	; 0x03
     da4:	81 ff       	sbrs	r24, 1
     da6:	cc c1       	rjmp	.+920    	; 0x1140 <vfprintf+0x3b6>
     da8:	ce 01       	movw	r24, r28
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	3c 01       	movw	r6, r24
     dae:	f6 01       	movw	r30, r12
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	f7 01       	movw	r30, r14
     db4:	93 fd       	sbrc	r25, 3
     db6:	85 91       	lpm	r24, Z+
     db8:	93 ff       	sbrs	r25, 3
     dba:	81 91       	ld	r24, Z+
     dbc:	7f 01       	movw	r14, r30
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <vfprintf+0x3a>
     dc2:	ba c1       	rjmp	.+884    	; 0x1138 <vfprintf+0x3ae>
     dc4:	85 32       	cpi	r24, 0x25	; 37
     dc6:	39 f4       	brne	.+14     	; 0xdd6 <vfprintf+0x4c>
     dc8:	93 fd       	sbrc	r25, 3
     dca:	85 91       	lpm	r24, Z+
     dcc:	93 ff       	sbrs	r25, 3
     dce:	81 91       	ld	r24, Z+
     dd0:	7f 01       	movw	r14, r30
     dd2:	85 32       	cpi	r24, 0x25	; 37
     dd4:	29 f4       	brne	.+10     	; 0xde0 <vfprintf+0x56>
     dd6:	b6 01       	movw	r22, r12
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
     dde:	e7 cf       	rjmp	.-50     	; 0xdae <vfprintf+0x24>
     de0:	91 2c       	mov	r9, r1
     de2:	21 2c       	mov	r2, r1
     de4:	31 2c       	mov	r3, r1
     de6:	ff e1       	ldi	r31, 0x1F	; 31
     de8:	f3 15       	cp	r31, r3
     dea:	d8 f0       	brcs	.+54     	; 0xe22 <vfprintf+0x98>
     dec:	8b 32       	cpi	r24, 0x2B	; 43
     dee:	79 f0       	breq	.+30     	; 0xe0e <vfprintf+0x84>
     df0:	38 f4       	brcc	.+14     	; 0xe00 <vfprintf+0x76>
     df2:	80 32       	cpi	r24, 0x20	; 32
     df4:	79 f0       	breq	.+30     	; 0xe14 <vfprintf+0x8a>
     df6:	83 32       	cpi	r24, 0x23	; 35
     df8:	a1 f4       	brne	.+40     	; 0xe22 <vfprintf+0x98>
     dfa:	23 2d       	mov	r18, r3
     dfc:	20 61       	ori	r18, 0x10	; 16
     dfe:	1d c0       	rjmp	.+58     	; 0xe3a <vfprintf+0xb0>
     e00:	8d 32       	cpi	r24, 0x2D	; 45
     e02:	61 f0       	breq	.+24     	; 0xe1c <vfprintf+0x92>
     e04:	80 33       	cpi	r24, 0x30	; 48
     e06:	69 f4       	brne	.+26     	; 0xe22 <vfprintf+0x98>
     e08:	23 2d       	mov	r18, r3
     e0a:	21 60       	ori	r18, 0x01	; 1
     e0c:	16 c0       	rjmp	.+44     	; 0xe3a <vfprintf+0xb0>
     e0e:	83 2d       	mov	r24, r3
     e10:	82 60       	ori	r24, 0x02	; 2
     e12:	38 2e       	mov	r3, r24
     e14:	e3 2d       	mov	r30, r3
     e16:	e4 60       	ori	r30, 0x04	; 4
     e18:	3e 2e       	mov	r3, r30
     e1a:	2a c0       	rjmp	.+84     	; 0xe70 <vfprintf+0xe6>
     e1c:	f3 2d       	mov	r31, r3
     e1e:	f8 60       	ori	r31, 0x08	; 8
     e20:	1d c0       	rjmp	.+58     	; 0xe5c <vfprintf+0xd2>
     e22:	37 fc       	sbrc	r3, 7
     e24:	2d c0       	rjmp	.+90     	; 0xe80 <vfprintf+0xf6>
     e26:	20 ed       	ldi	r18, 0xD0	; 208
     e28:	28 0f       	add	r18, r24
     e2a:	2a 30       	cpi	r18, 0x0A	; 10
     e2c:	40 f0       	brcs	.+16     	; 0xe3e <vfprintf+0xb4>
     e2e:	8e 32       	cpi	r24, 0x2E	; 46
     e30:	b9 f4       	brne	.+46     	; 0xe60 <vfprintf+0xd6>
     e32:	36 fc       	sbrc	r3, 6
     e34:	81 c1       	rjmp	.+770    	; 0x1138 <vfprintf+0x3ae>
     e36:	23 2d       	mov	r18, r3
     e38:	20 64       	ori	r18, 0x40	; 64
     e3a:	32 2e       	mov	r3, r18
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <vfprintf+0xe6>
     e3e:	36 fe       	sbrs	r3, 6
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <vfprintf+0xc4>
     e42:	8a e0       	ldi	r24, 0x0A	; 10
     e44:	98 9e       	mul	r9, r24
     e46:	20 0d       	add	r18, r0
     e48:	11 24       	eor	r1, r1
     e4a:	92 2e       	mov	r9, r18
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <vfprintf+0xe6>
     e4e:	ea e0       	ldi	r30, 0x0A	; 10
     e50:	2e 9e       	mul	r2, r30
     e52:	20 0d       	add	r18, r0
     e54:	11 24       	eor	r1, r1
     e56:	22 2e       	mov	r2, r18
     e58:	f3 2d       	mov	r31, r3
     e5a:	f0 62       	ori	r31, 0x20	; 32
     e5c:	3f 2e       	mov	r3, r31
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <vfprintf+0xe6>
     e60:	8c 36       	cpi	r24, 0x6C	; 108
     e62:	21 f4       	brne	.+8      	; 0xe6c <vfprintf+0xe2>
     e64:	83 2d       	mov	r24, r3
     e66:	80 68       	ori	r24, 0x80	; 128
     e68:	38 2e       	mov	r3, r24
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0xe6>
     e6c:	88 36       	cpi	r24, 0x68	; 104
     e6e:	41 f4       	brne	.+16     	; 0xe80 <vfprintf+0xf6>
     e70:	f7 01       	movw	r30, r14
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	7f 01       	movw	r14, r30
     e7c:	81 11       	cpse	r24, r1
     e7e:	b3 cf       	rjmp	.-154    	; 0xde6 <vfprintf+0x5c>
     e80:	98 2f       	mov	r25, r24
     e82:	9f 7d       	andi	r25, 0xDF	; 223
     e84:	95 54       	subi	r25, 0x45	; 69
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	28 f4       	brcc	.+10     	; 0xe94 <vfprintf+0x10a>
     e8a:	0c 5f       	subi	r16, 0xFC	; 252
     e8c:	1f 4f       	sbci	r17, 0xFF	; 255
     e8e:	9f e3       	ldi	r25, 0x3F	; 63
     e90:	99 83       	std	Y+1, r25	; 0x01
     e92:	0d c0       	rjmp	.+26     	; 0xeae <vfprintf+0x124>
     e94:	83 36       	cpi	r24, 0x63	; 99
     e96:	31 f0       	breq	.+12     	; 0xea4 <vfprintf+0x11a>
     e98:	83 37       	cpi	r24, 0x73	; 115
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <vfprintf+0x12e>
     e9c:	83 35       	cpi	r24, 0x53	; 83
     e9e:	09 f0       	breq	.+2      	; 0xea2 <vfprintf+0x118>
     ea0:	59 c0       	rjmp	.+178    	; 0xf54 <vfprintf+0x1ca>
     ea2:	21 c0       	rjmp	.+66     	; 0xee6 <vfprintf+0x15c>
     ea4:	f8 01       	movw	r30, r16
     ea6:	80 81       	ld	r24, Z
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	0e 5f       	subi	r16, 0xFE	; 254
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	88 24       	eor	r8, r8
     eb0:	83 94       	inc	r8
     eb2:	91 2c       	mov	r9, r1
     eb4:	53 01       	movw	r10, r6
     eb6:	13 c0       	rjmp	.+38     	; 0xede <vfprintf+0x154>
     eb8:	28 01       	movw	r4, r16
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	4f 0e       	add	r4, r31
     ebe:	51 1c       	adc	r5, r1
     ec0:	f8 01       	movw	r30, r16
     ec2:	a0 80       	ld	r10, Z
     ec4:	b1 80       	ldd	r11, Z+1	; 0x01
     ec6:	36 fe       	sbrs	r3, 6
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x146>
     eca:	69 2d       	mov	r22, r9
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x14a>
     ed0:	6f ef       	ldi	r22, 0xFF	; 255
     ed2:	7f ef       	ldi	r23, 0xFF	; 255
     ed4:	c5 01       	movw	r24, r10
     ed6:	0e 94 b1 08 	call	0x1162	; 0x1162 <strnlen>
     eda:	4c 01       	movw	r8, r24
     edc:	82 01       	movw	r16, r4
     ede:	f3 2d       	mov	r31, r3
     ee0:	ff 77       	andi	r31, 0x7F	; 127
     ee2:	3f 2e       	mov	r3, r31
     ee4:	16 c0       	rjmp	.+44     	; 0xf12 <vfprintf+0x188>
     ee6:	28 01       	movw	r4, r16
     ee8:	22 e0       	ldi	r18, 0x02	; 2
     eea:	42 0e       	add	r4, r18
     eec:	51 1c       	adc	r5, r1
     eee:	f8 01       	movw	r30, r16
     ef0:	a0 80       	ld	r10, Z
     ef2:	b1 80       	ldd	r11, Z+1	; 0x01
     ef4:	36 fe       	sbrs	r3, 6
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <vfprintf+0x174>
     ef8:	69 2d       	mov	r22, r9
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x178>
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	7f ef       	ldi	r23, 0xFF	; 255
     f02:	c5 01       	movw	r24, r10
     f04:	0e 94 a6 08 	call	0x114c	; 0x114c <strnlen_P>
     f08:	4c 01       	movw	r8, r24
     f0a:	f3 2d       	mov	r31, r3
     f0c:	f0 68       	ori	r31, 0x80	; 128
     f0e:	3f 2e       	mov	r3, r31
     f10:	82 01       	movw	r16, r4
     f12:	33 fc       	sbrc	r3, 3
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <vfprintf+0x1c2>
     f16:	82 2d       	mov	r24, r2
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	88 16       	cp	r8, r24
     f1c:	99 06       	cpc	r9, r25
     f1e:	b0 f4       	brcc	.+44     	; 0xf4c <vfprintf+0x1c2>
     f20:	b6 01       	movw	r22, r12
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
     f2a:	2a 94       	dec	r2
     f2c:	f4 cf       	rjmp	.-24     	; 0xf16 <vfprintf+0x18c>
     f2e:	f5 01       	movw	r30, r10
     f30:	37 fc       	sbrc	r3, 7
     f32:	85 91       	lpm	r24, Z+
     f34:	37 fe       	sbrs	r3, 7
     f36:	81 91       	ld	r24, Z+
     f38:	5f 01       	movw	r10, r30
     f3a:	b6 01       	movw	r22, r12
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
     f42:	21 10       	cpse	r2, r1
     f44:	2a 94       	dec	r2
     f46:	21 e0       	ldi	r18, 0x01	; 1
     f48:	82 1a       	sub	r8, r18
     f4a:	91 08       	sbc	r9, r1
     f4c:	81 14       	cp	r8, r1
     f4e:	91 04       	cpc	r9, r1
     f50:	71 f7       	brne	.-36     	; 0xf2e <vfprintf+0x1a4>
     f52:	e8 c0       	rjmp	.+464    	; 0x1124 <vfprintf+0x39a>
     f54:	84 36       	cpi	r24, 0x64	; 100
     f56:	11 f0       	breq	.+4      	; 0xf5c <vfprintf+0x1d2>
     f58:	89 36       	cpi	r24, 0x69	; 105
     f5a:	41 f5       	brne	.+80     	; 0xfac <vfprintf+0x222>
     f5c:	f8 01       	movw	r30, r16
     f5e:	37 fe       	sbrs	r3, 7
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <vfprintf+0x1e6>
     f62:	60 81       	ld	r22, Z
     f64:	71 81       	ldd	r23, Z+1	; 0x01
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	93 81       	ldd	r25, Z+3	; 0x03
     f6a:	0c 5f       	subi	r16, 0xFC	; 252
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	08 c0       	rjmp	.+16     	; 0xf80 <vfprintf+0x1f6>
     f70:	60 81       	ld	r22, Z
     f72:	71 81       	ldd	r23, Z+1	; 0x01
     f74:	07 2e       	mov	r0, r23
     f76:	00 0c       	add	r0, r0
     f78:	88 0b       	sbc	r24, r24
     f7a:	99 0b       	sbc	r25, r25
     f7c:	0e 5f       	subi	r16, 0xFE	; 254
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	f3 2d       	mov	r31, r3
     f82:	ff 76       	andi	r31, 0x6F	; 111
     f84:	3f 2e       	mov	r3, r31
     f86:	97 ff       	sbrs	r25, 7
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <vfprintf+0x212>
     f8a:	90 95       	com	r25
     f8c:	80 95       	com	r24
     f8e:	70 95       	com	r23
     f90:	61 95       	neg	r22
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	f0 68       	ori	r31, 0x80	; 128
     f9a:	3f 2e       	mov	r3, r31
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a3 01       	movw	r20, r6
     fa2:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__ultoa_invert>
     fa6:	88 2e       	mov	r8, r24
     fa8:	86 18       	sub	r8, r6
     faa:	45 c0       	rjmp	.+138    	; 0x1036 <vfprintf+0x2ac>
     fac:	85 37       	cpi	r24, 0x75	; 117
     fae:	31 f4       	brne	.+12     	; 0xfbc <vfprintf+0x232>
     fb0:	23 2d       	mov	r18, r3
     fb2:	2f 7e       	andi	r18, 0xEF	; 239
     fb4:	b2 2e       	mov	r11, r18
     fb6:	2a e0       	ldi	r18, 0x0A	; 10
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	25 c0       	rjmp	.+74     	; 0x1006 <vfprintf+0x27c>
     fbc:	93 2d       	mov	r25, r3
     fbe:	99 7f       	andi	r25, 0xF9	; 249
     fc0:	b9 2e       	mov	r11, r25
     fc2:	8f 36       	cpi	r24, 0x6F	; 111
     fc4:	c1 f0       	breq	.+48     	; 0xff6 <vfprintf+0x26c>
     fc6:	18 f4       	brcc	.+6      	; 0xfce <vfprintf+0x244>
     fc8:	88 35       	cpi	r24, 0x58	; 88
     fca:	79 f0       	breq	.+30     	; 0xfea <vfprintf+0x260>
     fcc:	b5 c0       	rjmp	.+362    	; 0x1138 <vfprintf+0x3ae>
     fce:	80 37       	cpi	r24, 0x70	; 112
     fd0:	19 f0       	breq	.+6      	; 0xfd8 <vfprintf+0x24e>
     fd2:	88 37       	cpi	r24, 0x78	; 120
     fd4:	21 f0       	breq	.+8      	; 0xfde <vfprintf+0x254>
     fd6:	b0 c0       	rjmp	.+352    	; 0x1138 <vfprintf+0x3ae>
     fd8:	e9 2f       	mov	r30, r25
     fda:	e0 61       	ori	r30, 0x10	; 16
     fdc:	be 2e       	mov	r11, r30
     fde:	b4 fe       	sbrs	r11, 4
     fe0:	0d c0       	rjmp	.+26     	; 0xffc <vfprintf+0x272>
     fe2:	fb 2d       	mov	r31, r11
     fe4:	f4 60       	ori	r31, 0x04	; 4
     fe6:	bf 2e       	mov	r11, r31
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <vfprintf+0x272>
     fea:	34 fe       	sbrs	r3, 4
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <vfprintf+0x278>
     fee:	29 2f       	mov	r18, r25
     ff0:	26 60       	ori	r18, 0x06	; 6
     ff2:	b2 2e       	mov	r11, r18
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0x278>
     ff6:	28 e0       	ldi	r18, 0x08	; 8
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <vfprintf+0x27c>
     ffc:	20 e1       	ldi	r18, 0x10	; 16
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <vfprintf+0x27c>
    1002:	20 e1       	ldi	r18, 0x10	; 16
    1004:	32 e0       	ldi	r19, 0x02	; 2
    1006:	f8 01       	movw	r30, r16
    1008:	b7 fe       	sbrs	r11, 7
    100a:	07 c0       	rjmp	.+14     	; 0x101a <vfprintf+0x290>
    100c:	60 81       	ld	r22, Z
    100e:	71 81       	ldd	r23, Z+1	; 0x01
    1010:	82 81       	ldd	r24, Z+2	; 0x02
    1012:	93 81       	ldd	r25, Z+3	; 0x03
    1014:	0c 5f       	subi	r16, 0xFC	; 252
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0x29c>
    101a:	60 81       	ld	r22, Z
    101c:	71 81       	ldd	r23, Z+1	; 0x01
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 5f       	subi	r16, 0xFE	; 254
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	a3 01       	movw	r20, r6
    1028:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__ultoa_invert>
    102c:	88 2e       	mov	r8, r24
    102e:	86 18       	sub	r8, r6
    1030:	fb 2d       	mov	r31, r11
    1032:	ff 77       	andi	r31, 0x7F	; 127
    1034:	3f 2e       	mov	r3, r31
    1036:	36 fe       	sbrs	r3, 6
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <vfprintf+0x2ca>
    103a:	23 2d       	mov	r18, r3
    103c:	2e 7f       	andi	r18, 0xFE	; 254
    103e:	a2 2e       	mov	r10, r18
    1040:	89 14       	cp	r8, r9
    1042:	58 f4       	brcc	.+22     	; 0x105a <vfprintf+0x2d0>
    1044:	34 fe       	sbrs	r3, 4
    1046:	0b c0       	rjmp	.+22     	; 0x105e <vfprintf+0x2d4>
    1048:	32 fc       	sbrc	r3, 2
    104a:	09 c0       	rjmp	.+18     	; 0x105e <vfprintf+0x2d4>
    104c:	83 2d       	mov	r24, r3
    104e:	8e 7e       	andi	r24, 0xEE	; 238
    1050:	a8 2e       	mov	r10, r24
    1052:	05 c0       	rjmp	.+10     	; 0x105e <vfprintf+0x2d4>
    1054:	b8 2c       	mov	r11, r8
    1056:	a3 2c       	mov	r10, r3
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <vfprintf+0x2d6>
    105a:	b8 2c       	mov	r11, r8
    105c:	01 c0       	rjmp	.+2      	; 0x1060 <vfprintf+0x2d6>
    105e:	b9 2c       	mov	r11, r9
    1060:	a4 fe       	sbrs	r10, 4
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <vfprintf+0x2f8>
    1064:	fe 01       	movw	r30, r28
    1066:	e8 0d       	add	r30, r8
    1068:	f1 1d       	adc	r31, r1
    106a:	80 81       	ld	r24, Z
    106c:	80 33       	cpi	r24, 0x30	; 48
    106e:	21 f4       	brne	.+8      	; 0x1078 <vfprintf+0x2ee>
    1070:	9a 2d       	mov	r25, r10
    1072:	99 7e       	andi	r25, 0xE9	; 233
    1074:	a9 2e       	mov	r10, r25
    1076:	09 c0       	rjmp	.+18     	; 0x108a <vfprintf+0x300>
    1078:	a2 fe       	sbrs	r10, 2
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0x2fe>
    107c:	b3 94       	inc	r11
    107e:	b3 94       	inc	r11
    1080:	04 c0       	rjmp	.+8      	; 0x108a <vfprintf+0x300>
    1082:	8a 2d       	mov	r24, r10
    1084:	86 78       	andi	r24, 0x86	; 134
    1086:	09 f0       	breq	.+2      	; 0x108a <vfprintf+0x300>
    1088:	b3 94       	inc	r11
    108a:	a3 fc       	sbrc	r10, 3
    108c:	11 c0       	rjmp	.+34     	; 0x10b0 <vfprintf+0x326>
    108e:	a0 fe       	sbrs	r10, 0
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x314>
    1092:	b2 14       	cp	r11, r2
    1094:	88 f4       	brcc	.+34     	; 0x10b8 <vfprintf+0x32e>
    1096:	28 0c       	add	r2, r8
    1098:	92 2c       	mov	r9, r2
    109a:	9b 18       	sub	r9, r11
    109c:	0e c0       	rjmp	.+28     	; 0x10ba <vfprintf+0x330>
    109e:	b2 14       	cp	r11, r2
    10a0:	60 f4       	brcc	.+24     	; 0x10ba <vfprintf+0x330>
    10a2:	b6 01       	movw	r22, r12
    10a4:	80 e2       	ldi	r24, 0x20	; 32
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    10ac:	b3 94       	inc	r11
    10ae:	f7 cf       	rjmp	.-18     	; 0x109e <vfprintf+0x314>
    10b0:	b2 14       	cp	r11, r2
    10b2:	18 f4       	brcc	.+6      	; 0x10ba <vfprintf+0x330>
    10b4:	2b 18       	sub	r2, r11
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <vfprintf+0x332>
    10b8:	98 2c       	mov	r9, r8
    10ba:	21 2c       	mov	r2, r1
    10bc:	a4 fe       	sbrs	r10, 4
    10be:	10 c0       	rjmp	.+32     	; 0x10e0 <vfprintf+0x356>
    10c0:	b6 01       	movw	r22, r12
    10c2:	80 e3       	ldi	r24, 0x30	; 48
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    10ca:	a2 fe       	sbrs	r10, 2
    10cc:	17 c0       	rjmp	.+46     	; 0x10fc <vfprintf+0x372>
    10ce:	a1 fc       	sbrc	r10, 1
    10d0:	03 c0       	rjmp	.+6      	; 0x10d8 <vfprintf+0x34e>
    10d2:	88 e7       	ldi	r24, 0x78	; 120
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x352>
    10d8:	88 e5       	ldi	r24, 0x58	; 88
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	b6 01       	movw	r22, r12
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <vfprintf+0x36e>
    10e0:	8a 2d       	mov	r24, r10
    10e2:	86 78       	andi	r24, 0x86	; 134
    10e4:	59 f0       	breq	.+22     	; 0x10fc <vfprintf+0x372>
    10e6:	a1 fe       	sbrs	r10, 1
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0x364>
    10ea:	8b e2       	ldi	r24, 0x2B	; 43
    10ec:	01 c0       	rjmp	.+2      	; 0x10f0 <vfprintf+0x366>
    10ee:	80 e2       	ldi	r24, 0x20	; 32
    10f0:	a7 fc       	sbrc	r10, 7
    10f2:	8d e2       	ldi	r24, 0x2D	; 45
    10f4:	b6 01       	movw	r22, r12
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    10fc:	89 14       	cp	r8, r9
    10fe:	38 f4       	brcc	.+14     	; 0x110e <vfprintf+0x384>
    1100:	b6 01       	movw	r22, r12
    1102:	80 e3       	ldi	r24, 0x30	; 48
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    110a:	9a 94       	dec	r9
    110c:	f7 cf       	rjmp	.-18     	; 0x10fc <vfprintf+0x372>
    110e:	8a 94       	dec	r8
    1110:	f3 01       	movw	r30, r6
    1112:	e8 0d       	add	r30, r8
    1114:	f1 1d       	adc	r31, r1
    1116:	80 81       	ld	r24, Z
    1118:	b6 01       	movw	r22, r12
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    1120:	81 10       	cpse	r8, r1
    1122:	f5 cf       	rjmp	.-22     	; 0x110e <vfprintf+0x384>
    1124:	22 20       	and	r2, r2
    1126:	09 f4       	brne	.+2      	; 0x112a <vfprintf+0x3a0>
    1128:	42 ce       	rjmp	.-892    	; 0xdae <vfprintf+0x24>
    112a:	b6 01       	movw	r22, r12
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 bc 08 	call	0x1178	; 0x1178 <fputc>
    1134:	2a 94       	dec	r2
    1136:	f6 cf       	rjmp	.-20     	; 0x1124 <vfprintf+0x39a>
    1138:	f6 01       	movw	r30, r12
    113a:	86 81       	ldd	r24, Z+6	; 0x06
    113c:	97 81       	ldd	r25, Z+7	; 0x07
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x3ba>
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	2b 96       	adiw	r28, 0x0b	; 11
    1146:	e2 e1       	ldi	r30, 0x12	; 18
    1148:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__epilogue_restores__>

0000114c <strnlen_P>:
    114c:	fc 01       	movw	r30, r24
    114e:	05 90       	lpm	r0, Z+
    1150:	61 50       	subi	r22, 0x01	; 1
    1152:	70 40       	sbci	r23, 0x00	; 0
    1154:	01 10       	cpse	r0, r1
    1156:	d8 f7       	brcc	.-10     	; 0x114e <strnlen_P+0x2>
    1158:	80 95       	com	r24
    115a:	90 95       	com	r25
    115c:	8e 0f       	add	r24, r30
    115e:	9f 1f       	adc	r25, r31
    1160:	08 95       	ret

00001162 <strnlen>:
    1162:	fc 01       	movw	r30, r24
    1164:	61 50       	subi	r22, 0x01	; 1
    1166:	70 40       	sbci	r23, 0x00	; 0
    1168:	01 90       	ld	r0, Z+
    116a:	01 10       	cpse	r0, r1
    116c:	d8 f7       	brcc	.-10     	; 0x1164 <strnlen+0x2>
    116e:	80 95       	com	r24
    1170:	90 95       	com	r25
    1172:	8e 0f       	add	r24, r30
    1174:	9f 1f       	adc	r25, r31
    1176:	08 95       	ret

00001178 <fputc>:
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	fb 01       	movw	r30, r22
    1182:	23 81       	ldd	r18, Z+3	; 0x03
    1184:	21 fd       	sbrc	r18, 1
    1186:	03 c0       	rjmp	.+6      	; 0x118e <fputc+0x16>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	2c c0       	rjmp	.+88     	; 0x11e6 <fputc+0x6e>
    118e:	22 ff       	sbrs	r18, 2
    1190:	16 c0       	rjmp	.+44     	; 0x11be <fputc+0x46>
    1192:	46 81       	ldd	r20, Z+6	; 0x06
    1194:	57 81       	ldd	r21, Z+7	; 0x07
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	42 17       	cp	r20, r18
    119c:	53 07       	cpc	r21, r19
    119e:	44 f4       	brge	.+16     	; 0x11b0 <fputc+0x38>
    11a0:	a0 81       	ld	r26, Z
    11a2:	b1 81       	ldd	r27, Z+1	; 0x01
    11a4:	9d 01       	movw	r18, r26
    11a6:	2f 5f       	subi	r18, 0xFF	; 255
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
    11ae:	8c 93       	st	X, r24
    11b0:	26 81       	ldd	r18, Z+6	; 0x06
    11b2:	37 81       	ldd	r19, Z+7	; 0x07
    11b4:	2f 5f       	subi	r18, 0xFF	; 255
    11b6:	3f 4f       	sbci	r19, 0xFF	; 255
    11b8:	37 83       	std	Z+7, r19	; 0x07
    11ba:	26 83       	std	Z+6, r18	; 0x06
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <fputc+0x6e>
    11be:	8b 01       	movw	r16, r22
    11c0:	ec 01       	movw	r28, r24
    11c2:	fb 01       	movw	r30, r22
    11c4:	00 84       	ldd	r0, Z+8	; 0x08
    11c6:	f1 85       	ldd	r31, Z+9	; 0x09
    11c8:	e0 2d       	mov	r30, r0
    11ca:	09 95       	icall
    11cc:	89 2b       	or	r24, r25
    11ce:	e1 f6       	brne	.-72     	; 0x1188 <fputc+0x10>
    11d0:	d8 01       	movw	r26, r16
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	8d 91       	ld	r24, X+
    11d6:	9c 91       	ld	r25, X
    11d8:	17 97       	sbiw	r26, 0x07	; 7
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	17 96       	adiw	r26, 0x07	; 7
    11de:	9c 93       	st	X, r25
    11e0:	8e 93       	st	-X, r24
    11e2:	16 97       	sbiw	r26, 0x06	; 6
    11e4:	ce 01       	movw	r24, r28
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <__ultoa_invert>:
    11f0:	fa 01       	movw	r30, r20
    11f2:	aa 27       	eor	r26, r26
    11f4:	28 30       	cpi	r18, 0x08	; 8
    11f6:	51 f1       	breq	.+84     	; 0x124c <__ultoa_invert+0x5c>
    11f8:	20 31       	cpi	r18, 0x10	; 16
    11fa:	81 f1       	breq	.+96     	; 0x125c <__ultoa_invert+0x6c>
    11fc:	e8 94       	clt
    11fe:	6f 93       	push	r22
    1200:	6e 7f       	andi	r22, 0xFE	; 254
    1202:	6e 5f       	subi	r22, 0xFE	; 254
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	af 4f       	sbci	r26, 0xFF	; 255
    120c:	b1 e0       	ldi	r27, 0x01	; 1
    120e:	3e d0       	rcall	.+124    	; 0x128c <__ultoa_invert+0x9c>
    1210:	b4 e0       	ldi	r27, 0x04	; 4
    1212:	3c d0       	rcall	.+120    	; 0x128c <__ultoa_invert+0x9c>
    1214:	67 0f       	add	r22, r23
    1216:	78 1f       	adc	r23, r24
    1218:	89 1f       	adc	r24, r25
    121a:	9a 1f       	adc	r25, r26
    121c:	a1 1d       	adc	r26, r1
    121e:	68 0f       	add	r22, r24
    1220:	79 1f       	adc	r23, r25
    1222:	8a 1f       	adc	r24, r26
    1224:	91 1d       	adc	r25, r1
    1226:	a1 1d       	adc	r26, r1
    1228:	6a 0f       	add	r22, r26
    122a:	71 1d       	adc	r23, r1
    122c:	81 1d       	adc	r24, r1
    122e:	91 1d       	adc	r25, r1
    1230:	a1 1d       	adc	r26, r1
    1232:	20 d0       	rcall	.+64     	; 0x1274 <__ultoa_invert+0x84>
    1234:	09 f4       	brne	.+2      	; 0x1238 <__ultoa_invert+0x48>
    1236:	68 94       	set
    1238:	3f 91       	pop	r19
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	26 9f       	mul	r18, r22
    123e:	11 24       	eor	r1, r1
    1240:	30 19       	sub	r19, r0
    1242:	30 5d       	subi	r19, 0xD0	; 208
    1244:	31 93       	st	Z+, r19
    1246:	de f6       	brtc	.-74     	; 0x11fe <__ultoa_invert+0xe>
    1248:	cf 01       	movw	r24, r30
    124a:	08 95       	ret
    124c:	46 2f       	mov	r20, r22
    124e:	47 70       	andi	r20, 0x07	; 7
    1250:	40 5d       	subi	r20, 0xD0	; 208
    1252:	41 93       	st	Z+, r20
    1254:	b3 e0       	ldi	r27, 0x03	; 3
    1256:	0f d0       	rcall	.+30     	; 0x1276 <__ultoa_invert+0x86>
    1258:	c9 f7       	brne	.-14     	; 0x124c <__ultoa_invert+0x5c>
    125a:	f6 cf       	rjmp	.-20     	; 0x1248 <__ultoa_invert+0x58>
    125c:	46 2f       	mov	r20, r22
    125e:	4f 70       	andi	r20, 0x0F	; 15
    1260:	40 5d       	subi	r20, 0xD0	; 208
    1262:	4a 33       	cpi	r20, 0x3A	; 58
    1264:	18 f0       	brcs	.+6      	; 0x126c <__ultoa_invert+0x7c>
    1266:	49 5d       	subi	r20, 0xD9	; 217
    1268:	31 fd       	sbrc	r19, 1
    126a:	40 52       	subi	r20, 0x20	; 32
    126c:	41 93       	st	Z+, r20
    126e:	02 d0       	rcall	.+4      	; 0x1274 <__ultoa_invert+0x84>
    1270:	a9 f7       	brne	.-22     	; 0x125c <__ultoa_invert+0x6c>
    1272:	ea cf       	rjmp	.-44     	; 0x1248 <__ultoa_invert+0x58>
    1274:	b4 e0       	ldi	r27, 0x04	; 4
    1276:	a6 95       	lsr	r26
    1278:	97 95       	ror	r25
    127a:	87 95       	ror	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	ba 95       	dec	r27
    1282:	c9 f7       	brne	.-14     	; 0x1276 <__ultoa_invert+0x86>
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 05       	cpc	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	08 95       	ret
    128c:	9b 01       	movw	r18, r22
    128e:	ac 01       	movw	r20, r24
    1290:	0a 2e       	mov	r0, r26
    1292:	06 94       	lsr	r0
    1294:	57 95       	ror	r21
    1296:	47 95       	ror	r20
    1298:	37 95       	ror	r19
    129a:	27 95       	ror	r18
    129c:	ba 95       	dec	r27
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__ultoa_invert+0xa2>
    12a0:	62 0f       	add	r22, r18
    12a2:	73 1f       	adc	r23, r19
    12a4:	84 1f       	adc	r24, r20
    12a6:	95 1f       	adc	r25, r21
    12a8:	a0 1d       	adc	r26, r0
    12aa:	08 95       	ret

000012ac <__divmodsi4>:
    12ac:	05 2e       	mov	r0, r21
    12ae:	97 fb       	bst	r25, 7
    12b0:	1e f4       	brtc	.+6      	; 0x12b8 <__divmodsi4+0xc>
    12b2:	00 94       	com	r0
    12b4:	0e 94 6d 09 	call	0x12da	; 0x12da <__negsi2>
    12b8:	57 fd       	sbrc	r21, 7
    12ba:	07 d0       	rcall	.+14     	; 0x12ca <__divmodsi4_neg2>
    12bc:	0e 94 bf 09 	call	0x137e	; 0x137e <__udivmodsi4>
    12c0:	07 fc       	sbrc	r0, 7
    12c2:	03 d0       	rcall	.+6      	; 0x12ca <__divmodsi4_neg2>
    12c4:	4e f4       	brtc	.+18     	; 0x12d8 <__divmodsi4_exit>
    12c6:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__negsi2>

000012ca <__divmodsi4_neg2>:
    12ca:	50 95       	com	r21
    12cc:	40 95       	com	r20
    12ce:	30 95       	com	r19
    12d0:	21 95       	neg	r18
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	4f 4f       	sbci	r20, 0xFF	; 255
    12d6:	5f 4f       	sbci	r21, 0xFF	; 255

000012d8 <__divmodsi4_exit>:
    12d8:	08 95       	ret

000012da <__negsi2>:
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	08 95       	ret

000012ea <__muluhisi3>:
    12ea:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__umulhisi3>
    12ee:	a5 9f       	mul	r26, r21
    12f0:	90 0d       	add	r25, r0
    12f2:	b4 9f       	mul	r27, r20
    12f4:	90 0d       	add	r25, r0
    12f6:	a4 9f       	mul	r26, r20
    12f8:	80 0d       	add	r24, r0
    12fa:	91 1d       	adc	r25, r1
    12fc:	11 24       	eor	r1, r1
    12fe:	08 95       	ret

00001300 <__mulshisi3>:
    1300:	b7 ff       	sbrs	r27, 7
    1302:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__muluhisi3>

00001306 <__mulohisi3>:
    1306:	0e 94 75 09 	call	0x12ea	; 0x12ea <__muluhisi3>
    130a:	82 1b       	sub	r24, r18
    130c:	93 0b       	sbc	r25, r19
    130e:	08 95       	ret

00001310 <__prologue_saves__>:
    1310:	2f 92       	push	r2
    1312:	3f 92       	push	r3
    1314:	4f 92       	push	r4
    1316:	5f 92       	push	r5
    1318:	6f 92       	push	r6
    131a:	7f 92       	push	r7
    131c:	8f 92       	push	r8
    131e:	9f 92       	push	r9
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	ca 1b       	sub	r28, r26
    133a:	db 0b       	sbc	r29, r27
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
    1346:	09 94       	ijmp

00001348 <__epilogue_restores__>:
    1348:	2a 88       	ldd	r2, Y+18	; 0x12
    134a:	39 88       	ldd	r3, Y+17	; 0x11
    134c:	48 88       	ldd	r4, Y+16	; 0x10
    134e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1350:	6e 84       	ldd	r6, Y+14	; 0x0e
    1352:	7d 84       	ldd	r7, Y+13	; 0x0d
    1354:	8c 84       	ldd	r8, Y+12	; 0x0c
    1356:	9b 84       	ldd	r9, Y+11	; 0x0b
    1358:	aa 84       	ldd	r10, Y+10	; 0x0a
    135a:	b9 84       	ldd	r11, Y+9	; 0x09
    135c:	c8 84       	ldd	r12, Y+8	; 0x08
    135e:	df 80       	ldd	r13, Y+7	; 0x07
    1360:	ee 80       	ldd	r14, Y+6	; 0x06
    1362:	fd 80       	ldd	r15, Y+5	; 0x05
    1364:	0c 81       	ldd	r16, Y+4	; 0x04
    1366:	1b 81       	ldd	r17, Y+3	; 0x03
    1368:	aa 81       	ldd	r26, Y+2	; 0x02
    136a:	b9 81       	ldd	r27, Y+1	; 0x01
    136c:	ce 0f       	add	r28, r30
    136e:	d1 1d       	adc	r29, r1
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	ed 01       	movw	r28, r26
    137c:	08 95       	ret

0000137e <__udivmodsi4>:
    137e:	a1 e2       	ldi	r26, 0x21	; 33
    1380:	1a 2e       	mov	r1, r26
    1382:	aa 1b       	sub	r26, r26
    1384:	bb 1b       	sub	r27, r27
    1386:	fd 01       	movw	r30, r26
    1388:	0d c0       	rjmp	.+26     	; 0x13a4 <__udivmodsi4_ep>

0000138a <__udivmodsi4_loop>:
    138a:	aa 1f       	adc	r26, r26
    138c:	bb 1f       	adc	r27, r27
    138e:	ee 1f       	adc	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	a2 17       	cp	r26, r18
    1394:	b3 07       	cpc	r27, r19
    1396:	e4 07       	cpc	r30, r20
    1398:	f5 07       	cpc	r31, r21
    139a:	20 f0       	brcs	.+8      	; 0x13a4 <__udivmodsi4_ep>
    139c:	a2 1b       	sub	r26, r18
    139e:	b3 0b       	sbc	r27, r19
    13a0:	e4 0b       	sbc	r30, r20
    13a2:	f5 0b       	sbc	r31, r21

000013a4 <__udivmodsi4_ep>:
    13a4:	66 1f       	adc	r22, r22
    13a6:	77 1f       	adc	r23, r23
    13a8:	88 1f       	adc	r24, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	1a 94       	dec	r1
    13ae:	69 f7       	brne	.-38     	; 0x138a <__udivmodsi4_loop>
    13b0:	60 95       	com	r22
    13b2:	70 95       	com	r23
    13b4:	80 95       	com	r24
    13b6:	90 95       	com	r25
    13b8:	9b 01       	movw	r18, r22
    13ba:	ac 01       	movw	r20, r24
    13bc:	bd 01       	movw	r22, r26
    13be:	cf 01       	movw	r24, r30
    13c0:	08 95       	ret

000013c2 <__umulhisi3>:
    13c2:	a2 9f       	mul	r26, r18
    13c4:	b0 01       	movw	r22, r0
    13c6:	b3 9f       	mul	r27, r19
    13c8:	c0 01       	movw	r24, r0
    13ca:	a3 9f       	mul	r26, r19
    13cc:	70 0d       	add	r23, r0
    13ce:	81 1d       	adc	r24, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	91 1d       	adc	r25, r1
    13d4:	b2 9f       	mul	r27, r18
    13d6:	70 0d       	add	r23, r0
    13d8:	81 1d       	adc	r24, r1
    13da:	11 24       	eor	r1, r1
    13dc:	91 1d       	adc	r25, r1
    13de:	08 95       	ret

000013e0 <_exit>:
    13e0:	f8 94       	cli

000013e2 <__stop_program>:
    13e2:	ff cf       	rjmp	.-2      	; 0x13e2 <__stop_program>
